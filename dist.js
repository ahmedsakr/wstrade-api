!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("source-map-support"),require("node-fetch"),require("cloudscraper")):"function"==typeof define&&define.amd?define(["source-map-support","node-fetch","cloudscraper"],t):"object"==typeof exports?exports["wstrade-api"]=t(require("source-map-support"),require("node-fetch"),require("cloudscraper")):e["wstrade-api"]=t(e._,e._,e._)}(global,(function(e,t,r){return(()=>{var n={228:e=>{e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}},858:e=>{e.exports=function(e){if(Array.isArray(e))return e}},646:(e,t,r)=>{var n=r(228);e.exports=function(e){if(Array.isArray(e))return n(e)}},926:e=>{function t(e,t,r,n,a,i,s){try{var o=e[i](s),u=o.value}catch(e){return void r(e)}o.done?t(u):Promise.resolve(u).then(n,a)}e.exports=function(e){return function(){var r=this,n=arguments;return new Promise((function(a,i){var s=e.apply(r,n);function o(e){t(s,a,i,o,u,"next",e)}function u(e){t(s,a,i,o,u,"throw",e)}o(void 0)}))}}},575:e=>{e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},913:e=>{function t(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e.exports=function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}},713:e=>{e.exports=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}},860:e=>{e.exports=function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}},884:e=>{e.exports=function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var r=[],n=!0,a=!1,i=void 0;try{for(var s,o=e[Symbol.iterator]();!(n=(s=o.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==o.return||o.return()}finally{if(a)throw i}}return r}}},521:e=>{e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},206:e=>{e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},38:(e,t,r)=>{var n=r(858),a=r(884),i=r(379),s=r(521);e.exports=function(e,t){return n(e)||a(e,t)||i(e,t)||s()}},319:(e,t,r)=>{var n=r(646),a=r(860),i=r(379),s=r(206);e.exports=function(e){return n(e)||a(e)||i(e)||s()}},379:(e,t,r)=>{var n=r(228);e.exports=function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}},757:(e,t,r)=>{e.exports=r(666)},391:(e,t,r)=>{"use strict";r.d(t,{Z:()=>v});var n=r(319),a=r.n(n),i=r(757),s=r.n(i),o=r(926),u=r.n(o),c=r(575),l=r.n(c),h=r(913),p=r.n(h),f=r(726),d=99,y=["sell","deposit","withdrawal","dividend","institutional_transfer","internal_transfer","refund","referral_bonus","affiliate","buy"];const v=function(){function e(t){l()(this,e),this.worker=t}var t,r,n,i,o,c,h,v,m;return p()(e,[{key:"all",value:(m=u()(s().mark((function e(){var t;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.worker.handleRequest(f.Z.ACCOUNT_IDS,{});case 2:return t=e.sent,e.abrupt("return",{tfsa:t.find((function(e){return e.startsWith("tfsa")})),rrsp:t.find((function(e){return e.startsWith("rrsp")})),crypto:t.find((function(e){return e.startsWith("non-registered-crypto")})),personal:t.find((function(e){return e.startsWith("non-registered")&&!e.startsWith("non-registered-crypto")}))});case 4:case"end":return e.stop()}}),e,this)}))),function(){return m.apply(this,arguments)})},{key:"data",value:(v=u()(s().mark((function e(){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.handleRequest(f.Z.LIST_ACCOUNT,{}));case 1:case"end":return e.stop()}}),e,this)}))),function(){return v.apply(this,arguments)})},{key:"me",value:(h=u()(s().mark((function e(){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.handleRequest(f.Z.ME,{}));case 1:case"end":return e.stop()}}),e,this)}))),function(){return h.apply(this,arguments)})},{key:"person",value:(c=u()(s().mark((function e(){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.handleRequest(f.Z.PERSON,{}));case 1:case"end":return e.stop()}}),e,this)}))),function(){return c.apply(this,arguments)})},{key:"history",value:(o=u()(s().mark((function e(t,r){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.handleRequest(f.Z.HISTORY_ACCOUNT,{interval:t,accountId:r}));case 1:case"end":return e.stop()}}),e,this)}))),function(e,t){return o.apply(this,arguments)})},{key:"activities",value:(i=u()(s().mark((function e(){var t,r,n,i,o,u,c,l,h,p,v=arguments;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(null!=(o=v.length>0&&void 0!==v[0]?v[0]:{})&&o.limit&&o.limit>d)){e.next=3;break}throw new Error("filters.limit can not exceed 99! Leave filters.limit undefined if you want to retrieve all.");case 3:if(null==o||!o.accounts||Array.isArray(o.accounts)){e.next=5;break}throw new Error("filters.accounts must be an array!");case 5:if(null==o||!o.type||Array.isArray(o.type)){e.next=7;break}throw new Error("filters.type must be an array!");case 7:return u=[],e.next=10,this.worker.handleRequest(f.Z.ACTIVITIES,{limit:null!==(t=null==o?void 0:o.limit)&&void 0!==t?t:d,accountIds:null!==(r=null==o||null===(n=o.accounts)||void 0===n?void 0:n.join())&&void 0!==r?r:"",bookmark:"",type:null!==(i=null==o?void 0:o.type)&&void 0!==i?i:y});case 10:if(c=e.sent,u.push.apply(u,a()(c.results)),null!=o&&o.limit){e.next=22;break}case 13:if(u.length%d!=0){e.next=22;break}return e.next=16,this.worker.handleRequest(f.Z.ACTIVITIES,{limit:d,accountIds:null!==(l=null==o||null===(h=o.accounts)||void 0===h?void 0:h.join())&&void 0!==l?l:"",bookmark:c.bookmark,type:null!==(p=null==o?void 0:o.type)&&void 0!==p?p:y});case 16:if(0!==(c=e.sent).results.length){e.next=19;break}return e.abrupt("break",22);case 19:u.push.apply(u,a()(c.results)),e.next=13;break;case 22:return e.abrupt("return",u);case 23:case"end":return e.stop()}}),e,this)}))),function(){return i.apply(this,arguments)})},{key:"getBankAccounts",value:(n=u()(s().mark((function e(){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.handleRequest(f.Z.BANK_ACCOUNTS,{}));case 1:case"end":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})},{key:"deposits",value:(r=u()(s().mark((function e(){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.handleRequest(f.Z.DEPOSITS,{}));case 1:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"positions",value:(t=u()(s().mark((function e(t){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.handleRequest(f.Z.POSITIONS,{accountId:t}));case 1:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})}]),e}()},726:(e,t,r)=>{"use strict";r.d(t,{Z:()=>k});var n,a,i,s,o,u,c,l,h,p,f,d=r(757),y=r.n(d),v=r(926),m=r.n(v),w={onFailure:(a=m()(y().mark((function e(t){return y().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",{status:t.statusCode,reason:t.statusMessage,body:t.body});case 1:case"end":return e.stop()}}),e)}))),function(e){return a.apply(this,arguments)}),onSuccess:(n=m()(y().mark((function e(t){return y().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",t.body);case 1:case"end":return e.stop()}}),e)}))),function(e){return n.apply(this,arguments)})};const k={LOGIN:{method:"POST",url:"https://trade-service.wealthsimple.com/auth/login",authenticated:!1,onSuccess:(f=m()(y().mark((function e(t){return y().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",{tokens:{access:t.headers["x-access-token"],refresh:t.headers["x-refresh-token"],expires:parseInt(t.headers["x-access-token-expires"],10)},accountInfo:t.body});case 1:case"end":return e.stop()}}),e)}))),function(e){return f.apply(this,arguments)}),onFailure:w.onFailure},REFRESH:{method:"POST",url:"https://trade-service.wealthsimple.com/auth/refresh",authenticated:!1,onSuccess:(p=m()(y().mark((function e(t){return y().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",{tokens:{access:t.headers["x-access-token"],refresh:t.headers["x-refresh-token"],expires:parseInt(t.headers["x-access-token-expires"],10)}});case 1:case"end":return e.stop()}}),e)}))),function(e){return p.apply(this,arguments)}),onFailure:w.onFailure},ACCOUNT_IDS:{method:"GET",url:"https://trade-service.wealthsimple.com/account/list",authenticated:!0,onSuccess:(h=m()(y().mark((function e(t){var r;return y().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.body,e.abrupt("return",r.results.map((function(e){return e.id})));case 2:case"end":return e.stop()}}),e)}))),function(e){return h.apply(this,arguments)}),onFailure:w.onFailure},LIST_ACCOUNT:{method:"GET",url:"https://trade-service.wealthsimple.com/account/list",authenticated:!0,onSuccess:(l=m()(y().mark((function e(t){var r;return y().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.body,e.abrupt("return",r.results);case 2:case"end":return e.stop()}}),e)}))),function(e){return l.apply(this,arguments)}),onFailure:w.onFailure},ME:{method:"GET",url:"https://trade-service.wealthsimple.com/me",authenticated:!0,onSuccess:w.onSuccess,onFailure:w.onFailure},PERSON:{method:"GET",url:"https://trade-service.wealthsimple.com/person",authenticated:!0,onSuccess:w.onSuccess,onFailure:w.onFailure},HISTORY_ACCOUNT:{method:"GET",url:"https://trade-service.wealthsimple.com/account/history/{0}?account_id={1}",authenticated:!0,parameters:{0:"interval",1:"accountId"},onSuccess:w.onSuccess,onFailure:w.onFailure},ACTIVITIES:{method:"GET",url:"https://trade-service.wealthsimple.com/account/activities?limit={0}&account_ids={1}&[2]&bookmark={3}",authenticated:!0,parameters:{0:"limit",1:"accountIds",2:"type",3:"bookmark"},onSuccess:w.onSuccess,onFailure:w.onFailure},DEPOSITS:{method:"GET",url:"https://trade-service.wealthsimple.com/deposits",authenticated:!0,onSuccess:(c=m()(y().mark((function e(t){var r;return y().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.body,e.abrupt("return",r.results);case 2:case"end":return e.stop()}}),e)}))),function(e){return c.apply(this,arguments)}),onFailure:w.onFailure},BANK_ACCOUNTS:{method:"GET",url:"https://trade-service.wealthsimple.com/bank-accounts",authenticated:!0,onSuccess:(u=m()(y().mark((function e(t){var r;return y().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.body,e.abrupt("return",r.results);case 2:case"end":return e.stop()}}),e)}))),function(e){return u.apply(this,arguments)}),onFailure:w.onFailure},EXCHANGE_RATES:{method:"GET",url:"https://trade-service.wealthsimple.com/forex",authenticated:!0,onSuccess:w.onSuccess,onFailure:w.onFailure},SECURITY:{method:"GET",url:"https://trade-service.wealthsimple.com/securities?query={0}",authenticated:!0,parameters:{0:"ticker"},onSuccess:(o=m()(y().mark((function e(t){var r;return y().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(0!==(r=t.body).results.length){e.next=3;break}throw new Error("Security does not exist");case 3:return e.abrupt("return",r.results);case 4:case"end":return e.stop()}}),e)}))),function(e){return o.apply(this,arguments)}),onFailure:w.onFailure},EXTENSIVE_SECURITY_DETAILS:{method:"GET",url:"https://trade-service.wealthsimple.com/securities/{0}",authenticated:!0,parameters:{0:"id"},onSuccess:w.onSuccess,onFailure:w.onFailure},QUOTES_HISTORY:{method:"GET",url:"https://trade-service.wealthsimple.com/securities/{0}/historical_quotes/{1}?mic=XNAS",authenticated:!0,parameters:{0:"id",1:"interval"},onSuccess:w.onSuccess,onFailure:w.onFailure},POSITIONS:{method:"GET",url:"https://trade-service.wealthsimple.com/account/positions?account_id={0}",authenticated:!0,parameters:{0:"accountId"},onSuccess:(s=m()(y().mark((function e(t){var r;return y().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.body,e.abrupt("return",r.results);case 2:case"end":return e.stop()}}),e)}))),function(e){return s.apply(this,arguments)}),onFailure:w.onFailure},ORDERS_BY_PAGE:{method:"GET",url:"https://trade-service.wealthsimple.com/orders?offset={0}&account_id={1}",authenticated:!0,parameters:{0:"offset",1:"accountId"},onSuccess:(i=m()(y().mark((function e(t){var r;return y().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.body,e.abrupt("return",{total:r.total,orders:r.results});case 2:case"end":return e.stop()}}),e)}))),function(e){return i.apply(this,arguments)}),onFailure:w.onFailure},CANCEL_ORDER:{method:"DELETE",url:"https://trade-service.wealthsimple.com/orders/{0}",authenticated:!0,parameters:{0:"orderId"},onSuccess:w.onSuccess,onFailure:w.onFailure},PLACE_ORDER:{method:"POST",url:"https://trade-service.wealthsimple.com/orders",authenticated:!0,onSuccess:w.onSuccess,onFailure:w.onFailure}}},464:(e,t,r)=>{"use strict";r.d(t,{Z:()=>p});var n=r(757),a=r.n(n),i=r(926),s=r.n(i),o=r(575),u=r.n(o),c=r(913),l=r.n(c),h=r(726);const p=function(){function e(t){u()(this,e),this.worker=t,this.events={otp:null}}var t,r;return l()(e,[{key:"on",value:function(e,t){if(!(e in this.events))throw new Error("Unsupported authentication event '".concat(e,"'!"));this.events[e]=t}},{key:"use",value:function(e){this.worker.tokens.store(e)}},{key:"tokens",value:function(){return{access:this.worker.tokens.access,refresh:this.worker.tokens.refresh,expires:this.woorker.tokens.expires}}},{key:"login",value:(r=s()(a().mark((function e(t,r){var n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=null,"function"!=typeof this.events.otp){e.next=4;break}return e.next=4,this.worker.handleRequest(h.Z.LOGIN,{email:t,password:r}).catch((function(){}));case 4:if(e.prev=4,e.t0=this.worker,e.t1=h.Z.LOGIN,e.t2=t,e.t3=r,"function"!=typeof this.events.otp){e.next=15;break}return e.next=12,this.events.otp();case 12:e.t4=e.sent,e.next=16;break;case 15:e.t4=this.events.otp;case 16:return e.t5=e.t4,e.t6={email:e.t2,password:e.t3,otp:e.t5},e.next=20,e.t0.handleRequest.call(e.t0,e.t1,e.t6);case 20:n=e.sent,e.next=28;break;case 23:if(e.prev=23,e.t7=e.catch(4),this.events.otp){e.next=27;break}throw new Error("OTP not provided!");case 27:throw e.t7;case 28:this.use(n.tokens);case 29:case"end":return e.stop()}}),e,this,[[4,23]])}))),function(e,t){return r.apply(this,arguments)})},{key:"refresh",value:(t=s()(a().mark((function e(){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:this.worker.refreshAuthentication();case 1:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),e}()},500:(e,t,r)=>{"use strict";r.d(t,{e:()=>i,Z:()=>s});var n=["implicit_token_refresh","securities_cache"],a=["securities_cache"],i=function(e){return!a.includes(e)};function s(e){if(!function(e){return null!=e&&e.startsWith("no_")?n.includes(e.substring("no_".length)):n.includes(e)}(e))throw new Error("'".concat(e,"' is not supported!"));if(null!=e&&e.startsWith("no_")){var t=e.substring(e.indexOf("_")+1);i(t)&&a.push(t)}else i(e)||a.splice(a.indexOf(e),1)}},657:(e,t,r)=>{"use strict";r.d(t,{Z:()=>l});var n=r(38),a=r.n(n),i=r(575),s=r.n(i),o=r(913),u=r.n(o),c=["NASDAQ","NYSE","TSX","TSX-V","AEQUITAS NEO EXCHANGE","CC"];const l=function(){function e(t){var r;if(s()(this,e),this.symbol=null,this.exchange=null,this.id=null,this.crypto=!1,"string"==typeof t){if(""===t)throw new Error("Empty ticker");var n=t.split(":"),i=a()(n,2);this.symbol=i[0],this.exchange=i[1]}else{if(!t.symbol&&!t.id)throw new Error("Invalid ticker '".concat(t,"'"));this.symbol=t.symbol||null,this.exchange=t.exchange||null,this.id=t.id||null}if("NEO"===this.exchange&&(this.exchange="AEQUITAS NEO EXCHANGE"),this.exchange&&!c.includes(this.exchange))throw new Error("Invalid exchange '".concat(this.exchange,"'!"));("CC"===this.exchange||null!==(r=this.id)&&void 0!==r&&r.startsWith("sec-z"))&&(this.crypto=!0)}return u()(e,[{key:"format",value:function(){return this.id?this.id:"AEQUITAS NEO EXCHANGE"===this.exchange?"".concat(this.symbol,":NEO"):"".concat(this.symbol).concat(this.exchange?":".concat(this.exchange):"")}},{key:"weakEquals",value:function(e){return!(!this.id||this.id!==e.id)||!(!this.symbol||this.symbol!==e.symbol||this.crypto!==e.crypto)}}]),e}()},752:(e,t,r)=>{"use strict";r.d(t,{Z:()=>w});var n=r(38),a=r.n(n),i=r(757),s=r.n(i),o=r(926),u=r.n(o),c=r(575),l=r.n(c),h=r(913),p=r.n(h),f=r(726),d=r(657),y=r(500),v=new(function(){function e(t){l()(this,e),this.cache=new Map,this.size=t}return p()(e,[{key:"insert",value:function(e,t){this.cache.size>=this.size&&this.cache.delete(this.cache.keys().next().value),this.cache.set(e,t)}},{key:"get",value:function(e){return this.cache.get(e)}}]),e}())(10);const m=function(e){var t=v.get(new d.Z(e).format());return void 0===t?null:t},w=function(){function e(t){l()(this,e),this.worker=t}var t,r;return p()(e,[{key:"exchangeRates",value:(r=u()(s().mark((function e(){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.handleRequest(f.Z.EXCHANGE_RATES,{}));case 1:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"getSecurity",value:(t=u()(s().mark((function e(t,r){var n,i,o,u;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=null,i=new d.Z(t),r||!(0,y.e)("securities_cache")){e.next=6;break}if(!(n=m(i))){e.next=6;break}return e.abrupt("return",n);case 6:if(!i.id){e.next=12;break}return e.next=9,this.worker.handleRequest(f.Z.EXTENSIVE_SECURITY_DETAILS,{id:i.id});case 9:n=e.sent,e.next=28;break;case 12:return e.next=14,this.worker.handleRequest(f.Z.SECURITY,{ticker:i.symbol});case 14:if(n=(n=e.sent).filter((function(e){return e.stock.symbol===i.symbol})),i.crypto?n=n.filter((function(e){return"cryptocurrency"===e.security_type})):i.exchange&&(n=n.filter((function(e){return e.stock.primary_exchange===i.exchange}))),!(n.length>1)){e.next=19;break}throw new Error("Multiple securities matched query.");case 19:if(0!==n.length){e.next=21;break}throw new Error("No securities matched query.");case 21:if(o=n,u=a()(o,1),n=u[0],!r){e.next=28;break}return e.next=27,this.worker.handleRequest(f.Z.EXTENSIVE_SECURITY_DETAILS,{id:n.id});case 27:n=e.sent;case 28:return(0,y.e)("securities_cache")&&null===m(i)&&(s=i,c=n,v.insert(new d.Z(s).format(),c)),e.abrupt("return",n);case 30:case"end":return e.stop()}var s,c}),e,this)}))),function(e,r){return t.apply(this,arguments)})}]),e}()},568:(e,t,r)=>{"use strict";r.d(t,{Z:()=>s});var n=r(319),a=r.n(n),i=new(r(545).Headers);const s={add:function(e,t){return i.append(e,t)},remove:function(e){return i.delete(e)},clear:function(){return a()(i).forEach((function(e){return i.delete(e[0])}))},values:function(){return a()(i)}}},352:(e,t,r)=>{r(949).install();var n=r(464).Z,a=r(568).Z,i=r(391).Z,s=r(764).Z,o=r(752).Z,u=r(889).Z,c=r(500).Z,l=r(190).Z,h=function(){var e=new l,t=new o(e);return{auth:new n(e),headers:a,accounts:new i(e),orders:new s(e,t),quotes:new u(e,t),data:t,config:c}},p=new h;p.Session=function(){return new h},e.exports=p},190:(e,t,r)=>{"use strict";r.d(t,{Z:()=>S});var n=r(757),a=r.n(n),i=r(38),s=r.n(i),o=r(926),u=r.n(o),c=r(575),l=r.n(c),h=r(913),p=r.n(h),f=r(713),d=r.n(f),y=r(214),v=r.n(y),m=r(568),w=r(726),k=r(500);const x=function(){function e(){l()(this,e),this.access=null,this.refresh=null,this.expires=null}return p()(e,[{key:"store",value:function(e){this.access=e.access,this.refresh=e.refresh,this.expires=e.expires}},{key:"expired",value:function(){return this.expires&&parseInt(Date.now()/1e3,10)>=this.expires}}]),e}();function b(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}var E=200,g=201;function _(e,t){var r=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?b(Object(r),!0).forEach((function(t){d()(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):b(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({},t),n=e.url;if(e.parameters)for(var a=0;a<Object.keys(e.parameters).length;a++){var i=e.parameters[a];if(null===r[i]||void 0===r[i])throw new Error("URL parameter '".concat(i,"' missing!"));if(n.indexOf("{".concat(a,"}"))>=0)n=n.replace("{".concat(a,"}"),r[e.parameters[a]]);else{if(!(n.indexOf("[".concat(a,"]"))>=0))throw new Error("Malformed URL! This is an internal error: raise an issue!");!function(){var t=e.parameters[a],i=r[t].map((function(e){return"".concat(t,"=").concat(e)})).join("&");n=n.replace("[".concat(a,"]"),i)}()}delete r[e.parameters[a]]}return["GET","HEAD"].includes(e.method)?{url:n,payload:void 0}:{url:n,payload:JSON.stringify(r)}}const S=function(){function e(){l()(this,e),this.tokens=new x}var t,r,n,i;return p()(e,[{key:"talk",value:(i=u()(a().mark((function e(t,r){var n,i,o,u,c;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n={"Content-type":"application/json"},!t.authenticated){e.next=8;break}if(this.tokens.access){e.next=4;break}throw new Error("Authentication required for '".concat(t.url,"'"));case 4:if(!(0,k.e)("implicit_token_refresh")){e.next=7;break}return e.next=7,this.implicitTokenRefresh();case 7:n.Authorization=this.tokens.access;case 8:return m.Z.values().forEach((function(e){var t=s()(e,2),r=t[0],a=t[1];n[r]=a})),i=_(t,r),o=i.url,u=i.payload,c=null,e.next=13,v()({url:o,body:u,method:t.method,headers:n,callback:function(e,t){c=t}}).catch((function(){}));case 13:try{c.body=JSON.parse(c.body)}catch(e){}return e.abrupt("return",c);case 15:case"end":return e.stop()}}),e,this)}))),function(e,t){return i.apply(this,arguments)})},{key:"handleRequest",value:(n=u()(a().mark((function e(t,r){var n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.talk(t,r);case 2:if(n=e.sent,![E,g].includes(n.statusCode)){e.next=5;break}return e.abrupt("return",t.onSuccess(n));case 5:return e.t0=Promise,e.next=8,t.onFailure(n);case 8:return e.t1=e.sent,e.abrupt("return",e.t0.reject.call(e.t0,e.t1));case 10:case"end":return e.stop()}}),e,this)}))),function(e,t){return n.apply(this,arguments)})},{key:"refreshAuthentication",value:(r=u()(a().mark((function e(){var t;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.handleRequest(w.Z.REFRESH,{refresh_token:this.tokens.refresh});case 2:t=e.sent,this.tokens.store(t.tokens);case 4:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"implicitTokenRefresh",value:(t=u()(a().mark((function e(){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!this.tokens.expired()){e.next=13;break}if(!this.tokens.refresh){e.next=12;break}return e.prev=2,e.next=5,this.refreshAuthentication();case 5:e.next=10;break;case 7:throw e.prev=7,e.t0=e.catch(2),new Error("Unable to refresh expired token: ".concat(e.t0));case 10:e.next=13;break;case 12:throw new Error("Access token expired");case 13:case"end":return e.stop()}}),e,this,[[2,7]])}))),function(){return t.apply(this,arguments)})}]),e}()},764:(e,t,r)=>{"use strict";r.d(t,{Z:()=>m});var n=r(319),a=r.n(n),i=r(757),s=r.n(i),o=r(926),u=r.n(o),c=r(575),l=r.n(c),h=r(913),p=r.n(h),f=r(726),d=r(657),y=function(e){return["TSX","TSX-V"].includes(e)};function v(e,t,r){var n=e.orders.filter((function(e){if(t){var n=new d.Z({symbol:e.symbol,id:e.security_id});if(!new d.Z(t).weakEquals(n))return!1}return e.status===r}));return{orders:n,total:n.length}}const m=function(){function e(t,r){l()(this,e),this.worker=t,this.data=r}var t,r,n,i,o,c,h,m,w,k,x,b,E;return p()(e,[{key:"page",value:(E=u()(s().mark((function e(t,r){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.worker.handleRequest(f.Z.ORDERS_BY_PAGE,{offset:20*(r-1),accountId:t}));case 1:case"end":return e.stop()}}),e,this)}))),function(e,t){return E.apply(this,arguments)})},{key:"all",value:(b=u()(s().mark((function e(t){var r,n,i,o;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.page(t,1);case 2:if(r=e.sent,!((n=Math.ceil(r.total/20))>1)){e.next=12;break}for(i=[],o=2;o<=n;o++)i.push(this.page(t,o).then((function(e){return e.orders})));return e.next=9,Promise.all(i);case 9:e.sent.forEach((function(e){var t;return(t=r.orders).push.apply(t,a()(e))})),r.total=r.orders.length;case 12:return e.abrupt("return",r);case 13:case"end":return e.stop()}}),e,this)}))),function(e){return b.apply(this,arguments)})},{key:"pending",value:(x=u()(s().mark((function e(t,r){var n;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.all(t);case 2:return n=e.sent,e.abrupt("return",v(n,r,"submitted"));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t){return x.apply(this,arguments)})},{key:"filled",value:(k=u()(s().mark((function e(t,r){var n;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.all(t);case 2:return n=e.sent,e.abrupt("return",v(n,r,"posted"));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t){return k.apply(this,arguments)})},{key:"cancelled",value:(w=u()(s().mark((function e(t,r){var n;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.all(t);case 2:return n=e.sent,e.abrupt("return",v(n,r,"cancelled"));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t){return w.apply(this,arguments)})},{key:"cancel",value:(m=u()(s().mark((function e(t){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=t,e.next=3,this.worker.handleRequest(f.Z.CANCEL_ORDER,{orderId:t});case 3:return e.t1=e.sent,e.abrupt("return",{order:e.t0,response:e.t1});case 5:case"end":return e.stop()}}),e,this)}))),function(e){return m.apply(this,arguments)})},{key:"cancelPending",value:(h=u()(s().mark((function e(t){var r,n=this;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.pending(t);case 2:return r=e.sent,e.abrupt("return",Promise.all(r.orders.map(function(){var e=u()(s().mark((function e(t){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",n.cancel(t.order_id));case 1:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}())));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return h.apply(this,arguments)})},{key:"marketBuy",value:(c=u()(s().mark((function e(t,r,n){var a;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.data.getSecurity(r,!0);case 2:return a=e.sent,e.abrupt("return",this.worker.handleRequest(f.Z.PLACE_ORDER,{security_id:a.id,limit_price:new d.Z(r).crypto?void 0:a.quote.amount,quantity:n,order_type:"buy_quantity",order_sub_type:"market",time_in_force:"day",account_id:t}));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t,r){return c.apply(this,arguments)})},{key:"limitBuy",value:(o=u()(s().mark((function e(t,r,n,a){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=this.worker,e.t1=f.Z.PLACE_ORDER,e.next=4,this.data.getSecurity(r);case 4:return e.t2=e.sent.id,e.t3=n,e.t4=a,e.t5=t,e.t6={security_id:e.t2,limit_price:e.t3,quantity:e.t4,order_type:"buy_quantity",order_sub_type:"limit",time_in_force:"day",account_id:e.t5},e.abrupt("return",e.t0.handleRequest.call(e.t0,e.t1,e.t6));case 10:case"end":return e.stop()}}),e,this)}))),function(e,t,r,n){return o.apply(this,arguments)})},{key:"stopLimitBuy",value:(i=u()(s().mark((function e(t,r,n,a,i){var o;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.data.getSecurity(r);case 2:if(o=e.sent,!y(o.stock.primary_exchange)||n===a){e.next=5;break}throw new Error("TSX/TSX-V securities must have an equivalent stop and limit price.");case 5:return e.abrupt("return",this.worker.handleRequest(f.Z.PLACE_ORDER,{security_id:o.id,stop_price:n,limit_price:a,quantity:i,order_type:"buy_quantity",order_sub_type:"stop_limit",time_in_force:"day",account_id:t}));case 6:case"end":return e.stop()}}),e,this)}))),function(e,t,r,n,a){return i.apply(this,arguments)})},{key:"marketSell",value:(n=u()(s().mark((function e(t,r,n){var a;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.data.getSecurity(r,!0);case 2:return a=e.sent,e.abrupt("return",this.worker.handleRequest(f.Z.PLACE_ORDER,{security_id:a.id,market_value:new d.Z(r).crypto?void 0:a.quote.amount,quantity:n,order_type:"sell_quantity",order_sub_type:"market",time_in_force:"day",account_id:t}));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t,r){return n.apply(this,arguments)})},{key:"limitSell",value:(r=u()(s().mark((function e(t,r,n,a){return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=this.worker,e.t1=f.Z.PLACE_ORDER,e.next=4,this.data.getSecurity(r);case 4:return e.t2=e.sent.id,e.t3=n,e.t4=a,e.t5=t,e.t6={security_id:e.t2,limit_price:e.t3,quantity:e.t4,order_type:"sell_quantity",order_sub_type:"limit",time_in_force:"day",account_id:e.t5},e.abrupt("return",e.t0.handleRequest.call(e.t0,e.t1,e.t6));case 10:case"end":return e.stop()}}),e,this)}))),function(e,t,n,a){return r.apply(this,arguments)})},{key:"stopLimitSell",value:(t=u()(s().mark((function e(t,r,n,a,i){var o;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.data.getSecurity(r);case 2:if(o=e.sent,!y(o.stock.primary_exchange)||n===a){e.next=5;break}throw new Error("TSX/TSX-V securities must have an equivalent stop and limit price.");case 5:return e.abrupt("return",this.worker.handleRequest(f.Z.PLACE_ORDER,{security_id:o.id,stop_price:n,limit_price:a,quantity:i,order_type:"sell_quantity",order_sub_type:"stop_limit",time_in_force:"day",account_id:t}));case 6:case"end":return e.stop()}}),e,this)}))),function(e,r,n,a,i){return t.apply(this,arguments)})}]),e}()},889:(e,t,r)=>{"use strict";r.d(t,{Z:()=>d});var n=r(757),a=r.n(n),i=r(926),s=r.n(i),o=r(575),u=r.n(o),c=r(913),l=r.n(c);const h=function(e){return{quote:function(t){return s()(a().mark((function r(){var n;return a().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,e.getSecurity(t,!0);case 2:return n=r.sent,r.abrupt("return",n.quote.amount);case 4:case"end":return r.stop()}}),r)})))()}}};var p=r(657),f=r(726);const d=function(){function e(t,r){u()(this,e),this.defaultProvider=new h(r),this.providers={},this.worker=t,this.data=r}var t,r;return l()(e,[{key:"use",value:function(e,t){if("function"!=typeof t.quote)throw new Error("Invalid quote provider for ".concat(e,"!"));this.providers[e]=t}},{key:"get",value:(r=s()(a().mark((function e(t){var r,n,i;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=null,!(n=new p.Z(t)).exchange){e.next=6;break}r=n.exchange,e.next=15;break;case 6:if(!n.crypto||!n.id){e.next=10;break}r="CC",e.next=15;break;case 10:if(!(Object.keys(this.providers).length>0)){e.next=15;break}return e.next=13,this.data.getSecurity(n,!1);case 13:i=e.sent,r=i.stock.primary_exchange;case 15:if(!(r in this.providers)){e.next=17;break}return e.abrupt("return",this.providers[r].quote(n));case 17:return e.abrupt("return",this.defaultProvider.quote(n));case 18:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"history",value:(t=s()(a().mark((function e(t,r){var n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if((n=new p.Z(t)).id){e.next=5;break}return e.next=4,this.data.getSecurity(n);case 4:n.id=e.sent.id;case 5:return e.abrupt("return",this.worker.handleRequest(f.Z.QUOTES_HISTORY,{id:n.id,interval:r}));case 6:case"end":return e.stop()}}),e,this)}))),function(e,r){return t.apply(this,arguments)})}]),e}()},666:e=>{var t=function(e){"use strict";var t,r=Object.prototype,n=r.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",o=a.toStringTag||"@@toStringTag";function u(e,t,r,n){var a=t&&t.prototype instanceof y?t:y,i=Object.create(a.prototype),s=new T(n||[]);return i._invoke=function(e,t,r){var n=l;return function(a,i){if(n===p)throw new Error("Generator is already running");if(n===f){if("throw"===a)throw i;return A()}for(r.method=a,r.arg=i;;){var s=r.delegate;if(s){var o=_(s,r);if(o){if(o===d)continue;return o}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===l)throw n=f,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var u=c(e,t,r);if("normal"===u.type){if(n=r.done?f:h,u.arg===d)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=f,r.method="throw",r.arg=u.arg)}}}(e,r,s),i}function c(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var l="suspendedStart",h="suspendedYield",p="executing",f="completed",d={};function y(){}function v(){}function m(){}var w={};w[i]=function(){return this};var k=Object.getPrototypeOf,x=k&&k(k(R([])));x&&x!==r&&n.call(x,i)&&(w=x);var b=m.prototype=y.prototype=Object.create(w);function E(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function g(e,t){function r(a,i,s,o){var u=c(e[a],e,i);if("throw"!==u.type){var l=u.arg,h=l.value;return h&&"object"==typeof h&&n.call(h,"__await")?t.resolve(h.__await).then((function(e){r("next",e,s,o)}),(function(e){r("throw",e,s,o)})):t.resolve(h).then((function(e){l.value=e,s(l)}),(function(e){return r("throw",e,s,o)}))}o(u.arg)}var a;this._invoke=function(e,n){function i(){return new t((function(t,a){r(e,n,t,a)}))}return a=a?a.then(i,i):i()}}function _(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,_(e,r),"throw"===r.method))return d;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var a=c(n,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,d;var i=a.arg;return i?i.done?(r[e.resultName]=i.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,d):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,d)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function R(e){if(e){var r=e[i];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var a=-1,s=function r(){for(;++a<e.length;)if(n.call(e,a))return r.value=e[a],r.done=!1,r;return r.value=t,r.done=!0,r};return s.next=s}}return{next:A}}function A(){return{value:t,done:!0}}return v.prototype=b.constructor=m,m.constructor=v,m[o]=v.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,o in e||(e[o]="GeneratorFunction")),e.prototype=Object.create(b),e},e.awrap=function(e){return{__await:e}},E(g.prototype),g.prototype[s]=function(){return this},e.AsyncIterator=g,e.async=function(t,r,n,a,i){void 0===i&&(i=Promise);var s=new g(u(t,r,n,a),i);return e.isGeneratorFunction(r)?s:s.next().then((function(e){return e.done?e.value:s.next()}))},E(b),b[o]="Generator",b[i]=function(){return this},b.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=R,T.prototype={constructor:T,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(O),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function a(n,a){return o.type="throw",o.arg=e,r.next=n,a&&(r.method="next",r.arg=t),!!a}for(var i=this.tryEntries.length-1;i>=0;--i){var s=this.tryEntries[i],o=s.completion;if("root"===s.tryLoc)return a("end");if(s.tryLoc<=this.prev){var u=n.call(s,"catchLoc"),c=n.call(s,"finallyLoc");if(u&&c){if(this.prev<s.catchLoc)return a(s.catchLoc,!0);if(this.prev<s.finallyLoc)return a(s.finallyLoc)}else if(u){if(this.prev<s.catchLoc)return a(s.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return a(s.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&n.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var i=a;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var s=i?i.completion:{};return s.type=e,s.arg=t,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(s)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),d},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),O(r),d}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var a=n.arg;O(r)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:R(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),d}},e}(e.exports);try{regeneratorRuntime=t}catch(e){Function("r","regeneratorRuntime = r")(t)}},214:e=>{"use strict";e.exports=r},545:e=>{"use strict";e.exports=t},949:t=>{"use strict";t.exports=e}},a={};function i(e){if(a[e])return a[e].exports;var t=a[e]={exports:{}};return n[e](t,t.exports,i),t.exports}return i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var r in t)i.o(t,r)&&!i.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i(352)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,