!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("source-map-support"),require("node-fetch")):"function"==typeof define&&define.amd?define(["source-map-support","node-fetch"],e):"object"==typeof exports?exports["wstrade-api"]=e(require("source-map-support"),require("node-fetch")):t["wstrade-api"]=e(t._,t._)}(global,(function(t,e){return(()=>{var r={228:t=>{t.exports=function(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}},858:t=>{t.exports=function(t){if(Array.isArray(t))return t}},646:(t,e,r)=>{var n=r(228);t.exports=function(t){if(Array.isArray(t))return n(t)}},926:t=>{function e(t,e,r,n,a,o,i){try{var c=t[o](i),s=c.value}catch(t){return void r(t)}c.done?e(s):Promise.resolve(s).then(n,a)}t.exports=function(t){return function(){var r=this,n=arguments;return new Promise((function(a,o){var i=t.apply(r,n);function c(t){e(i,a,o,c,s,"next",t)}function s(t){e(i,a,o,c,s,"throw",t)}c(void 0)}))}}},575:t=>{t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},913:t=>{function e(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}t.exports=function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}},713:t=>{t.exports=function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}},860:t=>{t.exports=function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}},884:t=>{t.exports=function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var r=[],n=!0,a=!1,o=void 0;try{for(var i,c=t[Symbol.iterator]();!(n=(i=c.next()).done)&&(r.push(i.value),!e||r.length!==e);n=!0);}catch(t){a=!0,o=t}finally{try{n||null==c.return||c.return()}finally{if(a)throw o}}return r}}},521:t=>{t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},206:t=>{t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},38:(t,e,r)=>{var n=r(858),a=r(884),o=r(379),i=r(521);t.exports=function(t,e){return n(t)||a(t,e)||o(t,e)||i()}},319:(t,e,r)=>{var n=r(646),a=r(860),o=r(379),i=r(206);t.exports=function(t){return n(t)||a(t)||o(t)||i()}},379:(t,e,r)=>{var n=r(228);t.exports=function(t,e){if(t){if("string"==typeof t)return n(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(t,e):void 0}}},757:(t,e,r)=>{t.exports=r(666)},391:(t,e,r)=>{"use strict";r.d(e,{Z:()=>h});var n=r(319),a=r.n(n),o=r(757),i=r.n(o),c=r(926),s=r.n(c),u=r(726),p=r(714),l=99,f=["sell","deposit","withdrawal","dividend","institutional_transfer","internal_transfer","refund","referral_bonus","affiliate","buy"];const h={all:(k=s()(i().mark((function t(){var e;return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,p.Z)(u.Z.ACCOUNT_IDS,{});case 2:return e=t.sent,t.abrupt("return",{tfsa:e.find((function(t){return t.startsWith("tfsa")})),rrsp:e.find((function(t){return t.startsWith("rrsp")})),crypto:e.find((function(t){return t.startsWith("non-registered-crypto")})),personal:e.find((function(t){return t.startsWith("non-registered")&&!t.startsWith("non-registered-crypto")}))});case 4:case"end":return t.stop()}}),t)}))),function(){return k.apply(this,arguments)}),data:(g=s()(i().mark((function t(){return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,p.Z)(u.Z.LIST_ACCOUNT,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return g.apply(this,arguments)}),me:(b=s()(i().mark((function t(){return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,p.Z)(u.Z.ME,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return b.apply(this,arguments)}),person:(x=s()(i().mark((function t(){return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,p.Z)(u.Z.PERSON,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return x.apply(this,arguments)}),history:(w=s()(i().mark((function t(e,r){return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,p.Z)(u.Z.HISTORY_ACCOUNT,{interval:e,accountId:r}));case 1:case"end":return t.stop()}}),t)}))),function(t,e){return w.apply(this,arguments)}),activities:(v=s()(i().mark((function t(){var e,r,n,o,c,s,h,d,y,m,v=arguments;return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(null!=(c=v.length>0&&void 0!==v[0]?v[0]:{})&&c.limit&&c.limit>l)){t.next=3;break}throw new Error("filters.limit can not exceed 99! Leave filters.limit undefined if you want to retrieve all.");case 3:if(null==c||!c.accounts||Array.isArray(c.accounts)){t.next=5;break}throw new Error("filters.accounts must be an array!");case 5:if(null==c||!c.type||Array.isArray(c.type)){t.next=7;break}throw new Error("filters.type must be an array!");case 7:return s=[],t.next=10,(0,p.Z)(u.Z.ACTIVITIES,{limit:null!==(e=null==c?void 0:c.limit)&&void 0!==e?e:l,accountIds:null!==(r=null==c||null===(n=c.accounts)||void 0===n?void 0:n.join())&&void 0!==r?r:"",bookmark:"",type:null!==(o=null==c?void 0:c.type)&&void 0!==o?o:f});case 10:if(h=t.sent,s.push.apply(s,a()(h.results)),null!=c&&c.limit){t.next=22;break}case 13:if(s.length%l!=0){t.next=22;break}return t.next=16,(0,p.Z)(u.Z.ACTIVITIES,{limit:l,accountIds:null!==(d=null==c||null===(y=c.accounts)||void 0===y?void 0:y.join())&&void 0!==d?d:"",bookmark:h.bookmark,type:null!==(m=null==c?void 0:c.type)&&void 0!==m?m:f});case 16:if(0!==(h=t.sent).results.length){t.next=19;break}return t.abrupt("break",22);case 19:s.push.apply(s,a()(h.results)),t.next=13;break;case 22:return t.abrupt("return",s);case 23:case"end":return t.stop()}}),t)}))),function(){return v.apply(this,arguments)}),getBankAccounts:(m=s()(i().mark((function t(){return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,p.Z)(u.Z.BANK_ACCOUNTS,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return m.apply(this,arguments)}),deposits:(y=s()(i().mark((function t(){return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,p.Z)(u.Z.DEPOSITS,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return y.apply(this,arguments)}),positions:(d=s()(i().mark((function t(e){return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,p.Z)(u.Z.POSITIONS,{accountId:e}));case 1:case"end":return t.stop()}}),t)}))),function(t){return d.apply(this,arguments)})};var d,y,m,v,w,x,b,g,k},726:(t,e,r)=>{"use strict";r.d(e,{Z:()=>x});var n,a,o,i,c,s,u,p,l,f,h,d=r(757),y=r.n(d),m=r(926),v=r.n(m),w={onFailure:(a=v()(y().mark((function t(e){return y().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=e.status,t.t1=e.statusText,t.next=4,e.json();case 4:return t.t2=t.sent,t.abrupt("return",{status:t.t0,reason:t.t1,body:t.t2});case 6:case"end":return t.stop()}}),t)}))),function(t){return a.apply(this,arguments)}),onSuccess:(n=v()(y().mark((function t(e){return y().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",e.json());case 1:case"end":return t.stop()}}),t)}))),function(t){return n.apply(this,arguments)})};const x={LOGIN:{method:"POST",url:"https://trade-service.wealthsimple.com/auth/login",authenticated:!1,onSuccess:(h=v()(y().mark((function t(e){return y().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0={access:e.headers.get("x-access-token"),refresh:e.headers.get("x-refresh-token"),expires:parseInt(e.headers.get("x-access-token-expires"),10)},t.next=3,e.json();case 3:return t.t1=t.sent,t.abrupt("return",{tokens:t.t0,accountInfo:t.t1});case 5:case"end":return t.stop()}}),t)}))),function(t){return h.apply(this,arguments)}),onFailure:w.onFailure},REFRESH:{method:"POST",url:"https://trade-service.wealthsimple.com/auth/refresh",authenticated:!1,onSuccess:(f=v()(y().mark((function t(e){return y().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",{tokens:{access:e.headers.get("x-access-token"),refresh:e.headers.get("x-refresh-token"),expires:parseInt(e.headers.get("x-access-token-expires"),10)}});case 1:case"end":return t.stop()}}),t)}))),function(t){return f.apply(this,arguments)}),onFailure:w.onFailure},ACCOUNT_IDS:{method:"GET",url:"https://trade-service.wealthsimple.com/account/list",authenticated:!0,onSuccess:(l=v()(y().mark((function t(e){var r;return y().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",r.results.map((function(t){return t.id})));case 4:case"end":return t.stop()}}),t)}))),function(t){return l.apply(this,arguments)}),onFailure:w.onFailure},LIST_ACCOUNT:{method:"GET",url:"https://trade-service.wealthsimple.com/account/list",authenticated:!0,onSuccess:(p=v()(y().mark((function t(e){var r;return y().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",r.results);case 4:case"end":return t.stop()}}),t)}))),function(t){return p.apply(this,arguments)}),onFailure:w.onFailure},ME:{method:"GET",url:"https://trade-service.wealthsimple.com/me",authenticated:!0,onSuccess:w.onSuccess,onFailure:w.onFailure},PERSON:{method:"GET",url:"https://trade-service.wealthsimple.com/person",authenticated:!0,onSuccess:w.onSuccess,onFailure:w.onFailure},HISTORY_ACCOUNT:{method:"GET",url:"https://trade-service.wealthsimple.com/account/history/{0}?account_id={1}",authenticated:!0,parameters:{0:"interval",1:"accountId"},onSuccess:w.onSuccess,onFailure:w.onFailure},ACTIVITIES:{method:"GET",url:"https://trade-service.wealthsimple.com/account/activities?limit={0}&account_ids={1}&[2]&bookmark={3}",authenticated:!0,parameters:{0:"limit",1:"accountIds",2:"type",3:"bookmark"},onSuccess:w.onSuccess,onFailure:w.onFailure},DEPOSITS:{method:"GET",url:"https://trade-service.wealthsimple.com/deposits",authenticated:!0,onSuccess:(u=v()(y().mark((function t(e){var r;return y().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",r.results);case 4:case"end":return t.stop()}}),t)}))),function(t){return u.apply(this,arguments)}),onFailure:w.onFailure},BANK_ACCOUNTS:{method:"GET",url:"https://trade-service.wealthsimple.com/bank-accounts",authenticated:!0,onSuccess:(s=v()(y().mark((function t(e){var r;return y().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",r.results);case 4:case"end":return t.stop()}}),t)}))),function(t){return s.apply(this,arguments)}),onFailure:w.onFailure},EXCHANGE_RATES:{method:"GET",url:"https://trade-service.wealthsimple.com/forex",authenticated:!0,onSuccess:w.onSuccess,onFailure:w.onFailure},SECURITY:{method:"GET",url:"https://trade-service.wealthsimple.com/securities?query={0}",authenticated:!0,parameters:{0:"ticker"},onSuccess:(c=v()(y().mark((function t(e){var r;return y().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:if(0!==(r=t.sent).results.length){t.next=5;break}throw new Error("Security does not exist");case 5:return t.abrupt("return",r.results);case 6:case"end":return t.stop()}}),t)}))),function(t){return c.apply(this,arguments)}),onFailure:w.onFailure},EXTENSIVE_SECURITY_DETAILS:{method:"GET",url:"https://trade-service.wealthsimple.com/securities/{0}",authenticated:!0,parameters:{0:"id"},onSuccess:w.onSuccess,onFailure:w.onFailure},QUOTES_HISTORY:{method:"GET",url:"https://trade-service.wealthsimple.com/securities/{0}/historical_quotes/{1}?mic=XNAS",authenticated:!0,parameters:{0:"id",1:"interval"},onSuccess:w.onSuccess,onFailure:w.onFailure},POSITIONS:{method:"GET",url:"https://trade-service.wealthsimple.com/account/positions?account_id={0}",authenticated:!0,parameters:{0:"accountId"},onSuccess:(i=v()(y().mark((function t(e){var r;return y().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",r.results);case 4:case"end":return t.stop()}}),t)}))),function(t){return i.apply(this,arguments)}),onFailure:w.onFailure},ORDERS_BY_PAGE:{method:"GET",url:"https://trade-service.wealthsimple.com/orders?offset={0}&account_id={1}",authenticated:!0,parameters:{0:"offset",1:"accountId"},onSuccess:(o=v()(y().mark((function t(e){var r;return y().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",{total:r.total,orders:r.results});case 4:case"end":return t.stop()}}),t)}))),function(t){return o.apply(this,arguments)}),onFailure:w.onFailure},CANCEL_ORDER:{method:"DELETE",url:"https://trade-service.wealthsimple.com/orders/{0}",authenticated:!0,parameters:{0:"orderId"},onSuccess:w.onSuccess,onFailure:w.onFailure},PLACE_ORDER:{method:"POST",url:"https://trade-service.wealthsimple.com/orders",authenticated:!0,onSuccess:w.onSuccess,onFailure:w.onFailure}}},464:(t,e,r)=>{"use strict";r.d(e,{Z:()=>l});var n=r(757),a=r.n(n),o=r(926),i=r.n(o),c=r(714),s=r(726),u=r(628),p={otp:null};const l={on:function(t,e){if(!(t in p))throw new Error("Unsupported authentication event '".concat(t,"'!"));p[t]=e},use:function(t){return u.Z.store(t)},tokens:function(){return{access:u.Z.access,refresh:u.Z.refresh,expires:u.Z.expires}},login:function(t,e){var r=this;return i()(a().mark((function n(){var o;return a().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(o=null,"function"!=typeof p.otp){n.next=4;break}return n.next=4,(0,c.Z)(s.Z.LOGIN,{email:t,password:e}).catch((function(){}));case 4:if(n.prev=4,n.t0=c.Z,n.t1=s.Z.LOGIN,n.t2=t,n.t3=e,"function"!=typeof p.otp){n.next=15;break}return n.next=12,p.otp();case 12:n.t4=n.sent,n.next=16;break;case 15:n.t4=p.otp;case 16:return n.t5=n.t4,n.t6={email:n.t2,password:n.t3,otp:n.t5},n.next=20,(0,n.t0)(n.t1,n.t6);case 20:o=n.sent,n.next=28;break;case 23:if(n.prev=23,n.t7=n.catch(4),p.otp){n.next=27;break}throw new Error("OTP not provided!");case 27:throw n.t7;case 28:r.use(o.tokens);case 29:case"end":return n.stop()}}),n,null,[[4,23]])})))()},refresh:(f=i()(a().mark((function t(){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,c.w)());case 1:case"end":return t.stop()}}),t)}))),function(){return f.apply(this,arguments)})};var f},500:(t,e,r)=>{"use strict";r.d(e,{e:()=>o,Z:()=>i});var n=["implicit_token_refresh","securities_cache"],a=["securities_cache"],o=function(t){return!a.includes(t)};function i(t){if(!function(t){return null!=t&&t.startsWith("no_")?n.includes(t.substring("no_".length)):n.includes(t)}(t))throw new Error("'".concat(t,"' is not supported!"));if(null!=t&&t.startsWith("no_")){var e=t.substring(t.indexOf("_")+1);o(e)&&a.push(e)}else o(t)||a.splice(a.indexOf(t),1)}},657:(t,e,r)=>{"use strict";r.d(e,{Z:()=>p});var n=r(38),a=r.n(n),o=r(575),i=r.n(o),c=r(913),s=r.n(c),u=["NASDAQ","NYSE","TSX","TSX-V","NEO","CC"];const p=function(){function t(e){var r;if(i()(this,t),this.symbol=null,this.exchange=null,this.id=null,this.crypto=!1,"string"==typeof e){if(""===e)throw new Error("Empty ticker");var n=e.split(":"),o=a()(n,2);this.symbol=o[0],this.exchange=o[1]}else{if(!e.symbol&&!e.id)throw new Error("Invalid ticker '".concat(e,"'"));this.symbol=e.symbol||null,this.exchange=e.exchange||null,this.id=e.id||null}if(this.exchange&&!u.includes(this.exchange))throw new Error("Invalid exchange '".concat(this.exchange,"'!"));("CC"===this.exchange||null!==(r=this.id)&&void 0!==r&&r.startsWith("sec-z"))&&(this.crypto=!0),"NEO"===this.exchange&&(this.exchange="AEQUITAS NEO EXCHANGE")}return s()(t,[{key:"format",value:function(){return this.id?this.id:"AEQUITAS NEO EXCHANGE"===this.exchange?"".concat(this.symbol,":NEO"):"".concat(this.symbol).concat(this.exchange?":".concat(this.exchange):"")}},{key:"weakEquals",value:function(t){return!(!this.id||this.id!==t.id)||!(!this.symbol||this.symbol!==t.symbol||this.crypto!==t.crypto)}}]),t}()},628:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});const n={access:null,refresh:null,expires:null,store:function(t){this.access=t.access,this.refresh=t.refresh,this.expires=t.expires},expired:function(){return this.expires&&parseInt(Date.now()/1e3,10)>=this.expires}}},752:(t,e,r)=>{"use strict";r.d(e,{Z:()=>x});var n=r(38),a=r.n(n),o=r(757),i=r.n(o),c=r(926),s=r.n(c),u=r(726),p=r(714),l=r(657),f=r(500),h=r(575),d=r.n(h),y=r(913),m=r.n(y),v=new(function(){function t(e){d()(this,t),this.cache=new Map,this.size=e}return m()(t,[{key:"insert",value:function(t,e){this.cache.size>=this.size&&this.cache.delete(this.cache.keys().next().value),this.cache.set(t,e)}},{key:"get",value:function(t){return this.cache.get(t)}}]),t}())(10);const w=function(t){var e=v.get(new l.Z(t).format());return void 0===e?null:e},x={exchangeRates:(g=s()(i().mark((function t(){return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,p.Z)(u.Z.EXCHANGE_RATES,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return g.apply(this,arguments)}),getSecurity:(b=s()(i().mark((function t(e,r){var n,o,c,s;return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=null,o=new l.Z(e),r||!(0,f.e)("securities_cache")){t.next=6;break}if(!(n=w(o))){t.next=6;break}return t.abrupt("return",n);case 6:if(!o.id){t.next=12;break}return t.next=9,(0,p.Z)(u.Z.EXTENSIVE_SECURITY_DETAILS,{id:o.id});case 9:n=t.sent,t.next=28;break;case 12:return t.next=14,(0,p.Z)(u.Z.SECURITY,{ticker:o.symbol});case 14:if(n=(n=t.sent).filter((function(t){return t.stock.symbol===o.symbol})),o.crypto?n=n.filter((function(t){return"cryptocurrency"===t.security_type})):o.exchange&&(n=n.filter((function(t){return t.stock.primary_exchange===o.exchange}))),!(n.length>1)){t.next=19;break}throw new Error("Multiple securities matched query.");case 19:if(0!==n.length){t.next=21;break}throw new Error("No securities matched query.");case 21:if(c=n,s=a()(c,1),n=s[0],!r){t.next=28;break}return t.next=27,(0,p.Z)(u.Z.EXTENSIVE_SECURITY_DETAILS,{id:n.id});case 27:n=t.sent;case 28:return(0,f.e)("securities_cache")&&null===w(o)&&(i=o,h=n,v.insert(new l.Z(i).format(),h)),t.abrupt("return",n);case 30:case"end":return t.stop()}var i,h}),t)}))),function(t,e){return b.apply(this,arguments)})};var b,g},568:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(319),a=r.n(n),o=new(r(545).Headers);const i={add:function(t,e){return o.append(t,e)},remove:function(t){return o.delete(t)},clear:function(){return a()(o).forEach((function(t){return o.delete(t[0])}))},values:function(){return a()(o)}}},352:(t,e,r)=>{r(949).install();var n=r(464).Z,a=r(568).Z,o=r(391).Z,i=r(826).Z,c=r(752).Z,s=r(889).Z,u=r(500).Z;t.exports={auth:n,headers:a,accounts:o,orders:i,quotes:s,data:c,config:u}},714:(t,e,r)=>{"use strict";r.d(e,{Z:()=>E,w:()=>S});var n=r(757),a=r.n(n),o=r(319),i=r.n(o),c=r(926),s=r.n(c),u=r(713),p=r.n(u),l=r(545),f=r.n(l),h=r(568),d=r(628),y=r(726),m=r(500);function v(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}var w=200,x=201;function b(t,e){var r=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?v(Object(r),!0).forEach((function(e){p()(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):v(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}({},e),n=t.url;if(t.parameters)for(var a=0;a<Object.keys(t.parameters).length;a++){var o=t.parameters[a];if(null===r[o]||void 0===r[o])throw new Error("URL parameter '".concat(o,"' missing!"));if(n.indexOf("{".concat(a,"}"))>=0)n=n.replace("{".concat(a,"}"),r[t.parameters[a]]);else{if(!(n.indexOf("[".concat(a,"]"))>=0))throw new Error("Malformed URL! This is an internal error: raise an issue!");!function(){var e=t.parameters[a],o=r[e].map((function(t){return"".concat(e,"=").concat(t)})).join("&");n=n.replace("[".concat(a,"]"),o)}()}delete r[t.parameters[a]]}return["GET","HEAD"].includes(t.method)?{url:n,payload:void 0}:{url:n,payload:JSON.stringify(r)}}function g(t,e){return k.apply(this,arguments)}function k(){return(k=s()(a().mark((function t(e,r){var n,o,c,s;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if((n=new l.Headers).append("Content-Type","application/json"),!e.authenticated){t.next=9;break}if(d.Z.access){t.next=5;break}throw new Error("Authentication required for '".concat(e.url,"'"));case 5:if(!(0,m.e)("implicit_token_refresh")){t.next=8;break}return t.next=8,Z();case 8:n.append("Authorization",d.Z.access);case 9:return h.Z.values().forEach((function(t){return n.append.apply(n,i()(t))})),o=b(e,r),c=o.url,s=o.payload,t.abrupt("return",f()(c,{body:s,method:e.method,headers:n}));case 12:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function E(t,e){return _.apply(this,arguments)}function _(){return(_=s()(a().mark((function t(e,r){var n;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,g(e,r);case 2:if(n=t.sent,![w,x].includes(n.status)){t.next=5;break}return t.abrupt("return",e.onSuccess(n));case 5:return t.t0=Promise,t.next=8,e.onFailure(n);case 8:return t.t1=t.sent,t.abrupt("return",t.t0.reject.call(t.t0,t.t1));case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function S(){return O.apply(this,arguments)}function O(){return(O=s()(a().mark((function t(){var e;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,E(y.Z.REFRESH,{refresh_token:d.Z.refresh});case 2:e=t.sent,d.Z.store(e.tokens);case 4:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function Z(){return T.apply(this,arguments)}function T(){return(T=s()(a().mark((function t(){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!d.Z.expired()){t.next=13;break}if(!d.Z.refresh){t.next=12;break}return t.prev=2,t.next=5,S();case 5:t.next=10;break;case 7:throw t.prev=7,t.t0=t.catch(2),new Error("Unable to refresh expired token: ".concat(t.t0));case 10:t.next=13;break;case 12:throw new Error("Access token expired");case 13:case"end":return t.stop()}}),t,null,[[2,7]])})))).apply(this,arguments)}},826:(t,e,r)=>{"use strict";r.d(e,{Z:()=>R});var n=r(713),a=r.n(n),o=r(319),i=r.n(o),c=r(757),s=r.n(c),u=r(926),p=r.n(u),l=r(726),f=r(714),h=r(657);function d(t,e){return y.apply(this,arguments)}function y(){return(y=p()(s().mark((function t(e,r){return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,f.Z)(l.Z.ORDERS_BY_PAGE,{offset:20*(r-1),accountId:e}));case 1:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function m(t){return v.apply(this,arguments)}function v(){return(v=p()(s().mark((function t(e){var r,n,a,o;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,d(e,1);case 2:if(r=t.sent,!((n=Math.ceil(r.total/20))>1)){t.next=12;break}for(a=[],o=2;o<=n;o++)a.push(d(e,o).then((function(t){return t.orders})));return t.next=9,Promise.all(a);case 9:t.sent.forEach((function(t){var e;return(e=r.orders).push.apply(e,i()(t))})),r.total=r.orders.length;case 12:return t.abrupt("return",r);case 13:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function w(t,e,r){return x.apply(this,arguments)}function x(){return(x=p()(s().mark((function t(e,r,n){var a,o;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,m(e);case 2:return a=t.sent,o=function(t){if(r){var e=new h.Z({symbol:t.symbol,id:t.security_id});if(!new h.Z(r).weakEquals(e))return!1}return t.status===n},a.orders=a.orders.filter(o),a.total=a.orders.length,t.abrupt("return",a);case 7:case"end":return t.stop()}}),t)})))).apply(this,arguments)}const b={page:d,all:m,pending:(E=p()(s().mark((function t(e,r){return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",w(e,r,"submitted"));case 1:case"end":return t.stop()}}),t)}))),function(t,e){return E.apply(this,arguments)}),filled:(k=p()(s().mark((function t(e,r){return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",w(e,r,"posted"));case 1:case"end":return t.stop()}}),t)}))),function(t,e){return k.apply(this,arguments)}),cancelled:(g=p()(s().mark((function t(e,r){return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",w(e,r,"cancelled"));case 1:case"end":return t.stop()}}),t)}))),function(t,e){return g.apply(this,arguments)})};var g,k,E,_=r(752),S=r(889),O=function(t){return["TSX","TSX-V"].includes(t)};const Z={cancel:(C=p()(s().mark((function t(e){return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=e,t.next=3,(0,f.Z)(l.Z.CANCEL_ORDER,{orderId:e});case 3:return t.t1=t.sent,t.abrupt("return",{order:t.t0,response:t.t1});case 5:case"end":return t.stop()}}),t)}))),function(t){return C.apply(this,arguments)}),cancelPending:function(t){var e=this;return p()(s().mark((function r(){var n;return s().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,b.pending(t);case 2:return n=r.sent,r.abrupt("return",Promise.all(n.orders.map(function(){var t=p()(s().mark((function t(r){return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",e.cancel(r.order_id));case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}())));case 4:case"end":return r.stop()}}),r)})))()},marketBuy:(L=p()(s().mark((function t(e,r,n){var a;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,_.Z.getSecurity(r);case 2:if(a=t.sent,t.t0=f.Z,t.t1=l.Z.PLACE_ORDER,t.t2=a.id,new h.Z(r).crypto){t.next=12;break}return t.next=9,S.Z.get(r);case 9:t.t3=t.sent,t.next=13;break;case 12:t.t3=void 0;case 13:return t.t4=t.t3,t.t5=n,t.t6=e,t.t7={security_id:t.t2,limit_price:t.t4,quantity:t.t5,order_type:"buy_quantity",order_sub_type:"market",time_in_force:"day",account_id:t.t6},t.abrupt("return",(0,t.t0)(t.t1,t.t7));case 18:case"end":return t.stop()}}),t)}))),function(t,e,r){return L.apply(this,arguments)}),limitBuy:(P=p()(s().mark((function t(e,r,n,a){return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=f.Z,t.t1=l.Z.PLACE_ORDER,t.next=4,_.Z.getSecurity(r);case 4:return t.t2=t.sent.id,t.t3=n,t.t4=a,t.t5=e,t.t6={security_id:t.t2,limit_price:t.t3,quantity:t.t4,order_type:"buy_quantity",order_sub_type:"limit",time_in_force:"day",account_id:t.t5},t.abrupt("return",(0,t.t0)(t.t1,t.t6));case 10:case"end":return t.stop()}}),t)}))),function(t,e,r,n){return P.apply(this,arguments)}),stopLimitBuy:(A=p()(s().mark((function t(e,r,n,a,o){var i;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,_.Z.getSecurity(r);case 2:if(i=t.sent,!O(i.stock.primary_exchange)||n===a){t.next=5;break}throw new Error("TSX/TSX-V securities must have an equivalent stop and limit price.");case 5:return t.abrupt("return",(0,f.Z)(l.Z.PLACE_ORDER,{security_id:i.id,stop_price:n,limit_price:a,quantity:o,order_type:"buy_quantity",order_sub_type:"stop_limit",time_in_force:"day",account_id:e}));case 6:case"end":return t.stop()}}),t)}))),function(t,e,r,n,a){return A.apply(this,arguments)}),marketSell:(j=p()(s().mark((function t(e,r,n){return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=f.Z,t.t1=l.Z.PLACE_ORDER,t.next=4,_.Z.getSecurity(r);case 4:if(t.t2=t.sent.id,new h.Z(r).crypto){t.next=11;break}return t.next=8,S.Z.get(r);case 8:t.t3=t.sent,t.next=12;break;case 11:t.t3=void 0;case 12:return t.t4=t.t3,t.t5=n,t.t6=e,t.t7={security_id:t.t2,market_value:t.t4,quantity:t.t5,order_type:"sell_quantity",order_sub_type:"market",time_in_force:"day",account_id:t.t6},t.abrupt("return",(0,t.t0)(t.t1,t.t7));case 17:case"end":return t.stop()}}),t)}))),function(t,e,r){return j.apply(this,arguments)}),limitSell:(I=p()(s().mark((function t(e,r,n,a){return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=f.Z,t.t1=l.Z.PLACE_ORDER,t.next=4,_.Z.getSecurity(r);case 4:return t.t2=t.sent.id,t.t3=n,t.t4=a,t.t5=e,t.t6={security_id:t.t2,limit_price:t.t3,quantity:t.t4,order_type:"sell_quantity",order_sub_type:"limit",time_in_force:"day",account_id:t.t5},t.abrupt("return",(0,t.t0)(t.t1,t.t6));case 10:case"end":return t.stop()}}),t)}))),function(t,e,r,n){return I.apply(this,arguments)}),stopLimitSell:(T=p()(s().mark((function t(e,r,n,a,o){var i;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,_.Z.getSecurity(r);case 2:if(i=t.sent,!O(i.stock.primary_exchange)||n===a){t.next=5;break}throw new Error("TSX/TSX-V securities must have an equivalent stop and limit price.");case 5:return t.abrupt("return",(0,f.Z)(l.Z.PLACE_ORDER,{security_id:i.id,stop_price:n,limit_price:a,quantity:o,order_type:"sell_quantity",order_sub_type:"stop_limit",time_in_force:"day",account_id:e}));case 6:case"end":return t.stop()}}),t)}))),function(t,e,r,n,a){return T.apply(this,arguments)})};var T,I,j,A,P,L,C;function F(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function N(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?F(Object(r),!0).forEach((function(e){a()(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):F(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}const R=N(N({},b),Z)},889:(t,e,r)=>{"use strict";r.d(e,{Z:()=>h});var n=r(757),a=r.n(n),o=r(926),i=r.n(o),c=r(752);const s={quote:(u=i()(a().mark((function t(e){var r;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,c.Z.getSecurity(e,!0);case 2:return r=t.sent,t.abrupt("return",r.quote.amount);case 4:case"end":return t.stop()}}),t)}))),function(t){return u.apply(this,arguments)})};var u,p=r(657),l=r(714),f=r(726);const h={defaultProvider:s,providers:{},use:function(t,e){if("function"!=typeof e.quote)throw new Error("Invalid quote provider for ".concat(t,"!"));this.providers[t]=e},get:function(t){var e=this;return i()(a().mark((function r(){var n,o,i;return a().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if(n=null,!(o=new p.Z(t)).exchange){r.next=6;break}n=o.exchange,r.next=15;break;case 6:if(!o.crypto||!o.id){r.next=10;break}n="CC",r.next=15;break;case 10:if(!(Object.keys(e.providers).length>0)){r.next=15;break}return r.next=13,c.Z.getSecurity(o,!1);case 13:i=r.sent,n=i.stock.primary_exchange;case 15:if(!(n in e.providers)){r.next=17;break}return r.abrupt("return",e.providers[n].quote(o));case 17:return r.abrupt("return",e.defaultProvider.quote(o));case 18:case"end":return r.stop()}}),r)})))()},history:function(t,e){return i()(a().mark((function r(){var n;return a().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if((n=new p.Z(t)).id){r.next=5;break}return r.next=4,c.Z.getSecurity(n);case 4:n.id=r.sent.id;case 5:return r.abrupt("return",(0,l.Z)(f.Z.QUOTES_HISTORY,{id:n.id,interval:e}));case 6:case"end":return r.stop()}}),r)})))()}}},666:t=>{var e=function(t){"use strict";var e,r=Object.prototype,n=r.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",i=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function s(t,e,r,n){var a=e&&e.prototype instanceof y?e:y,o=Object.create(a.prototype),i=new Z(n||[]);return o._invoke=function(t,e,r){var n=p;return function(a,o){if(n===f)throw new Error("Generator is already running");if(n===h){if("throw"===a)throw o;return I()}for(r.method=a,r.arg=o;;){var i=r.delegate;if(i){var c=_(i,r);if(c){if(c===d)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===p)throw n=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=f;var s=u(t,e,r);if("normal"===s.type){if(n=r.done?h:l,s.arg===d)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n=h,r.method="throw",r.arg=s.arg)}}}(t,r,i),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var p="suspendedStart",l="suspendedYield",f="executing",h="completed",d={};function y(){}function m(){}function v(){}var w={};w[o]=function(){return this};var x=Object.getPrototypeOf,b=x&&x(x(T([])));b&&b!==r&&n.call(b,o)&&(w=b);var g=v.prototype=y.prototype=Object.create(w);function k(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function E(t,e){function r(a,o,i,c){var s=u(t[a],t,o);if("throw"!==s.type){var p=s.arg,l=p.value;return l&&"object"==typeof l&&n.call(l,"__await")?e.resolve(l.__await).then((function(t){r("next",t,i,c)}),(function(t){r("throw",t,i,c)})):e.resolve(l).then((function(t){p.value=t,i(p)}),(function(t){return r("throw",t,i,c)}))}c(s.arg)}var a;this._invoke=function(t,n){function o(){return new e((function(e,a){r(t,n,e,a)}))}return a=a?a.then(o,o):o()}}function _(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,_(t,r),"throw"===r.method))return d;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var a=u(n,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,d;var o=a.arg;return o?o.done?(r[t.resultName]=o.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,d):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,d)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function Z(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(S,this),this.reset(!0)}function T(t){if(t){var r=t[o];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,i=function r(){for(;++a<t.length;)if(n.call(t,a))return r.value=t[a],r.done=!1,r;return r.value=e,r.done=!0,r};return i.next=i}}return{next:I}}function I(){return{value:e,done:!0}}return m.prototype=g.constructor=v,v.constructor=m,v[c]=m.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===m||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,v):(t.__proto__=v,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},k(E.prototype),E.prototype[i]=function(){return this},t.AsyncIterator=E,t.async=function(e,r,n,a,o){void 0===o&&(o=Promise);var i=new E(s(e,r,n,a),o);return t.isGeneratorFunction(r)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},k(g),g[c]="Generator",g[o]=function(){return this},g.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=T,Z.prototype={constructor:Z,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function a(n,a){return c.type="throw",c.arg=t,r.next=n,a&&(r.method="next",r.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],c=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var s=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(s&&u){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&n.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=t,i.arg=e,o?(this.method="next",this.next=o.finallyLoc,d):this.complete(i)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),O(r),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var a=n.arg;O(r)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:T(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),d}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}},545:t=>{"use strict";t.exports=e},949:e=>{"use strict";e.exports=t}},n={};function a(t){if(n[t])return n[t].exports;var e=n[t]={exports:{}};return r[t](e,e.exports,a),e.exports}return a.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return a.d(e,{a:e}),e},a.d=(t,e)=>{for(var r in e)a.o(e,r)&&!a.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},a.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),a(352)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,