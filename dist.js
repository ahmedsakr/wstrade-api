!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("source-map-support"),require("node-fetch"),require("http-status")):"function"==typeof define&&define.amd?define(["source-map-support","node-fetch","http-status"],e):"object"==typeof exports?exports["wstrade-api"]=e(require("source-map-support"),require("node-fetch"),require("http-status")):t["wstrade-api"]=e(t._,t._,t._)}(global,(function(t,e,r){return(()=>{var n={228:t=>{t.exports=function(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}},858:t=>{t.exports=function(t){if(Array.isArray(t))return t}},646:(t,e,r)=>{var n=r(228);t.exports=function(t){if(Array.isArray(t))return n(t)}},926:t=>{function e(t,e,r,n,o,a,s){try{var u=t[a](s),i=u.value}catch(t){return void r(t)}u.done?e(i):Promise.resolve(i).then(n,o)}t.exports=function(t){return function(){var r=this,n=arguments;return new Promise((function(o,a){var s=t.apply(r,n);function u(t){e(s,o,a,u,i,"next",t)}function i(t){e(s,o,a,u,i,"throw",t)}u(void 0)}))}}},575:t=>{t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},913:t=>{function e(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}t.exports=function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}},713:t=>{t.exports=function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}},860:t=>{t.exports=function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}},884:t=>{t.exports=function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var r=[],n=!0,o=!1,a=void 0;try{for(var s,u=t[Symbol.iterator]();!(n=(s=u.next()).done)&&(r.push(s.value),!e||r.length!==e);n=!0);}catch(t){o=!0,a=t}finally{try{n||null==u.return||u.return()}finally{if(o)throw a}}return r}}},521:t=>{t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},206:t=>{t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},38:(t,e,r)=>{var n=r(858),o=r(884),a=r(379),s=r(521);t.exports=function(t,e){return n(t)||o(t,e)||a(t,e)||s()}},319:(t,e,r)=>{var n=r(646),o=r(860),a=r(379),s=r(206);t.exports=function(t){return n(t)||o(t)||a(t)||s()}},379:(t,e,r)=>{var n=r(228);t.exports=function(t,e){if(t){if("string"==typeof t)return n(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(t,e):void 0}}},757:(t,e,r)=>{t.exports=r(666)},391:(t,e,r)=>{"use strict";r.d(e,{Z:()=>c});var n=r(757),o=r.n(n),a=r(926),s=r.n(a),u=r(726),i=r(811);const c={all:(w=s()(o().mark((function t(){var e;return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,i.Z)(u.Z.ACCOUNT_IDS,{});case 2:return e=t.sent,t.abrupt("return",{tfsa:e.find((function(t){return t.startsWith("tfsa")})),rrsp:e.find((function(t){return t.startsWith("rrsp")})),crypto:e.find((function(t){return t.startsWith("non-registered-crypto")})),personal:e.find((function(t){return t.startsWith("non-registered")&&!t.startsWith("non-registered-crypto")}))});case 4:case"end":return t.stop()}}),t)}))),function(){return w.apply(this,arguments)}),data:(v=s()(o().mark((function t(){return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,i.Z)(u.Z.LIST_ACCOUNT,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return v.apply(this,arguments)}),me:(m=s()(o().mark((function t(){return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,i.Z)(u.Z.ME,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return m.apply(this,arguments)}),person:(y=s()(o().mark((function t(){return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,i.Z)(u.Z.PERSON,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return y.apply(this,arguments)}),history:(d=s()(o().mark((function t(e,r){return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,i.Z)(u.Z.HISTORY_ACCOUNT,{interval:e,accountId:r}));case 1:case"end":return t.stop()}}),t)}))),function(t,e){return d.apply(this,arguments)}),activities:(h=s()(o().mark((function t(){return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,i.Z)(u.Z.ACTIVITIES,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return h.apply(this,arguments)}),getBankAccounts:(l=s()(o().mark((function t(){return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,i.Z)(u.Z.BANK_ACCOUNTS,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return l.apply(this,arguments)}),deposits:(f=s()(o().mark((function t(){return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,i.Z)(u.Z.DEPOSITS,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return f.apply(this,arguments)}),positions:(p=s()(o().mark((function t(e){return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,i.Z)(u.Z.POSITIONS,{accountId:e}));case 1:case"end":return t.stop()}}),t)}))),function(t){return p.apply(this,arguments)})};var p,f,l,h,d,y,m,v,w},726:(t,e,r)=>{"use strict";r.d(e,{p:()=>x,Z:()=>g});var n,o,a,s,u,i,c,p,f,l,h,d,y=r(757),m=r.n(y),v=r(926),w=r.n(v),x=20,b={onFailure:(o=w()(m().mark((function t(e){return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=e.status,t.t1=e.statusText,t.next=4,e.json();case 4:return t.t2=t.sent,t.abrupt("return",{status:t.t0,reason:t.t1,body:t.t2});case 6:case"end":return t.stop()}}),t)}))),function(t){return o.apply(this,arguments)}),onSuccess:(n=w()(m().mark((function t(e){return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",e.json());case 1:case"end":return t.stop()}}),t)}))),function(t){return n.apply(this,arguments)})};const g={LOGIN:{method:"POST",url:"https://trade-service.wealthsimple.com/auth/login",onSuccess:(d=w()(m().mark((function t(e){return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0={access:e.headers.get("x-access-token"),refresh:e.headers.get("x-refresh-token"),expires:parseInt(e.headers.get("x-access-token-expires"),10)},t.next=3,e.json();case 3:return t.t1=t.sent,t.abrupt("return",{tokens:t.t0,accountInfo:t.t1});case 5:case"end":return t.stop()}}),t)}))),function(t){return d.apply(this,arguments)}),onFailure:b.onFailure},REFRESH:{method:"POST",url:"https://trade-service.wealthsimple.com/auth/refresh",onSuccess:(h=w()(m().mark((function t(e){return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",{tokens:{access:e.headers.get("x-access-token"),refresh:e.headers.get("x-refresh-token"),expires:parseInt(e.headers.get("x-access-token-expires"),10)}});case 1:case"end":return t.stop()}}),t)}))),function(t){return h.apply(this,arguments)}),onFailure:b.onFailure},ACCOUNT_IDS:{method:"GET",url:"https://trade-service.wealthsimple.com/account/list",onSuccess:(l=w()(m().mark((function t(e){var r;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",r.results.map((function(t){return t.id})));case 4:case"end":return t.stop()}}),t)}))),function(t){return l.apply(this,arguments)}),onFailure:b.onFailure},LIST_ACCOUNT:{method:"GET",url:"https://trade-service.wealthsimple.com/account/list",onSuccess:(f=w()(m().mark((function t(e){var r;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",r.results);case 4:case"end":return t.stop()}}),t)}))),function(t){return f.apply(this,arguments)}),onFailure:b.onFailure},ME:{method:"GET",url:"https://trade-service.wealthsimple.com/me",onSuccess:b.onSuccess,onFailure:b.onFailure},PERSON:{method:"GET",url:"https://trade-service.wealthsimple.com/person",onSuccess:b.onSuccess,onFailure:b.onFailure},HISTORY_ACCOUNT:{method:"GET",url:"https://trade-service.wealthsimple.com/account/history/{0}?account_id={1}",parameters:{0:"interval",1:"accountId"},onSuccess:b.onSuccess,onFailure:b.onFailure},ACTIVITIES:{method:"GET",url:"https://trade-service.wealthsimple.com/account/activities",onSuccess:(p=w()(m().mark((function t(e){var r;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",r.results);case 4:case"end":return t.stop()}}),t)}))),function(t){return p.apply(this,arguments)}),onFailure:b.onFailure},DEPOSITS:{method:"GET",url:"https://trade-service.wealthsimple.com/deposits",onSuccess:(c=w()(m().mark((function t(e){var r;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",r.results);case 4:case"end":return t.stop()}}),t)}))),function(t){return c.apply(this,arguments)}),onFailure:b.onFailure},BANK_ACCOUNTS:{method:"GET",url:"https://trade-service.wealthsimple.com/bank-accounts",onSuccess:(i=w()(m().mark((function t(e){var r;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",r.results);case 4:case"end":return t.stop()}}),t)}))),function(t){return i.apply(this,arguments)}),onFailure:b.onFailure},EXCHANGE_RATES:{method:"GET",url:"https://trade-service.wealthsimple.com/forex",onSuccess:b.onSuccess,onFailure:b.onFailure},SECURITY:{method:"GET",url:"https://trade-service.wealthsimple.com/securities?query={0}",parameters:{0:"ticker"},onSuccess:(u=w()(m().mark((function t(e){var r;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:if(0!==(r=t.sent).results.length){t.next=5;break}throw new Error("Security does not exist");case 5:return t.abrupt("return",r.results);case 6:case"end":return t.stop()}}),t)}))),function(t){return u.apply(this,arguments)}),onFailure:b.onFailure},EXTENSIVE_SECURITY_DETAILS:{method:"GET",url:"https://trade-service.wealthsimple.com/securities/{0}",parameters:{0:"id"},onSuccess:b.onSuccess,onFailure:b.onFailure},POSITIONS:{method:"GET",url:"https://trade-service.wealthsimple.com/account/positions?account_id={0}",parameters:{0:"accountId"},onSuccess:(s=w()(m().mark((function t(e){var r;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",r.results);case 4:case"end":return t.stop()}}),t)}))),function(t){return s.apply(this,arguments)}),onFailure:b.onFailure},ORDERS_BY_PAGE:{method:"GET",url:"https://trade-service.wealthsimple.com/orders?offset={0}&account_id={1}",parameters:{0:"offset",1:"accountId"},onSuccess:(a=w()(m().mark((function t(e){var r;return m().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",{total:r.total,orders:r.results});case 4:case"end":return t.stop()}}),t)}))),function(t){return a.apply(this,arguments)}),onFailure:b.onFailure},CANCEL_ORDER:{method:"DELETE",url:"https://trade-service.wealthsimple.com/orders/{0}",parameters:{0:"orderId"},onSuccess:b.onSuccess,onFailure:b.onFailure},PLACE_ORDER:{method:"POST",url:"https://trade-service.wealthsimple.com/orders",onSuccess:b.onSuccess,onFailure:b.onFailure}}},464:(t,e,r)=>{"use strict";r.d(e,{Z:()=>c});var n=r(757),o=r.n(n),a=r(926),s=r.n(a),u=r(811),i=r(726);const c={tokens:null,otp:null,on:function(t,e){this[t]=e},login:function(t,e){var r=this;return s()(o().mark((function n(){var a;return o().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(a=null,"function"!=typeof r.otp){n.next=4;break}return n.next=4,(0,u.Z)(i.Z.LOGIN,{email:t,password:e}).catch((function(){}));case 4:if(n.prev=4,n.t0=u.Z,n.t1=i.Z.LOGIN,n.t2=t,n.t3=e,"function"!=typeof r.otp){n.next=15;break}return n.next=12,r.otp();case 12:n.t4=n.sent,n.next=16;break;case 15:n.t4=r.otp;case 16:return n.t5=n.t4,n.t6={email:n.t2,password:n.t3,otp:n.t5},n.next=20,(0,n.t0)(n.t1,n.t6);case 20:a=n.sent,n.next=28;break;case 23:if(n.prev=23,n.t7=n.catch(4),r.otp){n.next=27;break}return n.abrupt("return",Promise.reject("OTP not provided!"));case 27:throw n.t7;case 28:r.tokens=a.tokens;case 29:case"end":return n.stop()}}),n,null,[[4,23]])})))()},refresh:function(){var t=this;return s()(o().mark((function e(){var r;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.tokens.access=null,e.next=3,(0,u.Z)(i.Z.REFRESH,{refresh_token:t.tokens.refresh});case 3:r=e.sent,t.tokens=r.tokens;case 5:case"end":return e.stop()}}),e)})))()}}},500:(t,e,r)=>{"use strict";r.d(e,{e:()=>o,Z:()=>a});var n=["securities_cache"],o=function(t){return!n.includes(t)};function a(t){if(null!=t&&t.startsWith("no_")){var e=t.substring(t.indexOf("_")+1);o(e)&&n.push(e)}else o(t)||n.splice(n.indexOf(t),1)}},657:(t,e,r)=>{"use strict";r.d(e,{Z:()=>p});var n=r(38),o=r.n(n),a=r(575),s=r.n(a),u=r(913),i=r.n(u),c=["NASDAQ","NYSE","TSX","TSX-V","NEO"];const p=function(){function t(e){if(s()(this,t),this.symbol=null,this.exchange=null,this.id=null,"string"==typeof e){if(""===e)throw new Error("Empty ticker");var r=e.split(":"),n=o()(r,2);this.symbol=n[0],this.exchange=n[1]}else{if(!e.symbol&&!e.id)throw new Error("Invalid ticker '".concat(e,"'"));this.symbol=e.symbol,this.exchange=e.exchange,this.id=e.id}if(this.exchange&&!c.includes(this.exchange))throw new Error("Invalid exchange '".concat(this.exchange,"'!"));"NEO"===this.exchange&&(this.exchange="AEQUITAS NEO EXCHANGE")}return i()(t,[{key:"format",value:function(){return this.id?this.id:"AEQUITAS NEO EXCHANGE"===this.exchange?"".concat(this.symbol,":NEO"):"".concat(this.symbol).concat(this.exchange?":".concat(this.exchange):"")}},{key:"weakEquals",value:function(t){return!(!this.id||this.id!==t.id)||!(!this.symbol||this.symbol!==t.symbol)}}]),t}()},752:(t,e,r)=>{"use strict";r.d(e,{Z:()=>v});var n=r(757),o=r.n(n),a=r(926),s=r.n(a),u=r(726),i=r(811),c=r(657),p=r(500),f=r(575),l=r.n(f),h=r(913),d=r.n(h),y=new(function(){function t(e){l()(this,t),this.cache=new Map,this.size=e}return d()(t,[{key:"insert",value:function(t,e){this.cache.size>=this.size&&this.cache.delete(this.cache.keys().next().value),this.cache.set(t,e)}},{key:"get",value:function(t){return this.cache.get(t)}}]),t}())(10);const m=function(t){var e=y.get(new c.Z(t).format());return void 0===e?null:e},v={exchangeRates:(x=s()(o().mark((function t(){return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,i.Z)(u.Z.EXCHANGE_RATES,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return x.apply(this,arguments)}),getSecurity:(w=s()(o().mark((function t(e,r){var n;return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=null,e=new c.Z(e),r||!(0,p.e)("securities_cache")){t.next=6;break}if(!(n=m(e))){t.next=6;break}return t.abrupt("return",n);case 6:if(!e.id){t.next=12;break}return t.next=9,(0,i.Z)(u.Z.EXTENSIVE_SECURITY_DETAILS,{id:e.id});case 9:n=t.sent,t.next=26;break;case 12:return t.next=14,(0,i.Z)(u.Z.SECURITY,{ticker:e.symbol});case 14:if(n=(n=t.sent).filter((function(t){return t.stock.symbol===e.symbol})),e.exchange&&(n=n.filter((function(t){return t.stock.primary_exchange===e.exchange}))),!(n.length>1)){t.next=19;break}return t.abrupt("return",Promise.reject({reason:"Multiple securities matched query."}));case 19:if(0!==n.length){t.next=21;break}return t.abrupt("return",Promise.reject({reason:"No securities matched query."}));case 21:if(n=n[0],!r){t.next=26;break}return t.next=25,(0,i.Z)(u.Z.EXTENSIVE_SECURITY_DETAILS,{id:n.id});case 25:n=t.sent;case 26:return(0,p.e)("securities_cache")&&null===m(e)&&(o=e,a=n,y.insert(new c.Z(o).format(),a)),t.abrupt("return",n);case 28:case"end":return t.stop()}var o,a}),t)}))),function(t,e){return w.apply(this,arguments)})};var w,x},568:(t,e,r)=>{"use strict";r.d(e,{Z:()=>s});var n=r(319),o=r.n(n),a=new(r(545).Headers);const s={add:function(t,e){return a.append(t,e)},remove:function(t){return a.delete(t)},clear:function(){return o()(a).forEach((function(t){return a.delete(t[0])}))},values:function(){return o()(a)}}},352:(t,e,r)=>{r(949).install();var n=r(464).Z,o=r(568).Z,a=r(391).Z,s=r(826).Z,u=r(752).Z,i=r(889).Z,c=r(500).Z;t.exports={auth:n,headers:o,accounts:a,orders:s,quotes:i,data:u,config:c}},811:(t,e,r)=>{"use strict";r.d(e,{Z:()=>S});var n=r(757),o=r.n(n),a=r(319),s=r.n(a),u=r(926),i=r.n(u),c=r(713),p=r.n(c),f=r(545),l=r.n(f),h=r(457),d=r.n(h),y=r(568),m=r(464),v=r(500),w=function(){return parseInt(Date.now()/1e3,10)};function x(){return b.apply(this,arguments)}function b(){return(b=i()(o().mark((function t(){var e,r;return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(w()>=(null===(e=m.Z.tokens)||void 0===e?void 0:e.expires))){t.next=13;break}if(null===(r=m.Z.tokens)||void 0===r||!r.refresh){t.next=12;break}return t.prev=2,t.next=5,m.Z.refresh();case 5:t.next=10;break;case 7:return t.prev=7,t.t0=t.catch(2),t.abrupt("return",Promise.reject("Unable to refresh expired token: ".concat(t.t0)));case 10:t.next=13;break;case 12:return t.abrupt("return",Promise.reject("Access token expired"));case 13:case"end":return t.stop()}}),t,null,[[2,7]])})))).apply(this,arguments)}function g(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function k(t,e){e=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?g(Object(r),!0).forEach((function(e){p()(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):g(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}({},e);var r=t.url;if(t.parameters)for(var n=0;n<Object.keys(t.parameters).length;n++){if(null===e[t.parameters[n]]||void 0===e[t.parameters[n]])throw new Error("URL Path parameter missing");r=r.replace("{".concat(n,"}"),e[t.parameters[n]]),delete e[t.parameters[n]]}return["GET","HEAD"].includes(t.method)?{url:r,payload:void 0}:{url:r,payload:JSON.stringify(e)}}function E(t,e){return _.apply(this,arguments)}function _(){return(_=i()(o().mark((function t(e,r){var n,a,u,i,c;return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if((a=new f.Headers).append("Content-Type","application/json"),null===(n=m.Z.tokens)||void 0===n||!n.access){t.next=7;break}if(!(0,v.e)("implicit_token_refresh")){t.next=6;break}return t.next=6,x();case 6:a.append("Authorization",m.Z.tokens.access);case 7:return y.Z.values().forEach((function(t){return a.append.apply(a,s()(t))})),u=k(e,r),i=u.url,c=u.payload,t.abrupt("return",l()(i,{body:c,method:e.method,headers:a}));case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function S(t,e){return O.apply(this,arguments)}function O(){return(O=i()(o().mark((function t(e,r){var n;return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,E(e,r);case 3:if(n=t.sent,![d().OK,d().CREATED].includes(n.status)){t.next=6;break}return t.abrupt("return",e.onSuccess(n));case 6:return t.t0=Promise,t.next=9,e.onFailure(n);case 9:return t.t1=t.sent,t.abrupt("return",t.t0.reject.call(t.t0,t.t1));case 13:throw t.prev=13,t.t2=t.catch(0),t.t2;case 16:case"end":return t.stop()}}),t,null,[[0,13]])})))).apply(this,arguments)}},826:(t,e,r)=>{"use strict";r.d(e,{Z:()=>R});var n=r(713),o=r.n(n),a=r(319),s=r.n(a),u=r(757),i=r.n(u),c=r(926),p=r.n(c),f=r(726),l=r(811),h=r(657);function d(t,e){return y.apply(this,arguments)}function y(){return(y=p()(i().mark((function t(e,r){return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,l.Z)(f.Z.ORDERS_BY_PAGE,{offset:(r-1)*f.p,accountId:e}));case 1:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function m(t){return v.apply(this,arguments)}function v(){return(v=p()(i().mark((function t(e){var r,n,o,a;return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,d(e,1);case 2:if(r=t.sent,!((n=Math.ceil(r.total/f.p))>1)){t.next=12;break}for(o=[],a=2;a<=n;a++)o.push(d(e,a).then((function(t){return t.orders})));return t.next=9,Promise.all(o);case 9:t.sent.forEach((function(t){var e;return(e=r.orders).push.apply(e,s()(t))})),r.total=r.orders.length;case 12:return t.abrupt("return",r);case 13:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function w(t,e,r){return x.apply(this,arguments)}function x(){return(x=p()(i().mark((function t(e,r,n){var o,a;return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,m(e);case 2:return o=t.sent,a=function(t){if(r){var e=new h.Z({symbol:t.symbol,id:t.security_id});if(!new h.Z(r).weakEquals(e))return!1}return t.status===n},o.orders=o.orders.filter(a),o.total=o.orders.length,t.abrupt("return",o);case 7:case"end":return t.stop()}}),t)})))).apply(this,arguments)}const b={page:d,all:m,pending:(E=p()(i().mark((function t(e,r){return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",w(e,r,"submitted"));case 1:case"end":return t.stop()}}),t)}))),function(t,e){return E.apply(this,arguments)}),filled:(k=p()(i().mark((function t(e,r){return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",w(e,r,"posted"));case 1:case"end":return t.stop()}}),t)}))),function(t,e){return k.apply(this,arguments)}),cancelled:(g=p()(i().mark((function t(e,r){return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",w(e,r,"cancelled"));case 1:case"end":return t.stop()}}),t)}))),function(t,e){return g.apply(this,arguments)})};var g,k,E,_=r(752),S=r(889),O=function(t){return["TSX","TSX-V"].includes(t)};const Z={cancel:(F=p()(i().mark((function t(e){return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=e,t.next=3,(0,l.Z)(f.Z.CANCEL_ORDER,{orderId:e});case 3:return t.t1=t.sent,t.abrupt("return",{order:t.t0,response:t.t1});case 5:case"end":return t.stop()}}),t)}))),function(t){return F.apply(this,arguments)}),cancelPending:function(t){var e=this;return p()(i().mark((function r(){var n;return i().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,b.pending(t);case 2:return n=r.sent,r.abrupt("return",Promise.all(n.orders.map(function(){var t=p()(i().mark((function t(r){return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",e.cancel(r.order_id));case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}())));case 4:case"end":return r.stop()}}),r)})))()},marketBuy:(L=p()(i().mark((function t(e,r,n){var o;return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,_.Z.getSecurity(r);case 2:return o=t.sent,t.t0=l.Z,t.t1=f.Z.PLACE_ORDER,t.t2=o.id,t.next=8,S.Z.get(r);case 8:return t.t3=t.sent,t.t4=n,t.t5=e,t.t6={security_id:t.t2,limit_price:t.t3,quantity:t.t4,order_type:"buy_quantity",order_sub_type:"market",time_in_force:"day",account_id:t.t5},t.abrupt("return",(0,t.t0)(t.t1,t.t6));case 13:case"end":return t.stop()}}),t)}))),function(t,e,r){return L.apply(this,arguments)}),limitBuy:(A=p()(i().mark((function t(e,r,n,o){return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=l.Z,t.t1=f.Z.PLACE_ORDER,t.next=4,_.Z.getSecurity(r);case 4:return t.t2=t.sent.id,t.t3=n,t.t4=o,t.t5=e,t.t6={security_id:t.t2,limit_price:t.t3,quantity:t.t4,order_type:"buy_quantity",order_sub_type:"limit",time_in_force:"day",account_id:t.t5},t.abrupt("return",(0,t.t0)(t.t1,t.t6));case 10:case"end":return t.stop()}}),t)}))),function(t,e,r,n){return A.apply(this,arguments)}),stopLimitBuy:(I=p()(i().mark((function t(e,r,n,o,a){var s;return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,_.Z.getSecurity(r);case 2:if(s=t.sent,!O(s.stock.primary_exchange)||n===o){t.next=5;break}return t.abrupt("return",Promise.reject({reason:"TSX/TSX-V securities must have an equivalent stop and limit price."}));case 5:return t.abrupt("return",(0,l.Z)(f.Z.PLACE_ORDER,{security_id:s.id,stop_price:n,limit_price:o,quantity:a,order_type:"buy_quantity",order_sub_type:"stop_limit",time_in_force:"day",account_id:e}));case 6:case"end":return t.stop()}}),t)}))),function(t,e,r,n,o){return I.apply(this,arguments)}),marketSell:(P=p()(i().mark((function t(e,r,n){var o;return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,_.Z.getSecurity(r);case 2:return o=t.sent,t.t0=l.Z,t.t1=f.Z.PLACE_ORDER,t.t2=o.id,t.next=8,S.Z.get(r);case 8:return t.t3=t.sent,t.t4=n,t.t5=e,t.t6={security_id:t.t2,market_value:t.t3,quantity:t.t4,order_type:"sell_quantity",order_sub_type:"market",time_in_force:"day",account_id:t.t5},t.abrupt("return",(0,t.t0)(t.t1,t.t6));case 13:case"end":return t.stop()}}),t)}))),function(t,e,r){return P.apply(this,arguments)}),limitSell:(j=p()(i().mark((function t(e,r,n,o){return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=l.Z,t.t1=f.Z.PLACE_ORDER,t.next=4,_.Z.getSecurity(r);case 4:return t.t2=t.sent.id,t.t3=n,t.t4=o,t.t5=e,t.t6={security_id:t.t2,limit_price:t.t3,quantity:t.t4,order_type:"sell_quantity",order_sub_type:"limit",time_in_force:"day",account_id:t.t5},t.abrupt("return",(0,t.t0)(t.t1,t.t6));case 10:case"end":return t.stop()}}),t)}))),function(t,e,r,n){return j.apply(this,arguments)}),stopLimitSell:(T=p()(i().mark((function t(e,r,n,o,a){var s;return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,_.Z.getSecurity(r);case 2:if(s=t.sent,!O(s.stock.primary_exchange)||n===o){t.next=5;break}return t.abrupt("return",Promise.reject({reason:"TSX/TSX-V securities must have an equivalent stop and limit price."}));case 5:return t.abrupt("return",(0,l.Z)(f.Z.PLACE_ORDER,{security_id:s.id,stop_price:n,limit_price:o,quantity:a,order_type:"sell_quantity",order_sub_type:"stop_limit",time_in_force:"day",account_id:e}));case 6:case"end":return t.stop()}}),t)}))),function(t,e,r,n,o){return T.apply(this,arguments)})};var T,j,P,I,A,L,F;function N(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function C(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?N(Object(r),!0).forEach((function(e){o()(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):N(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}const R=C(C({},b),Z)},889:(t,e,r)=>{"use strict";r.d(e,{Z:()=>c});var n,o=r(757),a=r.n(o),s=r(926),u=r.n(s),i=r(752);const c={defaultProvider:{quote:(n=u()(a().mark((function t(e){var r;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,i.Z.getSecurity(e,!0);case 2:return r=t.sent,t.abrupt("return",r.quote.amount);case 4:case"end":return t.stop()}}),t)}))),function(t){return n.apply(this,arguments)})},providers:{},use:function(t,e){if("function"!=typeof e.quote)throw new Error("Invalid quote provider for ".concat(t,"!"));this.providers[t]=e},get:function(t){var e=this;return u()(a().mark((function r(){var n,o;return a().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if(n=null,!t.exchange){r.next=5;break}n=t.exchange,r.next=10;break;case 5:if(!(Object.keys(e.providers).length>0)){r.next=10;break}return r.next=8,i.Z.getSecurity(t,!1);case 8:o=r.sent,n=o.stock.primary_exchange;case 10:if(!e.providers[n]){r.next=12;break}return r.abrupt("return",e.providers[n].quote(t));case 12:return r.abrupt("return",e.defaultProvider.quote(t));case 13:case"end":return r.stop()}}),r)})))()}}},666:t=>{var e=function(t){"use strict";var e,r=Object.prototype,n=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag";function i(t,e,r,n){var o=e&&e.prototype instanceof y?e:y,a=Object.create(o.prototype),s=new Z(n||[]);return a._invoke=function(t,e,r){var n=p;return function(o,a){if(n===l)throw new Error("Generator is already running");if(n===h){if("throw"===o)throw a;return j()}for(r.method=o,r.arg=a;;){var s=r.delegate;if(s){var u=_(s,r);if(u){if(u===d)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===p)throw n=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=l;var i=c(t,e,r);if("normal"===i.type){if(n=r.done?h:f,i.arg===d)continue;return{value:i.arg,done:r.done}}"throw"===i.type&&(n=h,r.method="throw",r.arg=i.arg)}}}(t,r,s),a}function c(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=i;var p="suspendedStart",f="suspendedYield",l="executing",h="completed",d={};function y(){}function m(){}function v(){}var w={};w[a]=function(){return this};var x=Object.getPrototypeOf,b=x&&x(x(T([])));b&&b!==r&&n.call(b,a)&&(w=b);var g=v.prototype=y.prototype=Object.create(w);function k(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function E(t,e){function r(o,a,s,u){var i=c(t[o],t,a);if("throw"!==i.type){var p=i.arg,f=p.value;return f&&"object"==typeof f&&n.call(f,"__await")?e.resolve(f.__await).then((function(t){r("next",t,s,u)}),(function(t){r("throw",t,s,u)})):e.resolve(f).then((function(t){p.value=t,s(p)}),(function(t){return r("throw",t,s,u)}))}u(i.arg)}var o;this._invoke=function(t,n){function a(){return new e((function(e,o){r(t,n,e,o)}))}return o=o?o.then(a,a):a()}}function _(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,_(t,r),"throw"===r.method))return d;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var o=c(n,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,d;var a=o.arg;return a?a.done?(r[t.resultName]=a.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,d):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,d)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function Z(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(S,this),this.reset(!0)}function T(t){if(t){var r=t[a];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,s=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return s.next=s}}return{next:j}}function j(){return{value:e,done:!0}}return m.prototype=g.constructor=v,v.constructor=m,v[u]=m.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===m||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,v):(t.__proto__=v,u in t||(t[u]="GeneratorFunction")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},k(E.prototype),E.prototype[s]=function(){return this},t.AsyncIterator=E,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var s=new E(i(e,r,n,o),a);return t.isGeneratorFunction(r)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},k(g),g[u]="Generator",g[a]=function(){return this},g.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=T,Z.prototype={constructor:Z,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return u.type="throw",u.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var s=this.tryEntries[a],u=s.completion;if("root"===s.tryLoc)return o("end");if(s.tryLoc<=this.prev){var i=n.call(s,"catchLoc"),c=n.call(s,"finallyLoc");if(i&&c){if(this.prev<s.catchLoc)return o(s.catchLoc,!0);if(this.prev<s.finallyLoc)return o(s.finallyLoc)}else if(i){if(this.prev<s.catchLoc)return o(s.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return o(s.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var s=a?a.completion:{};return s.type=t,s.arg=e,a?(this.method="next",this.next=a.finallyLoc,d):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),O(r),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;O(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:T(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),d}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}},457:t=>{"use strict";t.exports=r},545:t=>{"use strict";t.exports=e},949:e=>{"use strict";e.exports=t}},o={};function a(t){if(o[t])return o[t].exports;var e=o[t]={exports:{}};return n[t](e,e.exports,a),e.exports}return a.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return a.d(e,{a:e}),e},a.d=(t,e)=>{for(var r in e)a.o(e,r)&&!a.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},a.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),a(352)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93c3RyYWRlLWFwaS93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheUxpa2VUb0FycmF5LmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhvdXRIb2xlcy5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlUmVzdC5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9zcmMvYWNjb3VudHMuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9zcmMvYXBpL2VuZHBvaW50cy5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL3NyYy9hdXRoLmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vc3JjL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL3NyYy9jb3JlL3RpY2tlci5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL3NyYy9vcHRpb25hbC9zZWN1cml0aWVzLWNhY2hlLmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vc3JjL2NvcmUvY2FjaGUuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9zcmMvZGF0YS5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL3NyYy9oZWFkZXJzLmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vc3JjL2hlbHBlcnMvdGltZS5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL3NyYy9vcHRpb25hbC9pbXBsaWNpdC10b2tlbi1yZWZyZXNoLmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vc3JjL25ldHdvcmsvaHR0cHMuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9zcmMvb3JkZXJzL2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9zcmMvb3JkZXJzL3N1Ym1pdC5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL3NyYy9vcmRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9zcmMvcXVvdGVzL2RlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9zcmMvcXVvdGVzL2luZGV4LmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS9leHRlcm5hbCB7XCJjb21tb25qc1wiOlwiaHR0cC1zdGF0dXNcIixcImNvbW1vbmpzMlwiOlwiaHR0cC1zdGF0dXNcIixcImFtZFwiOlwiaHR0cC1zdGF0dXNcIixcInJvb3RcIjpcIl9cIn0iLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvZXh0ZXJuYWwge1wiY29tbW9uanNcIjpcIm5vZGUtZmV0Y2hcIixcImNvbW1vbmpzMlwiOlwibm9kZS1mZXRjaFwiLFwiYW1kXCI6XCJub2RlLWZldGNoXCIsXCJyb290XCI6XCJfXCJ9Iiwid2VicGFjazovL3dzdHJhZGUtYXBpL2V4dGVybmFsIHtcImNvbW1vbmpzXCI6XCJzb3VyY2UtbWFwLXN1cHBvcnRcIixcImNvbW1vbmpzMlwiOlwic291cmNlLW1hcC1zdXBwb3J0XCIsXCJhbWRcIjpcInNvdXJjZS1tYXAtc3VwcG9ydFwiLFwicm9vdFwiOlwiX1wifSIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS93ZWJwYWNrL3N0YXJ0dXAiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3dzdHJhZGUtYXBpL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsImdsb2JhbCIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzk0OV9fIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNTQ1X18iLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX180NTdfXyIsImFyciIsImxlbiIsImxlbmd0aCIsImkiLCJhcnIyIiwiQXJyYXkiLCJpc0FycmF5IiwiYXJyYXlMaWtlVG9BcnJheSIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsInJlc29sdmUiLCJyZWplY3QiLCJfbmV4dCIsIl90aHJvdyIsImtleSIsImFyZyIsImluZm8iLCJ2YWx1ZSIsImVycm9yIiwiZG9uZSIsIlByb21pc2UiLCJ0aGVuIiwiZm4iLCJzZWxmIiwidGhpcyIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsImVyciIsInVuZGVmaW5lZCIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJvdG90eXBlIiwib2JqIiwiaXRlciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiZnJvbSIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJfcyIsIl9pIiwibmV4dCIsInB1c2giLCJhcnJheVdpdGhIb2xlcyIsIml0ZXJhYmxlVG9BcnJheUxpbWl0IiwidW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJub25JdGVyYWJsZVJlc3QiLCJhcnJheVdpdGhvdXRIb2xlcyIsIml0ZXJhYmxlVG9BcnJheSIsIm5vbkl0ZXJhYmxlU3ByZWFkIiwibyIsIm1pbkxlbiIsIm4iLCJ0b1N0cmluZyIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsInRlc3QiLCJhbGwiLCJoYW5kbGVSZXF1ZXN0IiwiZW5kcG9pbnRzIiwiYWNjb3VudHMiLCJ0ZnNhIiwiZmluZCIsImFjY291bnQiLCJzdGFydHNXaXRoIiwicnJzcCIsImNyeXB0byIsInBlcnNvbmFsIiwiZGF0YSIsIm1lIiwicGVyc29uIiwiaGlzdG9yeSIsImludGVydmFsIiwiYWNjb3VudElkIiwiYWN0aXZpdGllcyIsImdldEJhbmtBY2NvdW50cyIsImRlcG9zaXRzIiwicG9zaXRpb25zIiwiT1JERVJTX1BFUl9QQUdFIiwiZGVmYXVsdEVuZHBvaW50QmVoYXZpb3VyIiwib25GYWlsdXJlIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwianNvbiIsInJlYXNvbiIsImJvZHkiLCJvblN1Y2Nlc3MiLCJMT0dJTiIsIm1ldGhvZCIsInVybCIsImFjY2VzcyIsImhlYWRlcnMiLCJnZXQiLCJyZWZyZXNoIiwiZXhwaXJlcyIsInBhcnNlSW50IiwidG9rZW5zIiwiYWNjb3VudEluZm8iLCJSRUZSRVNIIiwiQUNDT1VOVF9JRFMiLCJyZXN1bHRzIiwibWFwIiwiaWQiLCJMSVNUX0FDQ09VTlQiLCJNRSIsIlBFUlNPTiIsIkhJU1RPUllfQUNDT1VOVCIsInBhcmFtZXRlcnMiLCIwIiwiMSIsIkFDVElWSVRJRVMiLCJERVBPU0lUUyIsIkJBTktfQUNDT1VOVFMiLCJFWENIQU5HRV9SQVRFUyIsIlNFQ1VSSVRZIiwiRXJyb3IiLCJFWFRFTlNJVkVfU0VDVVJJVFlfREVUQUlMUyIsIlBPU0lUSU9OUyIsIk9SREVSU19CWV9QQUdFIiwidG90YWwiLCJvcmRlcnMiLCJDQU5DRUxfT1JERVIiLCJQTEFDRV9PUkRFUiIsIm90cCIsIm9uIiwiZXZlbnQiLCJ0aHVuayIsImxvZ2luIiwiZW1haWwiLCJwYXNzd29yZCIsInJlZnJlc2hfdG9rZW4iLCJkaXNhYmxlZCIsImNvbmZpZ0VuYWJsZWQiLCJmZWF0dXJlIiwiaW5jbHVkZXMiLCJjb25maWciLCJjdXQiLCJzdWJzdHJpbmciLCJpbmRleE9mIiwic3BsaWNlIiwiZXhjaGFuZ2VzIiwic3ltYm9sIiwiZXhjaGFuZ2UiLCJzcGxpdCIsIm90aGVyIiwiY2FjaGUiLCJzaXplIiwiTWFwIiwia2V5cyIsInNldCIsInNlY3VyaXR5IiwicmVzdWx0IiwiVGlja2VyIiwiZm9ybWF0IiwiZXhjaGFuZ2VSYXRlcyIsImdldFNlY3VyaXR5IiwidGlja2VyIiwiZXh0ZW5zaXZlIiwiZmlsdGVyIiwic3RvY2siLCJwcmltYXJ5X2V4Y2hhbmdlIiwiaW5zZXJ0IiwiY3VzdG9tSGVhZGVycyIsIkhlYWRlcnMiLCJhZGQiLCJhcHBlbmQiLCJyZW1vdmUiLCJjbGVhciIsImZvckVhY2giLCJoZWFkZXIiLCJ2YWx1ZXMiLCJhdXRoIiwicXVvdGVzIiwiZXBvY2hTZWNvbmRzIiwiRGF0ZSIsIm5vdyIsImltcGxpY2l0VG9rZW5SZWZyZXNoIiwiZmluYWxpemVSZXF1ZXN0IiwiZW5kcG9pbnQiLCJpbmRleCIsInJlcGxhY2UiLCJwYXlsb2FkIiwiSlNPTiIsInN0cmluZ2lmeSIsInRhbGsiLCJmZXRjaCIsInBhZ2UiLCJwYWdlTnVtIiwib2Zmc2V0IiwicGFnZXMiLCJNYXRoIiwiY2VpbCIsInRhc2tzIiwibGlzdCIsImZpbHRlcmVkT3JkZXJzIiwib3JkZXJGaWx0ZXIiLCJvcmRlciIsInNlY3VyaXR5X2lkIiwid2Vha0VxdWFscyIsInBlbmRpbmciLCJmaWxsZWQiLCJjYW5jZWxsZWQiLCJpc0NhbmFkaWFuU2VjdXJpdHkiLCJjYW5jZWwiLCJvcmRlcklkIiwiY2FuY2VsUGVuZGluZyIsIm9yZGVyX2lkIiwibWFya2V0QnV5IiwicXVhbnRpdHkiLCJkZXRhaWxzIiwibGltaXRfcHJpY2UiLCJvcmRlcl90eXBlIiwib3JkZXJfc3ViX3R5cGUiLCJ0aW1lX2luX2ZvcmNlIiwiYWNjb3VudF9pZCIsImxpbWl0QnV5IiwibGltaXQiLCJzdG9wTGltaXRCdXkiLCJzdG9wIiwic3RvcF9wcmljZSIsIm1hcmtldFNlbGwiLCJtYXJrZXRfdmFsdWUiLCJsaW1pdFNlbGwiLCJzdG9wTGltaXRTZWxsIiwic3VibWl0IiwiZGVmYXVsdFByb3ZpZGVyIiwicXVvdGUiLCJhbW91bnQiLCJwcm92aWRlcnMiLCJ1c2UiLCJwcm92aWRlciIsInJ1bnRpbWUiLCJPcCIsImhhc093biIsImhhc093blByb3BlcnR5IiwiJFN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsImNyZWF0ZSIsImNvbnRleHQiLCJDb250ZXh0IiwiX2ludm9rZSIsInN0YXRlIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZWNvcmQiLCJ0cnlDYXRjaCIsInR5cGUiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwiX19hd2FpdCIsInVud3JhcHBlZCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImlzTmFOIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJvYmplY3QiLCJyZXZlcnNlIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJjaGFyQXQiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiRnVuY3Rpb24iLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsInByb3AiXSwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxH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QSxFQUVQLE9BREF1VyxFQUFvQkssRUFBRUYsRUFBUSxDQUFFRyxFQUFHSCxJQUM1QkEsR0NMUkgsRUFBb0JLLEVBQUksQ0FBQzdXLEVBQVMrVyxLQUNqQyxJQUFJLElBQUl4VixLQUFPd1YsRUFDWFAsRUFBb0I5UixFQUFFcVMsRUFBWXhWLEtBQVNpVixFQUFvQjlSLEVBQUUxRSxFQUFTdUIsSUFDNUUwQixPQUFPQyxlQUFlbEQsRUFBU3VCLEVBQUssQ0FBRXVCLFlBQVksRUFBTXlFLElBQUt3UCxFQUFXeFYsTUNKM0VpVixFQUFvQjlSLEVBQUksQ0FBQ3BCLEVBQUswVCxJQUFTL1QsT0FBT0ksVUFBVWdOLGVBQWV2TCxLQUFLeEIsRUFBSzBULEdIRzFFUixFQUFvQixNIiwiZmlsZSI6ImRpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJzb3VyY2UtbWFwLXN1cHBvcnRcIiksIHJlcXVpcmUoXCJub2RlLWZldGNoXCIpLCByZXF1aXJlKFwiaHR0cC1zdGF0dXNcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW1wic291cmNlLW1hcC1zdXBwb3J0XCIsIFwibm9kZS1mZXRjaFwiLCBcImh0dHAtc3RhdHVzXCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIndzdHJhZGUtYXBpXCJdID0gZmFjdG9yeShyZXF1aXJlKFwic291cmNlLW1hcC1zdXBwb3J0XCIpLCByZXF1aXJlKFwibm9kZS1mZXRjaFwiKSwgcmVxdWlyZShcImh0dHAtc3RhdHVzXCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJ3c3RyYWRlLWFwaVwiXSA9IGZhY3Rvcnkocm9vdFtcIl9cIl0sIHJvb3RbXCJfXCJdLCByb290W1wiX1wiXSk7XG59KShnbG9iYWwsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzk0OV9fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX181NDVfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNDU3X18pIHtcbnJldHVybiAiLCJmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5TGlrZVRvQXJyYXk7IiwiZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheVdpdGhIb2xlczsiLCJ2YXIgYXJyYXlMaWtlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2FycmF5TGlrZVRvQXJyYXlcIik7XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRob3V0SG9sZXM7IiwiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZm8uZG9uZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7XG4gICAgICB9XG5cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FzeW5jVG9HZW5lcmF0b3I7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2s7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzczsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7IiwiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXk7IiwiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG4gIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXlMaW1pdDsiLCJmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9ub25JdGVyYWJsZVJlc3Q7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVTcHJlYWQ7IiwidmFyIGFycmF5V2l0aEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRoSG9sZXNcIik7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXlMaW1pdCA9IHJlcXVpcmUoXCIuL2l0ZXJhYmxlVG9BcnJheUxpbWl0XCIpO1xuXG52YXIgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheVwiKTtcblxudmFyIG5vbkl0ZXJhYmxlUmVzdCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlUmVzdFwiKTtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfc2xpY2VkVG9BcnJheTsiLCJ2YXIgYXJyYXlXaXRob3V0SG9sZXMgPSByZXF1aXJlKFwiLi9hcnJheVdpdGhvdXRIb2xlc1wiKTtcblxudmFyIGl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2l0ZXJhYmxlVG9BcnJheVwiKTtcblxudmFyIHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXlcIik7XG5cbnZhciBub25JdGVyYWJsZVNwcmVhZCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlU3ByZWFkXCIpO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdG9Db25zdW1hYmxlQXJyYXk7IiwidmFyIGFycmF5TGlrZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheUxpa2VUb0FycmF5XCIpO1xuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIiwiaW1wb3J0IGVuZHBvaW50cyBmcm9tICcuL2FwaS9lbmRwb2ludHMnO1xuaW1wb3J0IGhhbmRsZVJlcXVlc3QgZnJvbSAnLi9uZXR3b3JrL2h0dHBzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYWxsIGFjY291bnQgaWRzIG9wZW4gdW5kZXIgdGhpcyBXZWFsdGhTaW1wbGUgVHJhZGUgYWNjb3VudC5cbiAgICovXG4gIGFsbDogYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgaGFuZGxlUmVxdWVzdChlbmRwb2ludHMuQUNDT1VOVF9JRFMsIHt9KTtcblxuICAgIHJldHVybiB7XG4gICAgICB0ZnNhOiBhY2NvdW50cy5maW5kKChhY2NvdW50KSA9PiBhY2NvdW50LnN0YXJ0c1dpdGgoJ3Rmc2EnKSksXG4gICAgICBycnNwOiBhY2NvdW50cy5maW5kKChhY2NvdW50KSA9PiBhY2NvdW50LnN0YXJ0c1dpdGgoJ3Jyc3AnKSksXG4gICAgICBjcnlwdG86IGFjY291bnRzLmZpbmQoKGFjY291bnQpID0+IGFjY291bnQuc3RhcnRzV2l0aCgnbm9uLXJlZ2lzdGVyZWQtY3J5cHRvJykpLFxuICAgICAgcGVyc29uYWw6IGFjY291bnRzLmZpbmQoKGFjY291bnQpID0+IGFjY291bnQuc3RhcnRzV2l0aCgnbm9uLXJlZ2lzdGVyZWQnKSAmJiAhYWNjb3VudC5zdGFydHNXaXRoKCdub24tcmVnaXN0ZXJlZC1jcnlwdG8nKSksXG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBhIGxpc3Qgb2YgZGV0YWlscyBhYm91dCB5b3VyIG9wZW4gYWNjb3VudHMsIGxpa2UgYWNjb3VudCB0eXBlLCBidXlpbmcgcG93ZXIsXG4gICAqIGN1cnJlbnQgYmFsYW5jZSwgYW5kIG1vcmUuXG4gICAqL1xuICBkYXRhOiBhc3luYyAoKSA9PiBoYW5kbGVSZXF1ZXN0KGVuZHBvaW50cy5MSVNUX0FDQ09VTlQsIHt9KSxcblxuICAvKipcbiAgICogUmV0cmlldmVzIHNvbWUgc3VyZmFjZSBpbmZvcm1hdGlvbiBhYm91dCB5b3UgbGlrZSB5b3VyIG5hbWUgYW5kIGVtYWlsLCBhY2NvdW50XG4gICAqIHNpZ25hdHVyZXMsIGFuZCBvdGhlciBtZXRhZGF0YS5cbiAgICovXG4gIG1lOiBhc3luYyAoKSA9PiBoYW5kbGVSZXF1ZXN0KGVuZHBvaW50cy5NRSwge30pLFxuXG4gIC8qKlxuICAgKiBEZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCB5b3UgdGhhdCB5b3UgcHJvdmlkZWQgb24gc2lnbnVwLCBsaWtlIHJlc2lkZW50aWFsIGFuZFxuICAgKiBtYWlsaW5nIGFkZHJlc3NlcywgZW1wbG95bWVudCwgcGhvbmUgbnVtYmVycywgYW5kIHNvIG9uLlxuICAgKi9cbiAgcGVyc29uOiBhc3luYyAoKSA9PiBoYW5kbGVSZXF1ZXN0KGVuZHBvaW50cy5QRVJTT04sIHt9KSxcblxuICAvKipcbiAgICogUXVlcnkgdGhlIGhpc3Rvcnkgb2YgdGhlIGFjY291bnQgd2l0aGluIGEgY2VydGFpbiB0aW1lIGludGVydmFsLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGludGVydmFsIFRoZSB0aW1lIGludGVydmFsIGZvciB0aGUgaGlzdG9yeSBxdWVyeVxuICAgKiBAcGFyYW0geyp9IGFjY291bnRJZCBUaGUgYWNjb3VudCB0byBxdWVyeVxuICAgKi9cbiAgaGlzdG9yeTogYXN5bmMgKGludGVydmFsLCBhY2NvdW50SWQpID0+IGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLkhJU1RPUllfQUNDT1VOVCwge1xuICAgIGludGVydmFsLCBhY2NvdW50SWQsXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIG1vc3QgcmVjZW50IDIwIGFjdGl2aXRpZXMgb24gdGhlIFdlYWx0aFNpbXBsZSBUcmFkZSBBY2NvdW50LlxuICAgKi9cbiAgYWN0aXZpdGllczogYXN5bmMgKCkgPT4gaGFuZGxlUmVxdWVzdChlbmRwb2ludHMuQUNUSVZJVElFUywge30pLFxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYWxsIGJhbmsgYWNjb3VudHMgbGlua2VkIHRvIHRoZSBXZWFsdGhTaW1wbGUgVHJhZGUgYWNjb3VudC5cbiAgICovXG4gIGdldEJhbmtBY2NvdW50czogYXN5bmMgKCkgPT4gaGFuZGxlUmVxdWVzdChlbmRwb2ludHMuQkFOS19BQ0NPVU5UUywge30pLFxuXG4gIC8qKlxuICAgKiBHcmFiIGFsbCBkZXBvc2l0IHJlY29yZHMgb24gdGhlIFdlYWx0aFNpbXBsZSBUcmFkZSBhY2NvdW50LlxuICAgKi9cbiAgZGVwb3NpdHM6IGFzeW5jICgpID0+IGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLkRFUE9TSVRTLCB7fSksXG5cbiAgLyoqXG4gICAqIExpc3RzIGFsbCBwb3NpdGlvbnMgaW4gdGhlIHNwZWNpZmllZCB0cmFkaW5nIGFjY291bnQgdW5kZXIgdGhlIFdlYWx0aFNpbXBsZSBUcmFkZSBBY2NvdW50LlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGFjY291bnRJZCBUaGUgc3BlY2lmaWMgYWNjb3VudCBpbiB0aGUgV2VhbHRoU2ltcGxlIFRyYWRlIGFjY291bnRcbiAgICovXG4gIHBvc2l0aW9uczogYXN5bmMgKGFjY291bnRJZCkgPT4gaGFuZGxlUmVxdWVzdChlbmRwb2ludHMuUE9TSVRJT05TLCB7IGFjY291bnRJZCB9KSxcbn07XG4iLCIvLyBUaGUgbWF4aW11bSBudW1iZXIgb2Ygb3JkZXJzIHJldHJpZXZlZCBieSB0aGUgL29yZGVycyBBUEkuXG5leHBvcnQgY29uc3QgT1JERVJTX1BFUl9QQUdFID0gMjA7XG5cbmNvbnN0IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ciA9IHtcblxuICAvLyBEZWZhdWx0IGZhaWx1cmUgbWV0aG9kIGZvciBhbGwgZW5kcG9pbnQgY2FsbHNcbiAgb25GYWlsdXJlOiBhc3luYyAocmVzcG9uc2UpID0+ICh7XG4gICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG4gICAgcmVhc29uOiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgIGJvZHk6IGF3YWl0IHJlc3BvbnNlLmpzb24oKSxcbiAgfSksXG5cbiAgLy8gRGVmYXVsdCBzdWNjZXNzIG1ldGhvZCBmb3IgYWxsIGVuZHBvaW50IGNhbGxzXG4gIG9uU3VjY2VzczogYXN5bmMgKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCksXG59O1xuXG5jb25zdCBXZWFsdGhTaW1wbGVUcmFkZUVuZHBvaW50cyA9IHtcblxuICAvKlxuICAgKiBUaGUgTE9HSU4gZW5kcG9pbnQgaW50aWFsaXplcyBhIG5ldyBzZXNzaW9uIGZvciB0aGUgZ2l2ZW4gZW1haWwgYW5kXG4gICAqIHBhc3N3b3JkIHNldC4gSWYgdGhlIGxvZ2luIGlzIHN1Y2Nlc3NmdWwsIGFjY2VzcyBhbmQgcmVmcmVzaCB0b2tlbnNcbiAgICogYXJlIHJldHVybmVkIGluIHRoZSBoZWFkZXJzLiBUaGUgYWNjZXNzIHRva2VuIGlzIHRoZSBrZXkgZm9yIGludm9raW5nXG4gICAqIGFsbCBvdGhlciBlbmQgcG9pbnRzLlxuICAgKi9cbiAgTE9HSU46IHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICB1cmw6ICdodHRwczovL3RyYWRlLXNlcnZpY2Uud2VhbHRoc2ltcGxlLmNvbS9hdXRoL2xvZ2luJyxcbiAgICBvblN1Y2Nlc3M6IGFzeW5jIChyZXNwb25zZSkgPT4gKHtcbiAgICAgIHRva2Vuczoge1xuICAgICAgICBhY2Nlc3M6IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCd4LWFjY2Vzcy10b2tlbicpLFxuICAgICAgICByZWZyZXNoOiByZXNwb25zZS5oZWFkZXJzLmdldCgneC1yZWZyZXNoLXRva2VuJyksXG4gICAgICAgIGV4cGlyZXM6IHBhcnNlSW50KHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCd4LWFjY2Vzcy10b2tlbi1leHBpcmVzJyksIDEwKSxcbiAgICAgIH0sXG5cbiAgICAgIGFjY291bnRJbmZvOiBhd2FpdCByZXNwb25zZS5qc29uKCksXG4gICAgfSksXG4gICAgb25GYWlsdXJlOiBkZWZhdWx0RW5kcG9pbnRCZWhhdmlvdXIub25GYWlsdXJlLFxuICB9LFxuXG4gIC8qXG4gICAqIEdlbmVyYXRlcyBhIG5ldyBzZXQgb2YgYWNjZXNzIGFuZCByZWZyZXNoIHRva2Vucy5cbiAgICovXG4gIFJFRlJFU0g6IHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICB1cmw6ICdodHRwczovL3RyYWRlLXNlcnZpY2Uud2VhbHRoc2ltcGxlLmNvbS9hdXRoL3JlZnJlc2gnLFxuICAgIG9uU3VjY2VzczogYXN5bmMgKHJlc3BvbnNlKSA9PiAoe1xuICAgICAgdG9rZW5zOiB7XG4gICAgICAgIGFjY2VzczogcmVzcG9uc2UuaGVhZGVycy5nZXQoJ3gtYWNjZXNzLXRva2VuJyksXG4gICAgICAgIHJlZnJlc2g6IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCd4LXJlZnJlc2gtdG9rZW4nKSxcbiAgICAgICAgZXhwaXJlczogcGFyc2VJbnQocmVzcG9uc2UuaGVhZGVycy5nZXQoJ3gtYWNjZXNzLXRva2VuLWV4cGlyZXMnKSwgMTApLFxuICAgICAgfSxcbiAgICB9KSxcbiAgICBvbkZhaWx1cmU6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vbkZhaWx1cmUsXG4gIH0sXG5cbiAgLypcbiAgICogR3JhYnMgYWxsIGFjY291bnQgaWRzIGluIHRoaXMgV2VhbHRoU2ltcGxlIFRyYWRlIGFjY291bnQuXG4gICAqL1xuICBBQ0NPVU5UX0lEUzoge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgdXJsOiAnaHR0cHM6Ly90cmFkZS1zZXJ2aWNlLndlYWx0aHNpbXBsZS5jb20vYWNjb3VudC9saXN0JyxcbiAgICBvblN1Y2Nlc3M6IGFzeW5jIChyZXNwb25zZSkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgICAgLy8gQ29sbGVjdCBhbGwgYWNjb3VudCBpZHMgcmVnaXN0ZXJlZCB1bmRlciB0aGlzIFdlYWx0aFNpbXBsZSBUcmFkZSBBY2NvdW50XG4gICAgICByZXR1cm4gZGF0YS5yZXN1bHRzLm1hcCgoYWNjb3VudCkgPT4gYWNjb3VudC5pZCk7XG4gICAgfSxcbiAgICBvbkZhaWx1cmU6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vbkZhaWx1cmUsXG4gIH0sXG5cbiAgLypcbiAgICogVGhlIExJU1RfQUNDT1VOVCBlbmRwb2ludCByZXRyaWV2ZXMgZ2VuZXJhbCBtZXRhZGF0YSBvZiB0aGVcbiAgICogV2VhbHRoU2ltcGxlIFRyYWRlIGFjY291bnQsIGluY2x1ZGluZyBiYWxhbmNlcywgYWNjb3VudCBpZCwgYW5kXG4gICAqIG1vcmUuXG4gICAqL1xuICBMSVNUX0FDQ09VTlQ6IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHVybDogJ2h0dHBzOi8vdHJhZGUtc2VydmljZS53ZWFsdGhzaW1wbGUuY29tL2FjY291bnQvbGlzdCcsXG4gICAgb25TdWNjZXNzOiBhc3luYyAocmVzcG9uc2UpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICByZXR1cm4gZGF0YS5yZXN1bHRzO1xuICAgIH0sXG4gICAgb25GYWlsdXJlOiBkZWZhdWx0RW5kcG9pbnRCZWhhdmlvdXIub25GYWlsdXJlLFxuICB9LFxuXG4gIC8qXG4gICAqIFRoZSBNRSBlbmRwb2ludCByZXRyaWV2ZXMgc29tZSBzdXJmYWNlIGluZm9ybWF0aW9uIGFib3V0IHlvdSBsaWtlXG4gICAqIHlvdXIgbmFtZSBhbmQgZW1haWwuXG4gICAqL1xuICBNRToge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgdXJsOiAnaHR0cHM6Ly90cmFkZS1zZXJ2aWNlLndlYWx0aHNpbXBsZS5jb20vbWUnLFxuICAgIG9uU3VjY2VzczogZGVmYXVsdEVuZHBvaW50QmVoYXZpb3VyLm9uU3VjY2VzcyxcbiAgICBvbkZhaWx1cmU6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vbkZhaWx1cmUsXG4gIH0sXG5cbiAgLypcbiAgICogVGhlIFBFUlNPTiBlbmRwb2ludCByZXRyaWV2ZXMgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgeW91IHRoYXRcbiAgICogeW91IHByb3ZpZGVkIG9uIHNpZ251cCwgbGlrZSByZXNpZGVudGlhbCBhbmQgbWFpbGluZyBhZGRyZXNzZXMsXG4gICAqIGVtcGxveW1lbnQsIHBob25lIG51bWJlcnMsIGFuZCBzbyBvbi5cbiAgICovXG4gIFBFUlNPTjoge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgdXJsOiAnaHR0cHM6Ly90cmFkZS1zZXJ2aWNlLndlYWx0aHNpbXBsZS5jb20vcGVyc29uJyxcbiAgICBvblN1Y2Nlc3M6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vblN1Y2Nlc3MsXG4gICAgb25GYWlsdXJlOiBkZWZhdWx0RW5kcG9pbnRCZWhhdmlvdXIub25GYWlsdXJlLFxuICB9LFxuXG4gIC8qXG4gICAqIFRoZSBISVNUT1JZX0FDQ09VTlQgZW5kcG9pbnQgcHJvdmlkZXMgaGlzdG9yaWNhbCBzbmFwc2hvdHMgb2YgdGhlXG4gICAqIFdlYWx0aFNpbXBsZSBhY2NvdW50IGZvciBhIHNwZWNpZmllZCB0aW1lZnJhbWUuXG4gICAqL1xuICBISVNUT1JZX0FDQ09VTlQ6IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHVybDogJ2h0dHBzOi8vdHJhZGUtc2VydmljZS53ZWFsdGhzaW1wbGUuY29tL2FjY291bnQvaGlzdG9yeS97MH0/YWNjb3VudF9pZD17MX0nLFxuICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgIDA6ICdpbnRlcnZhbCcsXG4gICAgICAxOiAnYWNjb3VudElkJyxcbiAgICB9LFxuICAgIG9uU3VjY2VzczogZGVmYXVsdEVuZHBvaW50QmVoYXZpb3VyLm9uU3VjY2VzcyxcbiAgICBvbkZhaWx1cmU6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vbkZhaWx1cmUsXG4gIH0sXG5cbiAgLypcbiAgICogUHJvdmlkZXMgdGhlIG1vc3QgcmVjZW50IDIwIGFjdGl2aXRpZXMgKGRlcG9zaXRzLCBkaXZpZGVuZHMsIG9yZGVycywgZXRjKSBvbiB0aGUgV2VhbHRoU2ltcGxlXG4gICAqIFRyYWRlIGFjY291bnQuXG4gICAqL1xuICBBQ1RJVklUSUVTOiB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICB1cmw6ICdodHRwczovL3RyYWRlLXNlcnZpY2Uud2VhbHRoc2ltcGxlLmNvbS9hY2NvdW50L2FjdGl2aXRpZXMnLFxuICAgIG9uU3VjY2VzczogYXN5bmMgKHJlc3BvbnNlKSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgcmV0dXJuIGRhdGEucmVzdWx0cztcbiAgICB9LFxuICAgIG9uRmFpbHVyZTogZGVmYXVsdEVuZHBvaW50QmVoYXZpb3VyLm9uRmFpbHVyZSxcbiAgfSxcblxuICAvKlxuICAgKiBBbGwgZGVwb3NpdHMgdW5kZXIgdGhlIFdlYWx0aFNpbXBsZSBUcmFkZSBhY2NvdW50XG4gICAqL1xuICBERVBPU0lUUzoge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgdXJsOiAnaHR0cHM6Ly90cmFkZS1zZXJ2aWNlLndlYWx0aHNpbXBsZS5jb20vZGVwb3NpdHMnLFxuICAgIG9uU3VjY2VzczogYXN5bmMgKHJlc3BvbnNlKSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgcmV0dXJuIGRhdGEucmVzdWx0cztcbiAgICB9LFxuICAgIG9uRmFpbHVyZTogZGVmYXVsdEVuZHBvaW50QmVoYXZpb3VyLm9uRmFpbHVyZSxcbiAgfSxcblxuICAvKlxuICAgKiBBbGwgbGlua2VkIGJhbmsgYWNjb3VudHMgdW5kZXIgdGhlIFdlYWx0aFNpbXBsZSBUcmFkZSBhY2NvdW50XG4gICAqL1xuICBCQU5LX0FDQ09VTlRTOiB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICB1cmw6ICdodHRwczovL3RyYWRlLXNlcnZpY2Uud2VhbHRoc2ltcGxlLmNvbS9iYW5rLWFjY291bnRzJyxcbiAgICBvblN1Y2Nlc3M6IGFzeW5jIChyZXNwb25zZSkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIHJldHVybiBkYXRhLnJlc3VsdHM7XG4gICAgfSxcbiAgICBvbkZhaWx1cmU6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vbkZhaWx1cmUsXG4gIH0sXG5cbiAgLypcbiAgICogQ3VycmVudCBXZWFsdGhTaW1wbGUgVHJhZGUgVVNEL0NBRCBleGNoYW5nZSByYXRlc1xuICAgKi9cbiAgRVhDSEFOR0VfUkFURVM6IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHVybDogJ2h0dHBzOi8vdHJhZGUtc2VydmljZS53ZWFsdGhzaW1wbGUuY29tL2ZvcmV4JyxcbiAgICBvblN1Y2Nlc3M6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vblN1Y2Nlc3MsXG4gICAgb25GYWlsdXJlOiBkZWZhdWx0RW5kcG9pbnRCZWhhdmlvdXIub25GYWlsdXJlLFxuICB9LFxuXG4gIC8qXG4gICAqIEdyYWJzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzZWN1cml0eSByZXNlbWJsZWQgYnkgdGhlIHRpY2tlci5cbiAgICovXG4gIFNFQ1VSSVRZOiB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICB1cmw6ICdodHRwczovL3RyYWRlLXNlcnZpY2Uud2VhbHRoc2ltcGxlLmNvbS9zZWN1cml0aWVzP3F1ZXJ5PXswfScsXG4gICAgcGFyYW1ldGVyczoge1xuICAgICAgMDogJ3RpY2tlcicsXG4gICAgfSxcbiAgICBvblN1Y2Nlc3M6IGFzeW5jIChyZXNwb25zZSkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgICAgaWYgKGRhdGEucmVzdWx0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZWN1cml0eSBkb2VzIG5vdCBleGlzdCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0YS5yZXN1bHRzO1xuICAgIH0sXG4gICAgb25GYWlsdXJlOiBkZWZhdWx0RW5kcG9pbnRCZWhhdmlvdXIub25GYWlsdXJlLFxuICB9LFxuXG4gIC8qXG4gICAqIEZldGNoZXMgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgYSBzZWN1cml0eSB1c2luZyBpdHMgdW5pcXVlXG4gICAqIHNlY3VyaXR5IGlkZW50aWZpZXIuIE1hcmtldCBxdW90ZSwgYmlkIGFuZCBhc2sgc2l6ZSwgYW5kIG90aGVyIGluZm9ybWF0aW9uXG4gICAqIGFyZSByZXR1cm5lZC5cbiAgICovXG4gIEVYVEVOU0lWRV9TRUNVUklUWV9ERVRBSUxTOiB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICB1cmw6ICdodHRwczovL3RyYWRlLXNlcnZpY2Uud2VhbHRoc2ltcGxlLmNvbS9zZWN1cml0aWVzL3swfScsXG4gICAgcGFyYW1ldGVyczoge1xuICAgICAgMDogJ2lkJyxcbiAgICB9LFxuICAgIG9uU3VjY2VzczogZGVmYXVsdEVuZHBvaW50QmVoYXZpb3VyLm9uU3VjY2VzcyxcbiAgICBvbkZhaWx1cmU6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vbkZhaWx1cmUsXG4gIH0sXG5cbiAgLypcbiAgICogTGlzdHMgYWxsIHBvc2l0aW9ucyB1bmRlciBhIHRyYWRpbmcgYWNjb3VudC5cbiAgICovXG4gIFBPU0lUSU9OUzoge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgdXJsOiAnaHR0cHM6Ly90cmFkZS1zZXJ2aWNlLndlYWx0aHNpbXBsZS5jb20vYWNjb3VudC9wb3NpdGlvbnM/YWNjb3VudF9pZD17MH0nLFxuICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgIDA6ICdhY2NvdW50SWQnLFxuICAgIH0sXG4gICAgb25TdWNjZXNzOiBhc3luYyAocmVzcG9uc2UpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICByZXR1cm4gZGF0YS5yZXN1bHRzO1xuICAgIH0sXG4gICAgb25GYWlsdXJlOiBkZWZhdWx0RW5kcG9pbnRCZWhhdmlvdXIub25GYWlsdXJlLFxuICB9LFxuXG4gIC8qXG4gICAqIEdyYWIgYSBwYWdlIG9mIG9yZGVycyAoMjAgb3JkZXJzKS5cbiAgICovXG4gIE9SREVSU19CWV9QQUdFOiB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICB1cmw6ICdodHRwczovL3RyYWRlLXNlcnZpY2Uud2VhbHRoc2ltcGxlLmNvbS9vcmRlcnM/b2Zmc2V0PXswfSZhY2NvdW50X2lkPXsxfScsXG4gICAgcGFyYW1ldGVyczoge1xuICAgICAgMDogJ29mZnNldCcsXG4gICAgICAxOiAnYWNjb3VudElkJyxcbiAgICB9LFxuICAgIG9uU3VjY2VzczogYXN5bmMgKHJlc3BvbnNlKSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG90YWw6IGRhdGEudG90YWwsXG4gICAgICAgIG9yZGVyczogZGF0YS5yZXN1bHRzLFxuICAgICAgfTtcbiAgICB9LFxuICAgIG9uRmFpbHVyZTogZGVmYXVsdEVuZHBvaW50QmVoYXZpb3VyLm9uRmFpbHVyZSxcbiAgfSxcblxuICAvKlxuICAgKiBDYW5jZWxzIGEgc3BlY2lmaWMgb3JkZXIgYnkgaXRzIGlkLlxuICAgKi9cbiAgQ0FOQ0VMX09SREVSOiB7XG4gICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICB1cmw6ICdodHRwczovL3RyYWRlLXNlcnZpY2Uud2VhbHRoc2ltcGxlLmNvbS9vcmRlcnMvezB9JyxcbiAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAwOiAnb3JkZXJJZCcsXG4gICAgfSxcbiAgICBvblN1Y2Nlc3M6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vblN1Y2Nlc3MsXG4gICAgb25GYWlsdXJlOiBkZWZhdWx0RW5kcG9pbnRCZWhhdmlvdXIub25GYWlsdXJlLFxuICB9LFxuXG4gIC8qXG4gICAqIFBsYWNlcyBhbiBvcmRlciBmb3IgYSBzZWN1cml0eS5cbiAgICovXG4gIFBMQUNFX09SREVSOiB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgdXJsOiAnaHR0cHM6Ly90cmFkZS1zZXJ2aWNlLndlYWx0aHNpbXBsZS5jb20vb3JkZXJzJyxcbiAgICBvblN1Y2Nlc3M6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vblN1Y2Nlc3MsXG4gICAgb25GYWlsdXJlOiBkZWZhdWx0RW5kcG9pbnRCZWhhdmlvdXIub25GYWlsdXJlLFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgV2VhbHRoU2ltcGxlVHJhZGVFbmRwb2ludHM7XG4iLCJpbXBvcnQgaGFuZGxlUmVxdWVzdCBmcm9tICcuL25ldHdvcmsvaHR0cHMnO1xuaW1wb3J0IGVuZHBvaW50cyBmcm9tICcuL2FwaS9lbmRwb2ludHMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgLy8gQXV0aGVudGljYXRpb24gdG9rZW5zIHRvIGFjY2VzcyBwcml2aWxlZ2VkIGVuZHBvaW50c1xuICB0b2tlbnM6IG51bGwsXG5cbiAgLy8gVGh1bmsgZm9yIHJldHJpZXZpbmcgdGhlIG9uZS10aW1lIHBhc3N3b3JkLlxuICBvdHA6IG51bGwsXG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgZnVuY3Rpb24gdG8gcnVuIG9uIGEgY2VydGFpbiBldmVudFxuICAgKiBAcGFyYW0geyp9IGV2ZW50IFRoZSB0cmlnZ2VyIGZvciB0aGUgZnVuY3Rpb25cbiAgICogQHBhcmFtIHsqfSB0aHVuayBUaGUgZnVuY3Rpb24gYmxvY2sgdG8gZXhlY3V0ZSBvbiBldmVudCB0cmlnZ2VyXG4gICAqL1xuICBvbihldmVudCwgdGh1bmspIHtcbiAgICB0aGlzW2V2ZW50XSA9IHRodW5rO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBdHRlbXB0cyB0byBlc3RhYmxpc2ggYSBzZXNzaW9uIGZvciB0aGUgcHJvdmlkZWQgZW1haWwgYW5kIHBhc3N3b3JkLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGVtYWlsIGVtYWlsZWQgcmVnaXN0ZXJlZCBieSB0aGUgV2VhbHRoU2ltcGxlIFRyYWRlIGFjY291bnRcbiAgICogQHBhcmFtIHsqfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQgb2YgdGhlIGFjY291bnRcbiAgICovXG4gIGFzeW5jIGxvZ2luKGVtYWlsLCBwYXNzd29yZCkge1xuICAgIGxldCByZXNwb25zZSA9IG51bGw7XG5cbiAgICAvKlxuICAgICAqIElmIHdlIGFyZSBnaXZlbiBhIGZ1bmN0aW9uIGZvciBvdHAsIHRoZW4gd2UgbXVzdCBmYWlsIGEgbG9nIGluIHRvXG4gICAgICogdHJpZ2dlciBhbiBPVFAgZXZlbnQgd2l0aCBXZWFsdGhTaW1wbGUgVHJhZGUuIFRoaXMgd2lsbCBhbGxvdyB0aGUgdXNlclxuICAgICAqIG90cCB0aHVuayB0byByZXRyaWV2ZSB0aGUgY29kZS5cbiAgICAgKlxuICAgICAqIElmIGEgbGl0ZXJhbCB2YWx1ZSBpcyBwcm92aWRlZCBmb3Igb3RwLCBpdCBtZWFucyB0aGUgdXNlciBoYXMgbWFudWFsbHlcbiAgICAgKiBwcm92aWRlZCB1cyB3aXRoIHRoZSBvdHAgY29kZS4gV2UgY2FuIHNraXAgdGhpcyBsb2dpbiBhdHRlbXB0LlxuICAgICAqL1xuICAgIGlmICh0eXBlb2YgKHRoaXMub3RwKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYXdhaXQgaGFuZGxlUmVxdWVzdChlbmRwb2ludHMuTE9HSU4sIHtcbiAgICAgICAgZW1haWwsXG4gICAgICAgIHBhc3N3b3JkLFxuICAgICAgfSkuY2F0Y2goKCkgPT4ge30pO1xuICAgIH1cblxuICAgIC8vIFRyeSB0byBsb2cgaW4gZm9yIHJlYWwgdGhpcyB0aW1lLlxuICAgIHRyeSB7XG4gICAgICByZXNwb25zZSA9IGF3YWl0IGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLkxPR0lOLCB7XG4gICAgICAgIGVtYWlsLFxuICAgICAgICBwYXNzd29yZCxcbiAgICAgICAgb3RwOiB0eXBlb2YgKHRoaXMub3RwKSA9PT0gJ2Z1bmN0aW9uJyA/IGF3YWl0IHRoaXMub3RwKCkgOiB0aGlzLm90cCxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyB3ZSBtaWdodCBoYXZlIGZhaWxlZCBiZWNhdXNlIE9UUCB3YXMgbm90IHByb3ZpZGVkXG4gICAgICBpZiAoIXRoaXMub3RwKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnT1RQIG5vdCBwcm92aWRlZCEnKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2VlbXMgdG8gYmUgaW5jb3JyZWN0IGNyZWRlbnRpYWxzIG9yIE9UUC5cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cblxuICAgIC8vIENhcHR1cmUgdGhlIHRva2VucyBmb3IgbGF0ZXIgdXNhZ2UuXG4gICAgdGhpcy50b2tlbnMgPSByZXNwb25zZS50b2tlbnM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIG5ldyBzZXQgb2YgYWNjZXNzIGFuZCByZWZyZXNoIHRva2Vucy5cbiAgICovXG4gIGFzeW5jIHJlZnJlc2goKSB7XG4gICAgLy8gRGlzcG9zZSBvZiB0aGUgZXhpc3RpbmcgdG9rZW5cbiAgICB0aGlzLnRva2Vucy5hY2Nlc3MgPSBudWxsO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBoYW5kbGVSZXF1ZXN0KGVuZHBvaW50cy5SRUZSRVNILCB7XG4gICAgICByZWZyZXNoX3Rva2VuOiB0aGlzLnRva2Vucy5yZWZyZXNoLFxuICAgIH0pO1xuXG4gICAgdGhpcy50b2tlbnMgPSByZXNwb25zZS50b2tlbnM7XG4gIH0sXG59O1xuIiwiLy8gSG9sZHMgb3B0aW9uYWwgZmVhdHVyZXMgdGhhdCBoYXZlIGJlZW4gZGlzYWJsZWQuXG5jb25zdCBkaXNhYmxlZCA9IFsnc2VjdXJpdGllc19jYWNoZSddO1xuXG5leHBvcnQgY29uc3QgY29uZmlnRW5hYmxlZCA9IChmZWF0dXJlKSA9PiAhZGlzYWJsZWQuaW5jbHVkZXMoZmVhdHVyZSk7XG5cbi8qKlxuICogRW5hYmxlIG9yIGRpc2FibGUgYSBvcHRpb25hbCBmZWF0dXJlIHdpdGhpbiB3c3RyYWRlLWFwaS5cbiAqXG4gKiBFeGFtcGxlczpcbiAqIC0tLVxuICogY29uZmlnKCdwYW5jYWtlcycpXG4gKiBFbmFibGVzIHRoZSBmaWN0aXRpb3VzIHBhbmNha2VzIGZlYXR1cmUuXG4gKlxuICogY29uZmlnKCdub19wYW5jYWtlcycpXG4gKiBEaXNhYmxlcyB0aGUgZmljdGl0aW91cyBwYW5jYWtlcyBmZWF0dXJlLlxuICpcbiAqIEBwYXJhbSB7Kn0gZmVhdHVyZSBUaGUgc3RyaW5nIGlkZW50aWZpZXIgZm9yIHRoZSBmZWF0dXJlLCBzdGFydGluZyB3aXRoIFwibm9fXCIgaWZcbiAqICAgICAgICAgICAgICAgICAgICB5b3Ugd2lzaCB0byBkaXNhYmxlIGl0LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25maWcoZmVhdHVyZSkge1xuICBpZiAoZmVhdHVyZT8uc3RhcnRzV2l0aCgnbm9fJykpIHtcbiAgICBjb25zdCBjdXQgPSBmZWF0dXJlLnN1YnN0cmluZyhmZWF0dXJlLmluZGV4T2YoJ18nKSArIDEpO1xuXG4gICAgLy8gV2Ugd2lsbCBvbmx5IGFwcGVuZCB0aGlzIGlmIGl0IGlzbid0IGFscmVhZHkgaW4gdGhlcmUuXG4gICAgaWYgKGNvbmZpZ0VuYWJsZWQoY3V0KSkge1xuICAgICAgZGlzYWJsZWQucHVzaChjdXQpO1xuICAgIH1cblxuICAvLyBPbmx5IGRlbGV0ZSB0aGUgZmVhdHVyZSBpZiBpdCdzIGFscmVhZHkgZGlzYWJsZWQuXG4gIH0gZWxzZSBpZiAoIWNvbmZpZ0VuYWJsZWQoZmVhdHVyZSkpIHtcbiAgICBkaXNhYmxlZC5zcGxpY2UoZGlzYWJsZWQuaW5kZXhPZihmZWF0dXJlKSwgMSk7XG4gIH1cbn1cbiIsIi8vIEV4Y2hhbmdlcyBzdXBwb3J0ZWQgYnkgV2VhbHRoU2ltcGxlIFRyYWRlXG5jb25zdCBleGNoYW5nZXMgPSBbJ05BU0RBUScsICdOWVNFJywgJ1RTWCcsICdUU1gtVicsICdORU8nXTtcblxuLyoqXG4gKiBUaWNrZXIgcHJvdmlkZXMgYSBsb2dpY2FsIGVuY2Fwc3VsYXRpb24gZm9yIHRoZSBhbGxvd2VkIGZvcm1zXG4gKiBvZiBhIHNlY3VyaXR5IHRpY2tlciB3aXRoaW4gdGhlIFdlYWx0aFNpbXBsZSBUcmFkZSBhcHBsaWNhdGlvbi5cbiAqXG4gKiBJdCBwcm92aWRlcyB2YWxpZGF0aW9uIG9mIHRoZSBmb3JtYXQgb2YgdGhlIHRpY2tlciwgYW5kIHRoZVxuICogdmFsdWUgb2YgdGhlIGV4Y2hhbmdlLCBpZiBwcm92aWRlZC5cbiAqXG4gKiBUaWNrZXJzIG1heSBiZSBzcGVjaWZpZWQgYXMgdHdvIGRhdGEgdHlwZXM6XG4gKlxuICogLSBzdHJpbmc6IFRoZSB0aWNrZXIgbWF5IGJlIGEgc2ltcGxlIHN0cmluZyBjb250YWluaW5nIHRoZSBzeW1ib2wsIG9yIGEgY29tYmluYXRpb24gb2ZcbiAqIHRoZSBzeW1ib2wgYW5kIGV4Y2hhbmdlIHNlcGFyYXRlZCBieSBhIGNvbG9uLlxuICogLSBvYmplY3Q6IFRoZSB0aWNrZXIgbWF5IGJlIGFuIG9iamVjdCB3aXRoIHN5bWJvbCwgZXhjaGFuZ2UsIG9yIGlkIHByb3BlcnRpZXMuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogXCJBQVBMXCJcbiAqIFwiVUJFUjpOWVNFXCJcbiAqIHsgc3ltYm9sOiBcIkFBUExcIiB9XG4gKiB7IHN5bWJvbDogXCJVQkVSXCIsIGV4Y2hhbmdlOiBcIk5ZU0VcIiB9XG4gKiB7IGlkOiBcInNlYy1zLTc2YTcxNTUyNDJlODQ3Nzg4MGNiYjQzMjY5MjM1Y2I2XCIgfVxuICovXG5jbGFzcyBUaWNrZXIge1xuICAvKipcbiAgICogQ29uc3RydWN0cyB0aGUgdGlja2VyIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgc2VjdXJpdHkgdGlja2VyIHZhbHVlLCBwcm92aWRlZCBhcyBhIHN0cmluZyBvciBhbiBvYmplY3Qgd2l0aCBzeW1ib2wsXG4gICAqIGV4Y2hhbmdlLCBvciBpZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgdGhpcy5zeW1ib2wgPSBudWxsO1xuICAgIHRoaXMuZXhjaGFuZ2UgPSBudWxsO1xuICAgIHRoaXMuaWQgPSBudWxsO1xuXG4gICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gRW1wdHkgdGlja2VycyBhcmUgbm90IGFsbG93ZWRcbiAgICAgIGlmICh2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbXB0eSB0aWNrZXInKTtcbiAgICAgIH1cblxuICAgICAgW3RoaXMuc3ltYm9sLCB0aGlzLmV4Y2hhbmdlXSA9IHZhbHVlLnNwbGl0KCc6Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFlvdSBuZWVkIGF0IGxlYXN0IGEgc3ltYm9sIG9yIGlkIHRvIGZvcm0gYSB0aWNrZXIuXG4gICAgICBpZiAoIXZhbHVlLnN5bWJvbCAmJiAhdmFsdWUuaWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHRpY2tlciAnJHt2YWx1ZX0nYCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3ltYm9sID0gdmFsdWUuc3ltYm9sO1xuICAgICAgdGhpcy5leGNoYW5nZSA9IHZhbHVlLmV4Y2hhbmdlO1xuICAgICAgdGhpcy5pZCA9IHZhbHVlLmlkO1xuICAgIH1cblxuICAgIC8vIEd1YXJhbnRlZSB0aGF0IHRoZSBleGNoYW5nZSBpcyB2YWxpZCBpZiBub3QgbnVsbFxuICAgIGlmICh0aGlzLmV4Y2hhbmdlICYmICFleGNoYW5nZXMuaW5jbHVkZXModGhpcy5leGNoYW5nZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBleGNoYW5nZSAnJHt0aGlzLmV4Y2hhbmdlfSchYCk7XG4gICAgfVxuXG4gICAgLy8gV2VhbHRoU2ltcGxlIFRyYWRlIGRvZXNuJ3QgaGF2ZSBhIHNob3J0IGV4Y2hhbmdlIGlkICgnTkVPJykgZm9yXG4gICAgLy8gQUVRVUlUQVMgTkVPIEVYQ0hBTkdFIGZvciBzb21lIHJlYXNvbi4uLlxuICAgIC8vIFdlIGhhdmUgdG8gbWFwIGl0IHRvIHRoZSBmdWxsIG5hbWUgZm9yIGNvbXBhcmlzb25zIHRvIHdvcmsuXG4gICAgaWYgKHRoaXMuZXhjaGFuZ2UgPT09ICdORU8nKSB7XG4gICAgICB0aGlzLmV4Y2hhbmdlID0gJ0FFUVVJVEFTIE5FTyBFWENIQU5HRSc7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlZHVjZXMgdGhlIHRpY2tlciBvYmplY3QgdG8gYSBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gICAqL1xuICBmb3JtYXQoKSB7XG4gICAgaWYgKHRoaXMuaWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmlkO1xuICAgIH1cblxuICAgIC8vIFdlIG11c3QgcmV0cmFuc2xhdGUgdGhlIGZ1bGwgbmFtZSBvZiB0aGUgTkVPIGV4Y2hhbmdlIGJhY2sgdG8gTkVPXG4gICAgaWYgKHRoaXMuZXhjaGFuZ2UgPT09ICdBRVFVSVRBUyBORU8gRVhDSEFOR0UnKSB7XG4gICAgICByZXR1cm4gYCR7dGhpcy5zeW1ib2x9Ok5FT2A7XG4gICAgfVxuXG4gICAgcmV0dXJuIGAke3RoaXMuc3ltYm9sfSR7dGhpcy5leGNoYW5nZSA/IGA6JHt0aGlzLmV4Y2hhbmdlfWAgOiAnJ31gO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXBhcmVzIHN5bWJvbCBvciBpZCB3aXRoIGFub3RoZXIgdGlja2VyLiBUaGlzIGlzIHdlYWsgYmVjYXVzZVxuICAgKiBleGNoYW5nZSBpcyBub3QgY29tcGFyZWQgaGVyZSwgYWxsb3dpbmcgZm9yIGZhbHNlIHBvc2l0aXZlc1xuICAgKiBvZiBzeW1ib2xzIG9uIGRpZmZlcmVudCBleGNoYW5nZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGlja2VyIHRvIGNvbXBhcmUgdXMgd2l0aFxuICAgKi9cbiAgd2Vha0VxdWFscyhvdGhlcikge1xuICAgIGlmICh0aGlzLmlkICYmIHRoaXMuaWQgPT09IG90aGVyLmlkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zeW1ib2wgJiYgdGhpcy5zeW1ib2wgPT09IG90aGVyLnN5bWJvbCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRpY2tlcjtcbiIsImltcG9ydCBBUElDYWNoZSBmcm9tICcuLi9jb3JlL2NhY2hlJztcbmltcG9ydCBUaWNrZXIgZnJvbSAnLi4vY29yZS90aWNrZXInO1xuXG5jb25zdCBjYWNoZSA9IG5ldyBBUElDYWNoZSgxMCk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLyoqXG4gICAgICogUXVlcnkgdGhlIGNhY2hlIGZvciB0aGUgc2VjdXJpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHNlY3VyaXR5XG4gICAgICovXG4gIGdldChzZWN1cml0eSkge1xuICAgIC8vIE11c3QgZGlnZXN0IHRoZSBzZWN1cml0eSBpbnRvIHRoZSBzdGFuZGFyZCBmb3JtYXRcbiAgICBjb25zdCByZXN1bHQgPSBjYWNoZS5nZXQobmV3IFRpY2tlcihzZWN1cml0eSkuZm9ybWF0KCkpO1xuXG4gICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuXG4gIC8qKlxuICAgICAqIFJlbWVtYmVyIHRoZSBzZWN1cml0eSBmb3IgYSBmdXR1cmUgcXVpY2sgcmV0cmlldmFsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBrZXlcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgICovXG4gIGluc2VydChrZXksIHZhbHVlKSB7XG4gICAgY2FjaGUuaW5zZXJ0KG5ldyBUaWNrZXIoa2V5KS5mb3JtYXQoKSwgdmFsdWUpO1xuICB9LFxufTtcbiIsIi8qXG4gKiBBUElDYWNoZSBpcyBhbiBpbnRlcm5hbCBlZmZvcnQgdG8gbWluaW1pemUgdW5uZWNlc3NhcnkgQVBJIGNhbGxzIHdoZXJlXG4gKiBwb3NzaWJsZS4gQSBzcGVjaWZpYyB1c2VjYXNlIHdoZXJlIGEgY2FjaGUgaXMgdXNlZnVsIGlzIGZpZ3VyaW5nIG91dCB0aGVcbiAqIGV4Y2hhbmdlIGEgc2VjdXJpdHkgYmVsb25ncyB0by4gQSBjYWNoZSB3b3VsZCBhbGxvdyB1cyB0byBtZW1vcml6ZVxuICogdGhpcyBzdGF0aWMgZGF0YSBmb3IgYSBwZXJpb2Qgb2YgdGltZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSBBUEkgY2FsbHMuXG4gKlxuICogVGhlIGNsYXNzIGVuY2Fwc3VsYXRlcyB0aGUgZm9sbG93aW5nIGNhY2hlIGJlaGF2aW91cjpcbiAqIC0gQSBtYXhpbXVtIGVudHJpZXMgcHJvdmlkZWQgYXMgYSBjb25zdHJ1Y3RvciBhcmd1bWVudFxuICogLSBGaXJzdCBpbiwgRmlyc3Qgb3V0IChGSUZPKSBtb2RlbFxuICpcbiAqIFRoZSBpbnRlcm5lbCBkYXRhIHN0cnVjdHVyZSBpcyBhIEhhc2hTZXQsIHNvIGxvb2t1cCB0aW1lIGNvc3QgaXMgZmFpcmx5XG4gKiBtaW5pbWFsLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBUElDYWNoZSB7XG4gIGNvbnN0cnVjdG9yKHNpemUpIHtcbiAgICB0aGlzLmNhY2hlID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gIH1cblxuICAvKipcbiAgICAgKiBTdG9yZSB0aGUga2V5LXZhbHVlIHBhaXIgaW50byB0aGlzIGNhY2hlLiBUaGUgb2xkZXN0IGVudHJ5IGlzIGV2aWN0ZWQgaWZcbiAgICAgKiB3ZSdyZSBvdXQgb2Ygc3BhY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IGtleVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKi9cbiAgaW5zZXJ0KGtleSwgdmFsdWUpIHtcbiAgICBpZiAodGhpcy5jYWNoZS5zaXplID49IHRoaXMuc2l6ZSkge1xuICAgICAgdGhpcy5jYWNoZS5kZWxldGUodGhpcy5jYWNoZS5rZXlzKCkubmV4dCgpLnZhbHVlKTtcbiAgICB9XG5cbiAgICB0aGlzLmNhY2hlLnNldChrZXksIHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgICAqIFJldHJpZXZlIHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhc3NvY2lhdGVkIHdpdGggdGhlIGtleS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0ga2V5XG4gICAgICovXG4gIGdldChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZS5nZXQoa2V5KTtcbiAgfVxufVxuIiwiaW1wb3J0IGVuZHBvaW50cyBmcm9tICcuL2FwaS9lbmRwb2ludHMnO1xuaW1wb3J0IGhhbmRsZVJlcXVlc3QgZnJvbSAnLi9uZXR3b3JrL2h0dHBzJztcbmltcG9ydCBUaWNrZXIgZnJvbSAnLi9jb3JlL3RpY2tlcic7XG5pbXBvcnQgeyBjb25maWdFbmFibGVkIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IGNhY2hlIGZyb20gJy4vb3B0aW9uYWwvc2VjdXJpdGllcy1jYWNoZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAvKipcbiAgICogQSBzbmFwc2hvdCBvZiB0aGUgY3VycmVudCBVU0QvQ0FEIGV4Y2hhbmdlIHJhdGVzIG9uIHRoZSBXZWFsdGhTaW1wbGUgVHJhZGVcbiAgICogcGxhdGZvcm0uXG4gICAqL1xuICBleGNoYW5nZVJhdGVzOiBhc3luYyAoKSA9PiBoYW5kbGVSZXF1ZXN0KGVuZHBvaW50cy5FWENIQU5HRV9SQVRFUywge30pLFxuXG4gIC8qKlxuICAgKiBJbmZvcm1hdGlvbiBhYm91dCBhIHNlY3VyaXR5IG9uIHRoZSBXZWFsdGhTaW1wbGUgVHJhZGUgUGxhdGZvcm0uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gdGlja2VyIFRoZSBzZWN1cml0eSBzeW1ib2wuIEFuIGV4Y2hhbmdlIG1heSBiZSBhZGRlZCBhcyBhIHN1ZmZpeCwgc2VwYXJhdGVkIGZyb21cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHN5bWJvbCB3aXRoIGEgY29sb24sIGZvciBleGFtcGxlOiBBQVBMOk5BU0RBUSwgRU5COlRTWFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGV4dGVuc2l2ZSBQdWxscyBhIG1vcmUgZGV0YWlsZWQgcmVwb3J0IG9mIHRoZSBzZWN1cml0eSB1c2luZyB0aGVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgL3NlY3VyaXRpZXMve2lkfSBBUElcbiAgICovXG4gIGdldFNlY3VyaXR5OiBhc3luYyAodGlja2VyLCBleHRlbnNpdmUpID0+IHtcbiAgICBsZXQgcmVzdWx0ID0gbnVsbDtcblxuICAgIC8vIFJ1biBzb21lIHZhbGlkYXRpb24gb24gdGhlIHRpY2tlclxuICAgIHRpY2tlciA9IG5ldyBUaWNrZXIodGlja2VyKTtcblxuICAgIGlmICghZXh0ZW5zaXZlICYmIGNvbmZpZ0VuYWJsZWQoJ3NlY3VyaXRpZXNfY2FjaGUnKSkge1xuICAgICAgcmVzdWx0ID0gY2FjaGUuZ2V0KHRpY2tlcik7XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRpY2tlci5pZCkge1xuICAgICAgLy8gV2Ugd2lsbCBpbW1lZGlhdGVseSBjYWxsIHRoZSBleHRlbnNpdmUgZGV0YWlscyBBUEkgc2luY2Ugd2UgaGF2ZSB0aGUgdW5pcXVlIGlkLlxuICAgICAgcmVzdWx0ID0gYXdhaXQgaGFuZGxlUmVxdWVzdChlbmRwb2ludHMuRVhURU5TSVZFX1NFQ1VSSVRZX0RFVEFJTFMsIHsgaWQ6IHRpY2tlci5pZCB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gYXdhaXQgaGFuZGxlUmVxdWVzdChlbmRwb2ludHMuU0VDVVJJVFksIHsgdGlja2VyOiB0aWNrZXIuc3ltYm9sIH0pO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0LmZpbHRlcigoc2VjdXJpdHkpID0+IHNlY3VyaXR5LnN0b2NrLnN5bWJvbCA9PT0gdGlja2VyLnN5bWJvbCk7XG5cbiAgICAgIGlmICh0aWNrZXIuZXhjaGFuZ2UpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmZpbHRlcigoc2VjdXJpdHkpID0+IHNlY3VyaXR5LnN0b2NrLnByaW1hcnlfZXhjaGFuZ2UgPT09IHRpY2tlci5leGNoYW5nZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXN1bHQubGVuZ3RoID4gMSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoeyByZWFzb246ICdNdWx0aXBsZSBzZWN1cml0aWVzIG1hdGNoZWQgcXVlcnkuJyB9KTtcbiAgICAgIH0gaWYgKHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHsgcmVhc29uOiAnTm8gc2VjdXJpdGllcyBtYXRjaGVkIHF1ZXJ5LicgfSk7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCA9IHJlc3VsdFswXTtcblxuICAgICAgaWYgKGV4dGVuc2l2ZSkge1xuICAgICAgICAvLyBUaGUgY2FsbGVyIGhhcyBvcHRlZCB0byByZWNlaXZlIHRoZSBleHRlbnNpdmUgZGV0YWlscyBhYm91dCB0aGUgc2VjdXJpdHkuXG4gICAgICAgIHJlc3VsdCA9IGF3YWl0IGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLkVYVEVOU0lWRV9TRUNVUklUWV9ERVRBSUxTLCB7IGlkOiByZXN1bHQuaWQgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZ0VuYWJsZWQoJ3NlY3VyaXRpZXNfY2FjaGUnKSAmJiBjYWNoZS5nZXQodGlja2VyKSA9PT0gbnVsbCkge1xuICAgICAgY2FjaGUuaW5zZXJ0KHRpY2tlciwgcmVzdWx0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxufTtcbiIsImltcG9ydCB7IEhlYWRlcnMgfSBmcm9tICdub2RlLWZldGNoJztcblxuY29uc3QgY3VzdG9tSGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAvKipcbiAgICogQXBwZW5kcyBhIGhlYWRlciBuYW1lLXZhbHVlIHBhaXIgdG8gYWxsIHJlcXVlc3RzLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IG5hbWUgSGVhZGVyIGtleVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIEhlYWRlciB2YWx1ZVxuICAgKi9cbiAgYWRkOiAobmFtZSwgdmFsdWUpID0+IGN1c3RvbUhlYWRlcnMuYXBwZW5kKG5hbWUsIHZhbHVlKSxcblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGN1c3RvbSBoZWFkZXIgZnJvbSBhbGwgcmVxdWVzdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gbmFtZSBIZWFkZXIga2V5XG4gICAqL1xuICByZW1vdmU6IChuYW1lKSA9PiBjdXN0b21IZWFkZXJzLmRlbGV0ZShuYW1lKSxcblxuICAvKipcbiAgICogQ2xlYXJzIGFsbCBjdXN0b20gaGVhZGVycy5cbiAgICovXG4gIGNsZWFyOiAoKSA9PiBbLi4uY3VzdG9tSGVhZGVyc10uZm9yRWFjaCgoaGVhZGVyKSA9PiBjdXN0b21IZWFkZXJzLmRlbGV0ZShoZWFkZXJbMF0pKSxcblxuICAvKipcbiAgICogUHJvZHVjZXMgYSBsaXN0IG9mIGN1c3RvbSBoZWFkZXJzLlxuICAgKi9cbiAgdmFsdWVzOiAoKSA9PiBbLi4uY3VzdG9tSGVhZGVyc10sXG59O1xuIiwicmVxdWlyZSgnc291cmNlLW1hcC1zdXBwb3J0JykuaW5zdGFsbCgpO1xuXG5jb25zdCBhdXRoID0gcmVxdWlyZSgnLi9hdXRoJykuZGVmYXVsdDtcbmNvbnN0IGhlYWRlcnMgPSByZXF1aXJlKCcuL2hlYWRlcnMnKS5kZWZhdWx0O1xuY29uc3QgYWNjb3VudHMgPSByZXF1aXJlKCcuL2FjY291bnRzJykuZGVmYXVsdDtcbmNvbnN0IG9yZGVycyA9IHJlcXVpcmUoJy4vb3JkZXJzJykuZGVmYXVsdDtcbmNvbnN0IGRhdGEgPSByZXF1aXJlKCcuL2RhdGEnKS5kZWZhdWx0O1xuY29uc3QgcXVvdGVzID0gcmVxdWlyZSgnLi9xdW90ZXMnKS5kZWZhdWx0O1xuY29uc3QgY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKS5kZWZhdWx0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXV0aCxcbiAgaGVhZGVycyxcbiAgYWNjb3VudHMsXG4gIG9yZGVycyxcbiAgcXVvdGVzLFxuICBkYXRhLFxuICBjb25maWcsXG59O1xuIiwiLyoqXG4gKiBDb21wdXRlcyB0aGUgY3VycmVudCB0aW1lIGluIGVwb2NoIHNlY29uZHMuXG4gKi9cbmV4cG9ydCBjb25zdCBlcG9jaFNlY29uZHMgPSAoKSA9PiBwYXJzZUludChEYXRlLm5vdygpIC8gMTAwMCwgMTApO1xuIiwiaW1wb3J0IHsgZXBvY2hTZWNvbmRzIH0gZnJvbSAnLi4vaGVscGVycy90aW1lJztcbmltcG9ydCBhdXRoIGZyb20gJy4uL2F1dGgnO1xuXG4vKlxuICogVmFsaWRhdGUgdGhlIGF1dGggdG9rZW4gZm9yIGV4cGlyeSwgYXR0ZW1wdGluZyB0byByZWZyZXNoIGl0XG4gKiBpZiB3ZSBoYXZlIHRoZSByZWZyZXNoIHRva2VuLlxuICovXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBpbXBsaWNpdFRva2VuUmVmcmVzaCgpIHtcbiAgaWYgKGVwb2NoU2Vjb25kcygpID49IGF1dGgudG9rZW5zPy5leHBpcmVzKSB7XG4gICAgaWYgKGF1dGgudG9rZW5zPy5yZWZyZXNoKSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBMZXQncyBpbXBsaWNpdGx5IHJlZnJlc2ggdGhlIGFjY2VzcyB0b2tlbiB1c2luZyB0aGUgcmVmcmVzaCB0b2tlbi5cbiAgICAgICAgYXdhaXQgYXV0aC5yZWZyZXNoKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBUaGUgcmVmcmVzaCB0b2tlbiBpcyBub3QgdmFsaWQuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgVW5hYmxlIHRvIHJlZnJlc2ggZXhwaXJlZCB0b2tlbjogJHtlcnJvcn1gKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2UgYXJlIGZvcmNlZCB0byByZWplY3QgYXMgb3VyIGFjY2VzcyB0b2tlbiBoYXMgZXhwaXJlZCBhbmQgd2VcbiAgICAgIC8vIGRvIG5vdCBoYXZlIGEgcmVmcmVzaCB0b2tlbi5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnQWNjZXNzIHRva2VuIGV4cGlyZWQnKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBmZXRjaCwgeyBIZWFkZXJzIH0gZnJvbSAnbm9kZS1mZXRjaCc7XG5pbXBvcnQgc3RhdHVzIGZyb20gJ2h0dHAtc3RhdHVzJztcbmltcG9ydCBjdXN0b21IZWFkZXJzIGZyb20gJy4uL2hlYWRlcnMnO1xuaW1wb3J0IGF1dGggZnJvbSAnLi4vYXV0aCc7XG5pbXBvcnQgeyBjb25maWdFbmFibGVkIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCBpbXBsaWNpdFRva2VuUmVmcmVzaCBmcm9tICcuLi9vcHRpb25hbC9pbXBsaWNpdC10b2tlbi1yZWZyZXNoJztcblxuLypcbiAqIENvbXBsZXRlIHRoZSBVUkwgYnkgZmlsbGluZyB0aGUgcGFyYW1ldGVyIHBsYWNlaG9sZGVycyB3aXRoIHRoZVxuICogZGF0YSBhcmd1bWVudHMuXG4gKi9cbmZ1bmN0aW9uIGZpbmFsaXplUmVxdWVzdChlbmRwb2ludCwgZGF0YSkge1xuICAvLyBNYWtlIGEgY29weSBzbyB3ZSBkb24ndCBtb2RpZnkgdGhlIG9yaWdpbmFsIG9uZS5cbiAgZGF0YSA9IHsgLi4uZGF0YSB9O1xuXG4gIGxldCB7IHVybCB9ID0gZW5kcG9pbnQ7XG5cbiAgLy8gTm8gbmVlZCB0byBkbyBhbnl0aGluZyBpZiB0aGUgVVJMIGlzIHN0YXRpYyAobm8gcGFyYW1ldGVycylcbiAgaWYgKGVuZHBvaW50LnBhcmFtZXRlcnMpIHtcbiAgICAvLyBTd2FwIGFsbCB0aGUgcGFyYW1ldGVyIHBsYWNlaG9sZGVycyB3aXRoIHRoZSBhcmd1bWVudHMuXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IE9iamVjdC5rZXlzKGVuZHBvaW50LnBhcmFtZXRlcnMpLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGRhdGFbZW5kcG9pbnQucGFyYW1ldGVyc1tpbmRleF1dID09PSBudWxsIHx8IGRhdGFbZW5kcG9pbnQucGFyYW1ldGVyc1tpbmRleF1dID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVUkwgUGF0aCBwYXJhbWV0ZXIgbWlzc2luZycpO1xuICAgICAgfVxuXG4gICAgICB1cmwgPSB1cmwucmVwbGFjZShgeyR7aW5kZXh9fWAsIGRhdGFbZW5kcG9pbnQucGFyYW1ldGVyc1tpbmRleF1dKTtcblxuICAgICAgLy8gTXVzdCByZW1vdmUgdGhpcyBrZXkgZnJvbSB0aGUgcGF5bG9hZCBhcyBpdCBoYXMgYmVlbiBjb25zdW1lZCBieSB0aGUgVVJMXG4gICAgICBkZWxldGUgZGF0YVtlbmRwb2ludC5wYXJhbWV0ZXJzW2luZGV4XV07XG4gICAgfVxuICB9XG5cbiAgLy8gTm8gcGF5bG9hZCBhdHRhY2hlZCB0byBHRVQvREVMRVRFIHJlcXVlc3RzXG4gIGlmIChbJ0dFVCcsICdIRUFEJ10uaW5jbHVkZXMoZW5kcG9pbnQubWV0aG9kKSkge1xuICAgIHJldHVybiB7IHVybCwgcGF5bG9hZDogdW5kZWZpbmVkIH07XG4gIH1cblxuICByZXR1cm4geyB1cmwsIHBheWxvYWQ6IEpTT04uc3RyaW5naWZ5KGRhdGEpIH07XG59XG5cbi8qXG4gKiBJbXBsZW1lbnRzIHRoZSBuZXR3b3JrIGxldmVsIHByb3RvY29sIGZvciB0YWxraW5nIHRvIHRoZVxuICogV2VhbHRoU2ltcGxlIFRyYWRlIEhUVFBTIEFQSS5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gdGFsayhlbmRwb2ludCwgZGF0YSkge1xuICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgaGVhZGVycy5hcHBlbmQoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG5cbiAgaWYgKGF1dGgudG9rZW5zPy5hY2Nlc3MpIHtcbiAgICAvLyBXZSB3b24ndCBhdHRlbXB0IHRvIGltcGxpY2l0bHkgcmVmcmVzaCBpZiB0aGUgdXNlciBoYXMgcmVxdWVzdGVkXG4gICAgLy8gdGhpcy5cbiAgICBpZiAoY29uZmlnRW5hYmxlZCgnaW1wbGljaXRfdG9rZW5fcmVmcmVzaCcpKSB7XG4gICAgICBhd2FpdCBpbXBsaWNpdFRva2VuUmVmcmVzaCgpO1xuICAgIH1cblxuICAgIGhlYWRlcnMuYXBwZW5kKCdBdXRob3JpemF0aW9uJywgYXV0aC50b2tlbnMuYWNjZXNzKTtcbiAgfVxuXG4gIC8vIEFwcGx5IGFsbCBjdXN0b20gaGVhZGVyc1xuICBjdXN0b21IZWFkZXJzLnZhbHVlcygpLmZvckVhY2goKGhlYWRlcikgPT4gaGVhZGVycy5hcHBlbmQoLi4uaGVhZGVyKSk7XG5cbiAgLy8gZmlsbCBwYXRoIGFuZCBxdWVyeSBwYXJhbWV0ZXJzIGluIHRoZSBVUkxcbiAgY29uc3QgeyB1cmwsIHBheWxvYWQgfSA9IGZpbmFsaXplUmVxdWVzdChlbmRwb2ludCwgZGF0YSk7XG5cbiAgcmV0dXJuIGZldGNoKHVybCwge1xuICAgIGJvZHk6IHBheWxvYWQsXG4gICAgbWV0aG9kOiBlbmRwb2ludC5tZXRob2QsXG4gICAgaGVhZGVycyxcbiAgfSk7XG59XG5cbi8qXG4gKiBGdWxmaWxsIHRoZSBlbmRwb2ludCByZXF1ZXN0IGdpdmVuIHRoZSBlbmRwb2ludCBjb25maWd1cmF0aW9uLCBvcHRpb25hbFxuICogZGF0YS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlUmVxdWVzdChlbmRwb2ludCwgZGF0YSkge1xuICB0cnkge1xuICAgIC8vIFN1Ym1pdCB0aGUgSFRUUCByZXF1ZXN0IHRvIHRoZSBXZWFsdGhTaW1wbGUgVHJhZGUgU2VydmVyc1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGFsayhlbmRwb2ludCwgZGF0YSk7XG5cbiAgICBpZiAoW3N0YXR1cy5PSywgc3RhdHVzLkNSRUFURURdLmluY2x1ZGVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICAgIHJldHVybiBlbmRwb2ludC5vblN1Y2Nlc3MocmVzcG9uc2UpO1xuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChhd2FpdCBlbmRwb2ludC5vbkZhaWx1cmUocmVzcG9uc2UpKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBUaGlzIGlzIGxpa2VseSBhIG5ldHdvcmsgZXJyb3I7IHRocm93IGl0IHRvIHRoZSBjYWxsZXIgdG8gZGVhbCB3aXRoLlxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG4iLCJpbXBvcnQgZW5kcG9pbnRzLCB7IE9SREVSU19QRVJfUEFHRSB9IGZyb20gJy4uL2FwaS9lbmRwb2ludHMnO1xuaW1wb3J0IGhhbmRsZVJlcXVlc3QgZnJvbSAnLi4vbmV0d29yay9odHRwcyc7XG5pbXBvcnQgVGlja2VyIGZyb20gJy4uL2NvcmUvdGlja2VyJztcblxuLyoqXG4gKiBDb2xsZWN0cyBvcmRlcnMgKGZpbGxlZCwgcGVuZGluZywgY2FuY2VsbGVkKSBmb3IgdGhlIHByb3ZpZGVkIHBhZ2UgYW5kXG4gKiBhY2NvdW50IGlkLlxuICpcbiAqIEBwYXJhbSB7Kn0gYWNjb3VudElkIFRoZSBzcGVjaWZpYyBhY2NvdW50IGluIHRoZSBXZWFsdGhTaW1wbGUgVHJhZGUgYWNjb3VudFxuICogQHBhcmFtIHsqfSBwYWdlTnVtIFRoZSBvcmRlcnMgcGFnZSBpbmRleCB0byBzZWVrIHRvXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHBhZ2UoYWNjb3VudElkLCBwYWdlTnVtKSB7XG4gIHJldHVybiBoYW5kbGVSZXF1ZXN0KGVuZHBvaW50cy5PUkRFUlNfQllfUEFHRSwge1xuICAgIG9mZnNldDogKHBhZ2VOdW0gLSAxKSAqIE9SREVSU19QRVJfUEFHRSxcbiAgICBhY2NvdW50SWQsXG4gIH0pO1xufVxuXG4vKipcbiAqIENvbGxlY3RzIGFsbCBvcmRlcnMgKGZpbGxlZCwgcGVuZGluZywgY2FuY2VsbGVkKSBmb3IgdGhlIHNwZWNpZmljIGFjY291bnQuXG4gKlxuICogQHBhcmFtIHsqfSBhY2NvdW50SWQgVGhlIHNwZWNpZmljIGFjY291bnQgaW4gdGhlIFdlYWx0aFNpbXBsZSBUcmFkZSBhY2NvdW50XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGFsbChhY2NvdW50SWQpIHtcbiAgLy8gV2Ugc3RhcnQgYnkgY2FwdHVyaW5nIHRoZSBmaXJzdCBwYWdlIG9mIG9yZGVycyBpbiBvcmRlciB0b1xuICAvLyBkZXRlcm1pbmUgdGhlIG51bWJlciBvZiBwYWdlcyBhdmFpbGFibGVcbiAgY29uc3QgZGF0YSA9IGF3YWl0IHBhZ2UoYWNjb3VudElkLCAxKTtcbiAgY29uc3QgcGFnZXMgPSBNYXRoLmNlaWwoZGF0YS50b3RhbCAvIE9SREVSU19QRVJfUEFHRSk7XG5cbiAgaWYgKHBhZ2VzID4gMSkge1xuICAgIGNvbnN0IHRhc2tzID0gW107XG5cbiAgICAvLyBCdWlsZCB0aGUgdGFzayBxdWV1ZSB0aGF0IHdpbGwgcmV0cmlldmUgdGhlIHJlbWFpbmluZyBwYWdlcyBvZiBvcmRlcnNcbiAgICBmb3IgKGxldCBwYWdlTnVtID0gMjsgcGFnZU51bSA8PSBwYWdlczsgcGFnZU51bSsrKSB7XG4gICAgICB0YXNrcy5wdXNoKHBhZ2UoYWNjb3VudElkLCBwYWdlTnVtKS50aGVuKChyZXN1bHQpID0+IHJlc3VsdC5vcmRlcnMpKTtcbiAgICB9XG5cbiAgICAvLyBPdXQtb2Ytb3JkZXIgaW52b2NhdGlvbiBpcyBkZXNpcmVkLiBXaGF0IG1hdHRlcnMgaXMgdGhhdCBQcm9taXNlLmFsbCB3aWxsXG4gICAgLy8gZ3VhcmFudGVlIHRoYXQgdGhlIGRhdGEgb3JkZXIgaXMgcHJlc2VydmVkLlxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFByb21pc2UuYWxsKHRhc2tzKTtcbiAgICByZXN1bHQuZm9yRWFjaCgobGlzdCkgPT4gZGF0YS5vcmRlcnMucHVzaCguLi5saXN0KSk7XG5cbiAgICAvLyBVcGRhdGUgdGhlIHRvdGFsIGF0dHJpYnV0ZSB0byByZWZsZWN0IHRoZSBuZXcgc2l6ZVxuICAgIGRhdGEudG90YWwgPSBkYXRhLm9yZGVycy5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLypcbiAqIFJldHJpZXZlIGZpbHRlcmVkIG9yZGVycyBieSB0aWNrZXIgYW5kIHN0YXR1cy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZmlsdGVyZWRPcmRlcnMoYWNjb3VudElkLCB0aWNrZXIsIHN0YXR1cykge1xuICAvLyBGZXRjaCBhbGwgb3JkZXJzXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFsbChhY2NvdW50SWQpO1xuXG4gIGNvbnN0IG9yZGVyRmlsdGVyID0gKG9yZGVyKSA9PiB7XG4gICAgaWYgKHRpY2tlcikge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gbmV3IFRpY2tlcih7IHN5bWJvbDogb3JkZXIuc3ltYm9sLCBpZDogb3JkZXIuc2VjdXJpdHlfaWQgfSk7XG4gICAgICAvLyBvcmRlciBvYmplY3RzIGRvbid0IGluY2x1ZGUgZXhjaGFuZ2VzLCBzbyB3ZSBhcmUgdW5hYmxlIHRvIG1ha2VcbiAgICAgIC8vIGEgc3Ryb25nIGNvbXBhcmlzb24gd2l0aG91dCByZXF1aXJpbmcgYSBsaW5lYXIgaW5jcmVhc2Ugb2ZcbiAgICAgIC8vIGVuZHBvaW50IGNhbGxzICh3aGljaCBpcyBub3QgcmVhc29uYWJsZSkuXG4gICAgICAvL1xuICAgICAgLy8gVGhlIHVzZXIgc2hvdWxkIHByb3ZpZGUgdGhlIHNlY3VyaXR5IGlkIGZvciBhIHN0cm9uZyBjb21wYXJpc29uIGhlcmUuXG4gICAgICBpZiAoIW5ldyBUaWNrZXIodGlja2VyKS53ZWFrRXF1YWxzKHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvcmRlci5zdGF0dXMgPT09IHN0YXR1cztcbiAgfTtcblxuICAvLyBBcHBseSBmaWx0ZXIgdG8gdGhlIHJlc3VsdFxuICByZXN1bHQub3JkZXJzID0gcmVzdWx0Lm9yZGVycy5maWx0ZXIob3JkZXJGaWx0ZXIpO1xuICByZXN1bHQudG90YWwgPSByZXN1bHQub3JkZXJzLmxlbmd0aDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gIHBhZ2UsXG4gIGFsbCxcblxuICAvKipcbiAgICogUmV0cmlldmVzIHBlbmRpbmcgb3JkZXJzIGZvciB0aGUgc3BlY2lmaWVkIHNlY3VyaXR5IGluIHRoZSBhY2NvdW50LlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGFjY291bnRJZCBUaGUgc3BlY2lmaWMgYWNjb3VudCBpbiB0aGUgV2VhbHRoU2ltcGxlIFRyYWRlIGFjY291bnRcbiAgICogQHBhcmFtIHsqfSB0aWNrZXIgKG9wdGlvbmFsKSBUaGUgc2VjdXJpdHkgc3ltYm9sXG4gICAqL1xuICBwZW5kaW5nOiBhc3luYyAoYWNjb3VudElkLCB0aWNrZXIpID0+IGZpbHRlcmVkT3JkZXJzKGFjY291bnRJZCwgdGlja2VyLCAnc3VibWl0dGVkJyksXG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBmaWxsZWQgb3JkZXJzIGZvciB0aGUgc3BlY2lmaWVkIHNlY3VyaXR5IGluIHRoZSBhY2NvdW50LlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGFjY291bnRJZCBUaGUgc3BlY2lmaWMgYWNjb3VudCBpbiB0aGUgV2VhbHRoU2ltcGxlIFRyYWRlIGFjY291bnRcbiAgICogQHBhcmFtIHsqfSB0aWNrZXIgKG9wdGlvbmFsKSBUaGUgc2VjdXJpdHkgc3ltYm9sXG4gICAqL1xuICBmaWxsZWQ6IGFzeW5jIChhY2NvdW50SWQsIHRpY2tlcikgPT4gZmlsdGVyZWRPcmRlcnMoYWNjb3VudElkLCB0aWNrZXIsICdwb3N0ZWQnKSxcblxuICAvKipcbiAgICogUmV0cmlldmVzIGNhbmNlbGxlZCBvcmRlcnMgZm9yIHRoZSBzcGVjaWZpZWQgc2VjdXJpdHkgaW4gdGhlIGFjY291bnQuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gYWNjb3VudElkIFRoZSBzcGVjaWZpYyBhY2NvdW50IGluIHRoZSBXZWFsdGhTaW1wbGUgVHJhZGUgYWNjb3VudFxuICAgKiBAcGFyYW0geyp9IHRpY2tlciAob3B0aW9uYWwpIFRoZSBzZWN1cml0eSBzeW1ib2xcbiAgICovXG4gIGNhbmNlbGxlZDogYXN5bmMgKGFjY291bnRJZCwgdGlja2VyKSA9PiBmaWx0ZXJlZE9yZGVycyhhY2NvdW50SWQsIHRpY2tlciwgJ2NhbmNlbGxlZCcpLFxufTtcbiIsImltcG9ydCBlbmRwb2ludHMgZnJvbSAnLi4vYXBpL2VuZHBvaW50cyc7XG5pbXBvcnQgaGFuZGxlUmVxdWVzdCBmcm9tICcuLi9uZXR3b3JrL2h0dHBzJztcbmltcG9ydCBoaXN0b3J5IGZyb20gJy4vaGlzdG9yeSc7XG5pbXBvcnQgZGF0YSBmcm9tICcuLi9kYXRhJztcbmltcG9ydCBxdW90ZXMgZnJvbSAnLi4vcXVvdGVzJztcblxuY29uc3QgaXNDYW5hZGlhblNlY3VyaXR5ID0gKGV4Y2hhbmdlKSA9PiBbJ1RTWCcsICdUU1gtViddLmluY2x1ZGVzKGV4Y2hhbmdlKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gIC8qKlxuICAgKiBDYW5jZWxzIHRoZSBwZW5kaW5nIG9yZGVyIHNwZWNpZmllZCBieSB0aGUgb3JkZXIgaWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gb3JkZXJJZCBUaGUgcGVuZGluZyBvcmRlciB0byBjYW5jZWxcbiAgICovXG4gIGNhbmNlbDogYXN5bmMgKG9yZGVySWQpID0+ICh7XG4gICAgb3JkZXI6IG9yZGVySWQsXG4gICAgcmVzcG9uc2U6IGF3YWl0IGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLkNBTkNFTF9PUkRFUiwgeyBvcmRlcklkIH0pLFxuICB9KSxcblxuICAvKipcbiAgICogQ2FuY2VscyBhbGwgcGVuZGluZyBvcmRlcnMgdW5kZXIgdGhlIFdlYWx0aFNpbXBsZSBUcmFkZSBBY2NvdW50LlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGFjY291bnRJZCBUaGUgc3BlY2lmaWMgYWNjb3VudCBpbiB0aGUgV2VhbHRoU2ltcGxlIFRyYWRlIGFjY291bnRcbiAgICovXG4gIGFzeW5jIGNhbmNlbFBlbmRpbmcoYWNjb3VudElkKSB7XG4gICAgY29uc3QgcGVuZGluZyA9IGF3YWl0IGhpc3RvcnkucGVuZGluZyhhY2NvdW50SWQpO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChwZW5kaW5nLm9yZGVycy5tYXAoYXN5bmMgKG9yZGVyKSA9PiB0aGlzLmNhbmNlbChvcmRlci5vcmRlcl9pZCkpKTtcbiAgfSxcblxuICAvKipcbiAgICogTWFya2V0IGJ1eSBhIHNlY3VyaXR5IHRocm91Z2ggdGhlIFdlYWx0aFNpbXBsZSBUcmFkZSBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBhY2NvdW50SWQgVGhlIGFjY291bnQgdG8gbWFrZSB0aGUgdHJhbnNhY3Rpb24gZnJvbVxuICAgKiBAcGFyYW0geyp9IHRpY2tlciBUaGUgc2VjdXJpdHkgc3ltYm9sXG4gICAqIEBwYXJhbSB7Kn0gcXVhbnRpdHkgVGhlIG51bWJlciBvZiBzZWN1cml0aWVzIHRvIHB1cmNoYXNlXG4gICAqL1xuICBtYXJrZXRCdXk6IGFzeW5jIChhY2NvdW50SWQsIHRpY2tlciwgcXVhbnRpdHkpID0+IHtcbiAgICBjb25zdCBkZXRhaWxzID0gYXdhaXQgZGF0YS5nZXRTZWN1cml0eSh0aWNrZXIpO1xuXG4gICAgcmV0dXJuIGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLlBMQUNFX09SREVSLCB7XG4gICAgICBzZWN1cml0eV9pZDogZGV0YWlscy5pZCxcbiAgICAgIGxpbWl0X3ByaWNlOiBhd2FpdCBxdW90ZXMuZ2V0KHRpY2tlciksXG4gICAgICBxdWFudGl0eSxcbiAgICAgIG9yZGVyX3R5cGU6ICdidXlfcXVhbnRpdHknLFxuICAgICAgb3JkZXJfc3ViX3R5cGU6ICdtYXJrZXQnLFxuICAgICAgdGltZV9pbl9mb3JjZTogJ2RheScsXG4gICAgICBhY2NvdW50X2lkOiBhY2NvdW50SWQsXG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIExpbWl0IGJ1eSBhIHNlY3VyaXR5IHRocm91Z2ggdGhlIFdlYWx0aFNpbXBsZSBUcmFkZSBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBhY2NvdW50SWQgVGhlIGFjY291bnQgdG8gbWFrZSB0aGUgdHJhbnNhY3Rpb24gZnJvbVxuICAgKiBAcGFyYW0geyp9IHRpY2tlciBUaGUgc2VjdXJpdHkgc3ltYm9sXG4gICAqIEBwYXJhbSB7Kn0gbGltaXQgVGhlIG1heGltdW0gcHJpY2UgdG8gcHVyY2hhc2UgdGhlIHNlY3VyaXR5IGF0XG4gICAqIEBwYXJhbSB7Kn0gcXVhbnRpdHkgVGhlIG51bWJlciBvZiBzZWN1cml0aWVzIHRvIHB1cmNoYXNlXG4gICAqL1xuICBsaW1pdEJ1eTogYXN5bmMgKGFjY291bnRJZCwgdGlja2VyLCBsaW1pdCwgcXVhbnRpdHkpID0+IGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLlBMQUNFX09SREVSLCB7XG4gICAgc2VjdXJpdHlfaWQ6IChhd2FpdCBkYXRhLmdldFNlY3VyaXR5KHRpY2tlcikpLmlkLFxuICAgIGxpbWl0X3ByaWNlOiBsaW1pdCxcbiAgICBxdWFudGl0eSxcbiAgICBvcmRlcl90eXBlOiAnYnV5X3F1YW50aXR5JyxcbiAgICBvcmRlcl9zdWJfdHlwZTogJ2xpbWl0JyxcbiAgICB0aW1lX2luX2ZvcmNlOiAnZGF5JyxcbiAgICBhY2NvdW50X2lkOiBhY2NvdW50SWQsXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBTdG9wIGxpbWl0IGJ1eSBhIHNlY3VyaXR5IHRocm91Z2ggdGhlIFdlYWx0aFNpbXBsZSBUcmFkZSBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBhY2NvdW50SWQgVGhlIGFjY291bnQgdG8gbWFrZSB0aGUgdHJhbnNhY3Rpb24gZnJvbVxuICAgKiBAcGFyYW0geyp9IHRpY2tlciBUaGUgc2VjdXJpdHkgc3ltYm9sXG4gICAqIEBwYXJhbSB7Kn0gc3RvcCBUaGUgcHJpY2UgYXQgd2hpY2ggdGhlIG9yZGVyIGNvbnZlcnRzIHRvIGEgbGltaXQgb3JkZXJcbiAgICogQHBhcmFtIHsqfSBsaW1pdCBUaGUgbWF4aW11bSBwcmljZSB0byBwdXJjaGFzZSB0aGUgc2VjdXJpdHkgYXRcbiAgICogQHBhcmFtIHsqfSBxdWFudGl0eSBUaGUgbnVtYmVyIG9mIHNlY3VyaXRpZXMgdG8gcHVyY2hhc2VcbiAgICovXG4gIHN0b3BMaW1pdEJ1eTogYXN5bmMgKGFjY291bnRJZCwgdGlja2VyLCBzdG9wLCBsaW1pdCwgcXVhbnRpdHkpID0+IHtcbiAgICBjb25zdCBzZWN1cml0eSA9IGF3YWl0IGRhdGEuZ2V0U2VjdXJpdHkodGlja2VyKTtcblxuICAgIC8vIFRoZSBXZWFsdGhTaW1wbGUgVHJhZGUgYmFja2VuZCBkb2Vzbid0IGNoZWNrIGZvciB0aGlzLCBldmVuIHRob3VnaCB0aGUgYXBwIGRvZXMuLlxuICAgIGlmIChpc0NhbmFkaWFuU2VjdXJpdHkoc2VjdXJpdHkuc3RvY2sucHJpbWFyeV9leGNoYW5nZSkgJiYgc3RvcCAhPT0gbGltaXQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh7IHJlYXNvbjogJ1RTWC9UU1gtViBzZWN1cml0aWVzIG11c3QgaGF2ZSBhbiBlcXVpdmFsZW50IHN0b3AgYW5kIGxpbWl0IHByaWNlLicgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLlBMQUNFX09SREVSLCB7XG4gICAgICBzZWN1cml0eV9pZDogc2VjdXJpdHkuaWQsXG4gICAgICBzdG9wX3ByaWNlOiBzdG9wLFxuICAgICAgbGltaXRfcHJpY2U6IGxpbWl0LFxuICAgICAgcXVhbnRpdHksXG4gICAgICBvcmRlcl90eXBlOiAnYnV5X3F1YW50aXR5JyxcbiAgICAgIG9yZGVyX3N1Yl90eXBlOiAnc3RvcF9saW1pdCcsXG4gICAgICB0aW1lX2luX2ZvcmNlOiAnZGF5JyxcbiAgICAgIGFjY291bnRfaWQ6IGFjY291bnRJZCxcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogTWFya2V0IHNlbGwgYSBzZWN1cml0eSB0aHJvdWdoIHRoZSBXZWFsdGhTaW1wbGUgVHJhZGUgYXBwbGljYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gYWNjb3VudElkIFRoZSBhY2NvdW50IHRvIG1ha2UgdGhlIHRyYW5zYWN0aW9uIGZyb21cbiAgICogQHBhcmFtIHsqfSB0aWNrZXIgVGhlIHNlY3VyaXR5IHN5bWJvbFxuICAgKiBAcGFyYW0geyp9IHF1YW50aXR5IFRoZSBudW1iZXIgb2Ygc2VjdXJpdGllcyB0byBwdXJjaGFzZVxuICAgKi9cbiAgbWFya2V0U2VsbDogYXN5bmMgKGFjY291bnRJZCwgdGlja2VyLCBxdWFudGl0eSkgPT4ge1xuICAgIGNvbnN0IGRldGFpbHMgPSBhd2FpdCBkYXRhLmdldFNlY3VyaXR5KHRpY2tlcik7XG5cbiAgICByZXR1cm4gaGFuZGxlUmVxdWVzdChlbmRwb2ludHMuUExBQ0VfT1JERVIsIHtcbiAgICAgIHNlY3VyaXR5X2lkOiBkZXRhaWxzLmlkLFxuICAgICAgbWFya2V0X3ZhbHVlOiBhd2FpdCBxdW90ZXMuZ2V0KHRpY2tlciksXG4gICAgICBxdWFudGl0eSxcbiAgICAgIG9yZGVyX3R5cGU6ICdzZWxsX3F1YW50aXR5JyxcbiAgICAgIG9yZGVyX3N1Yl90eXBlOiAnbWFya2V0JyxcbiAgICAgIHRpbWVfaW5fZm9yY2U6ICdkYXknLFxuICAgICAgYWNjb3VudF9pZDogYWNjb3VudElkLFxuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBMaW1pdCBzZWxsIGEgc2VjdXJpdHkgdGhyb3VnaCB0aGUgV2VhbHRoU2ltcGxlIFRyYWRlIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGFjY291bnRJZCBUaGUgYWNjb3VudCB0byBtYWtlIHRoZSB0cmFuc2FjdGlvbiBmcm9tXG4gICAqIEBwYXJhbSB7Kn0gdGlja2VyIFRoZSBzZWN1cml0eSBzeW1ib2xcbiAgICogQHBhcmFtIHsqfSBsaW1pdCBUaGUgbWluaW11bSBwcmljZSB0byBzZWxsIHRoZSBzZWN1cml0eSBhdFxuICAgKiBAcGFyYW0geyp9IHF1YW50aXR5IFRoZSBudW1iZXIgb2Ygc2VjdXJpdGllcyB0byBzZWxsXG4gICAqL1xuICBsaW1pdFNlbGw6IGFzeW5jIChhY2NvdW50SWQsIHRpY2tlciwgbGltaXQsIHF1YW50aXR5KSA9PiBoYW5kbGVSZXF1ZXN0KGVuZHBvaW50cy5QTEFDRV9PUkRFUiwge1xuICAgIHNlY3VyaXR5X2lkOiAoYXdhaXQgZGF0YS5nZXRTZWN1cml0eSh0aWNrZXIpKS5pZCxcbiAgICBsaW1pdF9wcmljZTogbGltaXQsXG4gICAgcXVhbnRpdHksXG4gICAgb3JkZXJfdHlwZTogJ3NlbGxfcXVhbnRpdHknLFxuICAgIG9yZGVyX3N1Yl90eXBlOiAnbGltaXQnLFxuICAgIHRpbWVfaW5fZm9yY2U6ICdkYXknLFxuICAgIGFjY291bnRfaWQ6IGFjY291bnRJZCxcbiAgfSksXG5cbiAgLyoqXG4gICAqIFN0b3AgbGltaXQgc2VsbCBhIHNlY3VyaXR5IHRocm91Z2ggdGhlIFdlYWx0aFNpbXBsZSBUcmFkZSBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBhY2NvdW50SWQgVGhlIGFjY291bnQgdG8gbWFrZSB0aGUgdHJhbnNhY3Rpb24gZnJvbVxuICAgKiBAcGFyYW0geyp9IHRpY2tlciBUaGUgc2VjdXJpdHkgc3ltYm9sXG4gICAqIEBwYXJhbSB7Kn0gc3RvcCBUaGUgcHJpY2UgYXQgd2hpY2ggdGhlIG9yZGVyIGNvbnZlcnRzIHRvIGEgbGltaXQgb3JkZXJcbiAgICogQHBhcmFtIHsqfSBsaW1pdCBUaGUgbWluaW11bSBwcmljZSB0byBzZWxsIHRoZSBzZWN1cml0eSBhdFxuICAgKiBAcGFyYW0geyp9IHF1YW50aXR5IFRoZSBudW1iZXIgb2Ygc2VjdXJpdGllcyB0byBzZWxsXG4gICAqL1xuICBzdG9wTGltaXRTZWxsOiBhc3luYyAoYWNjb3VudElkLCB0aWNrZXIsIHN0b3AsIGxpbWl0LCBxdWFudGl0eSkgPT4ge1xuICAgIGNvbnN0IHNlY3VyaXR5ID0gYXdhaXQgZGF0YS5nZXRTZWN1cml0eSh0aWNrZXIpO1xuXG4gICAgLy8gVGhlIFdlYWx0aFNpbXBsZSBUcmFkZSBiYWNrZW5kIGRvZXNuJ3QgY2hlY2sgZm9yIHRoaXMsIGV2ZW4gdGhvdWdoIHRoZSBhcHAgZG9lcy4uXG4gICAgaWYgKGlzQ2FuYWRpYW5TZWN1cml0eShzZWN1cml0eS5zdG9jay5wcmltYXJ5X2V4Y2hhbmdlKSAmJiBzdG9wICE9PSBsaW1pdCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHsgcmVhc29uOiAnVFNYL1RTWC1WIHNlY3VyaXRpZXMgbXVzdCBoYXZlIGFuIGVxdWl2YWxlbnQgc3RvcCBhbmQgbGltaXQgcHJpY2UuJyB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFuZGxlUmVxdWVzdChlbmRwb2ludHMuUExBQ0VfT1JERVIsIHtcbiAgICAgIHNlY3VyaXR5X2lkOiBzZWN1cml0eS5pZCxcbiAgICAgIHN0b3BfcHJpY2U6IHN0b3AsXG4gICAgICBsaW1pdF9wcmljZTogbGltaXQsXG4gICAgICBxdWFudGl0eSxcbiAgICAgIG9yZGVyX3R5cGU6ICdzZWxsX3F1YW50aXR5JyxcbiAgICAgIG9yZGVyX3N1Yl90eXBlOiAnc3RvcF9saW1pdCcsXG4gICAgICB0aW1lX2luX2ZvcmNlOiAnZGF5JyxcbiAgICAgIGFjY291bnRfaWQ6IGFjY291bnRJZCxcbiAgICB9KTtcbiAgfSxcbn07XG4iLCJpbXBvcnQgaGlzdG9yeSBmcm9tICcuL2hpc3RvcnknO1xuaW1wb3J0IHN1Ym1pdCBmcm9tICcuL3N1Ym1pdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLi4uaGlzdG9yeSxcbiAgLi4uc3VibWl0LFxufTtcbiIsIi8qKlxuICogVGhlIGRlZmF1bHQgcHJvdmlkZXIgZm9yIHF1b3RlcyBpcyBXZWFsdGhTaW1wbGUgVHJhZGUuXG4gKi9cblxuaW1wb3J0IGRhdGEgZnJvbSAnLi4vZGF0YSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAvKipcbiAgICAgKiBRdW90ZSBmb3IgYSB0aWNrZXIgZnJvbSB0aGUgV2VhbHRoU2ltcGxlIFRyYWRlIGVuZHBvaW50LlxuICAgICAqXG4gICAgICogUmVtZW1iZXIgdGhhdCB0aGlzIHF1b3RlIGlzIE5PVCByZWFsLXRpbWUhXG4gICAgICovXG4gIHF1b3RlOiBhc3luYyAodGlja2VyKSA9PiB7XG4gICAgY29uc3QgaW5mbyA9IGF3YWl0IGRhdGEuZ2V0U2VjdXJpdHkodGlja2VyLCB0cnVlKTtcbiAgICByZXR1cm4gaW5mby5xdW90ZS5hbW91bnQ7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHRyYWRlIGZyb20gJy4vZGVmYXVsdCc7XG5pbXBvcnQgZGF0YSBmcm9tICcuLi9kYXRhJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gIC8vIFdlYWx0aFNpbXBsZSBUcmFkZSBpcyBvdXIgZGVmYXVsdCBzb3VyY2UgZm9yIHF1b3RlcywgZGVzcGl0ZVxuICAvLyBoYXZpbmcgYSAxNSBtaW4gZGVsYXlcbiAgZGVmYXVsdFByb3ZpZGVyOiB0cmFkZSxcblxuICAvLyBNYWludGFpbnMgcXVvdGUgcHJvdmlkZXJzIG9uIGFuIGV4Y2hhbmdlIGJhc2lzXG4gIHByb3ZpZGVyczoge30sXG5cbiAgLyoqXG4gICAgICogTG9hZCBhIGN1c3RvbSBwcm92aWRlciBmb3IgdGhlIGV4Y2hhbmdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBleGNoYW5nZSBUaGUgZXhjaGFuZ2UgdGhhdCB0aGUgcHJvdmlkZXIgZmV0Y2hlcyBxdW90ZXMgZm9yXG4gICAgICogQHBhcmFtIHsqfSBwcm92aWRlciBUaGUgcHJvdmlkZXIgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHF1b3RlKCkgaW1wbGVtZW50YXRpb24uXG4gICAgICovXG4gIHVzZShleGNoYW5nZSwgcHJvdmlkZXIpIHtcbiAgICBpZiAodHlwZW9mIChwcm92aWRlci5xdW90ZSkgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIFRoZSBwcm92aWRlciBtdXN0IGhhdmUgYSBxdW90ZSgpIGltcGxlbWVudGF0aW9uIHRoYXQgd2UgY2FuIGNhbGwgbGF0ZXIhXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcXVvdGUgcHJvdmlkZXIgZm9yICR7ZXhjaGFuZ2V9IWApO1xuICAgIH1cblxuICAgIHRoaXMucHJvdmlkZXJzW2V4Y2hhbmdlXSA9IHByb3ZpZGVyO1xuICB9LFxuXG4gIC8qKlxuICAgICAqIE9idGFpbnMgYSBxdW90ZSBmb3IgdGhlIHRpY2tlci4gVGhlIHNvdXJjZSBvZiB0aGUgcXVvdGUgbWF5IGJlIGEgY3VzdG9tXG4gICAgICogcHJvdmlkZXIgaWYgYSB2YWxpZCBwcm92aWRlciBpcyByZWdpc3RlcmVkIGZvciB0aGUgZXhjaGFuZ2UgdGhhdCB0aGVcbiAgICAgKiB0aWNrZXIgdHJhZGVzIG9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB0aWNrZXIgVGhlIHNlY3VyaXR5IHRvIGdldCBhIHF1b3RlIGZvci5cbiAgICAgKi9cbiAgYXN5bmMgZ2V0KHRpY2tlcikge1xuICAgIGxldCBleGNoYW5nZSA9IG51bGw7XG5cbiAgICAvLyBXZSBuZWVkIHRoZSBleGNoYW5nZSBpbiB0aGUgbmV4dCBzdGVwIGlmIHRoZSB1c2VyIGhhcyBzcGVjaWZpZWRcbiAgICAvLyBhIGN1c3RvbSBwcm92aWRlciBmb3IgYW4gZXhjaGFuZ2UuIFNvIGlmIHRoZSB1c2VyIGhhc24ndCBwcm92aWRlZFxuICAgIC8vIGl0LCB3ZSB3aWxsIGhhdmUgdG8gcGluZyBXZWFsdGhTaW1wbGUgdHJhZGUgdG8gZ2V0IGl0LlxuICAgIGlmICh0aWNrZXIuZXhjaGFuZ2UpIHtcbiAgICAgIGV4Y2hhbmdlID0gdGlja2VyLmV4Y2hhbmdlO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmtleXModGhpcy5wcm92aWRlcnMpLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGluZm8gPSBhd2FpdCBkYXRhLmdldFNlY3VyaXR5KHRpY2tlciwgZmFsc2UpO1xuICAgICAgZXhjaGFuZ2UgPSBpbmZvLnN0b2NrLnByaW1hcnlfZXhjaGFuZ2U7XG4gICAgfVxuXG4gICAgLy8gQSBjdXN0b20gcHJvdmlkZXIgd2lsbCB0YWtlIHByZWNlZGVuY2Ugb3ZlciB0aGUgZGVmYXVsdCBzb3VyY2VcbiAgICBpZiAodGhpcy5wcm92aWRlcnNbZXhjaGFuZ2VdKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm92aWRlcnNbZXhjaGFuZ2VdLnF1b3RlKHRpY2tlcik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmRlZmF1bHRQcm92aWRlci5xdW90ZSh0aWNrZXIpO1xuICB9LFxufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzQ1N19fOyIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNTQ1X187IiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX185NDlfXzsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIG1vZHVsZSBleHBvcnRzIG11c3QgYmUgcmV0dXJuZWQgZnJvbSBydW50aW1lIHNvIGVudHJ5IGlubGluaW5nIGlzIGRpc2FibGVkXG4vLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbnJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1Mik7XG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiBtb2R1bGVbJ2RlZmF1bHQnXSA6XG5cdFx0KCkgPT4gbW9kdWxlO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkiXSwic291cmNlUm9vdCI6IiJ9