!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("source-map-support"),require("node-fetch")):"function"==typeof define&&define.amd?define(["source-map-support","node-fetch"],e):"object"==typeof exports?exports["wstrade-api"]=e(require("source-map-support"),require("node-fetch")):t["wstrade-api"]=e(t._,t._)}(global,(function(t,e){return(()=>{var r={228:t=>{t.exports=function(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}},858:t=>{t.exports=function(t){if(Array.isArray(t))return t}},646:(t,e,r)=>{var n=r(228);t.exports=function(t){if(Array.isArray(t))return n(t)}},926:t=>{function e(t,e,r,n,a,o,i){try{var c=t[o](i),s=c.value}catch(t){return void r(t)}c.done?e(s):Promise.resolve(s).then(n,a)}t.exports=function(t){return function(){var r=this,n=arguments;return new Promise((function(a,o){var i=t.apply(r,n);function c(t){e(i,a,o,c,s,"next",t)}function s(t){e(i,a,o,c,s,"throw",t)}c(void 0)}))}}},575:t=>{t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},913:t=>{function e(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}t.exports=function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}},713:t=>{t.exports=function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}},860:t=>{t.exports=function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}},884:t=>{t.exports=function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var r=[],n=!0,a=!1,o=void 0;try{for(var i,c=t[Symbol.iterator]();!(n=(i=c.next()).done)&&(r.push(i.value),!e||r.length!==e);n=!0);}catch(t){a=!0,o=t}finally{try{n||null==c.return||c.return()}finally{if(a)throw o}}return r}}},521:t=>{t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},206:t=>{t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},38:(t,e,r)=>{var n=r(858),a=r(884),o=r(379),i=r(521);t.exports=function(t,e){return n(t)||a(t,e)||o(t,e)||i()}},319:(t,e,r)=>{var n=r(646),a=r(860),o=r(379),i=r(206);t.exports=function(t){return n(t)||a(t)||o(t)||i()}},379:(t,e,r)=>{var n=r(228);t.exports=function(t,e){if(t){if("string"==typeof t)return n(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(t,e):void 0}}},757:(t,e,r)=>{t.exports=r(666)},391:(t,e,r)=>{"use strict";r.d(e,{Z:()=>u});var n=r(757),a=r.n(n),o=r(926),i=r.n(o),c=r(726),s=r(714);const u={all:(w=i()(a().mark((function t(){var e;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,s.Z)(c.Z.ACCOUNT_IDS,{});case 2:return e=t.sent,t.abrupt("return",{tfsa:e.find((function(t){return t.startsWith("tfsa")})),rrsp:e.find((function(t){return t.startsWith("rrsp")})),crypto:e.find((function(t){return t.startsWith("non-registered-crypto")})),personal:e.find((function(t){return t.startsWith("non-registered")&&!t.startsWith("non-registered-crypto")}))});case 4:case"end":return t.stop()}}),t)}))),function(){return w.apply(this,arguments)}),data:(m=i()(a().mark((function t(){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,s.Z)(c.Z.LIST_ACCOUNT,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return m.apply(this,arguments)}),me:(v=i()(a().mark((function t(){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,s.Z)(c.Z.ME,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return v.apply(this,arguments)}),person:(y=i()(a().mark((function t(){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,s.Z)(c.Z.PERSON,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return y.apply(this,arguments)}),history:(d=i()(a().mark((function t(e,r){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,s.Z)(c.Z.HISTORY_ACCOUNT,{interval:e,accountId:r}));case 1:case"end":return t.stop()}}),t)}))),function(t,e){return d.apply(this,arguments)}),activities:(h=i()(a().mark((function t(){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,s.Z)(c.Z.ACTIVITIES,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return h.apply(this,arguments)}),getBankAccounts:(l=i()(a().mark((function t(){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,s.Z)(c.Z.BANK_ACCOUNTS,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return l.apply(this,arguments)}),deposits:(f=i()(a().mark((function t(){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,s.Z)(c.Z.DEPOSITS,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return f.apply(this,arguments)}),positions:(p=i()(a().mark((function t(e){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,s.Z)(c.Z.POSITIONS,{accountId:e}));case 1:case"end":return t.stop()}}),t)}))),function(t){return p.apply(this,arguments)})};var p,f,l,h,d,y,v,m,w},726:(t,e,r)=>{"use strict";r.d(e,{Z:()=>b});var n,a,o,i,c,s,u,p,f,l,h,d,y=r(757),v=r.n(y),m=r(926),w=r.n(m),x={onFailure:(a=w()(v().mark((function t(e){return v().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=e.status,t.t1=e.statusText,t.next=4,e.json();case 4:return t.t2=t.sent,t.abrupt("return",{status:t.t0,reason:t.t1,body:t.t2});case 6:case"end":return t.stop()}}),t)}))),function(t){return a.apply(this,arguments)}),onSuccess:(n=w()(v().mark((function t(e){return v().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",e.json());case 1:case"end":return t.stop()}}),t)}))),function(t){return n.apply(this,arguments)})};const b={LOGIN:{method:"POST",url:"https://trade-service.wealthsimple.com/auth/login",authenticated:!1,onSuccess:(d=w()(v().mark((function t(e){return v().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0={access:e.headers.get("x-access-token"),refresh:e.headers.get("x-refresh-token"),expires:parseInt(e.headers.get("x-access-token-expires"),10)},t.next=3,e.json();case 3:return t.t1=t.sent,t.abrupt("return",{tokens:t.t0,accountInfo:t.t1});case 5:case"end":return t.stop()}}),t)}))),function(t){return d.apply(this,arguments)}),onFailure:x.onFailure},REFRESH:{method:"POST",url:"https://trade-service.wealthsimple.com/auth/refresh",authenticated:!1,onSuccess:(h=w()(v().mark((function t(e){return v().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",{tokens:{access:e.headers.get("x-access-token"),refresh:e.headers.get("x-refresh-token"),expires:parseInt(e.headers.get("x-access-token-expires"),10)}});case 1:case"end":return t.stop()}}),t)}))),function(t){return h.apply(this,arguments)}),onFailure:x.onFailure},ACCOUNT_IDS:{method:"GET",url:"https://trade-service.wealthsimple.com/account/list",authenticated:!0,onSuccess:(l=w()(v().mark((function t(e){var r;return v().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",r.results.map((function(t){return t.id})));case 4:case"end":return t.stop()}}),t)}))),function(t){return l.apply(this,arguments)}),onFailure:x.onFailure},LIST_ACCOUNT:{method:"GET",url:"https://trade-service.wealthsimple.com/account/list",authenticated:!0,onSuccess:(f=w()(v().mark((function t(e){var r;return v().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",r.results);case 4:case"end":return t.stop()}}),t)}))),function(t){return f.apply(this,arguments)}),onFailure:x.onFailure},ME:{method:"GET",url:"https://trade-service.wealthsimple.com/me",authenticated:!0,onSuccess:x.onSuccess,onFailure:x.onFailure},PERSON:{method:"GET",url:"https://trade-service.wealthsimple.com/person",authenticated:!0,onSuccess:x.onSuccess,onFailure:x.onFailure},HISTORY_ACCOUNT:{method:"GET",url:"https://trade-service.wealthsimple.com/account/history/{0}?account_id={1}",authenticated:!0,parameters:{0:"interval",1:"accountId"},onSuccess:x.onSuccess,onFailure:x.onFailure},ACTIVITIES:{method:"GET",url:"https://trade-service.wealthsimple.com/account/activities",authenticated:!0,onSuccess:(p=w()(v().mark((function t(e){var r;return v().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",r.results);case 4:case"end":return t.stop()}}),t)}))),function(t){return p.apply(this,arguments)}),onFailure:x.onFailure},DEPOSITS:{method:"GET",url:"https://trade-service.wealthsimple.com/deposits",authenticated:!0,onSuccess:(u=w()(v().mark((function t(e){var r;return v().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",r.results);case 4:case"end":return t.stop()}}),t)}))),function(t){return u.apply(this,arguments)}),onFailure:x.onFailure},BANK_ACCOUNTS:{method:"GET",url:"https://trade-service.wealthsimple.com/bank-accounts",authenticated:!0,onSuccess:(s=w()(v().mark((function t(e){var r;return v().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",r.results);case 4:case"end":return t.stop()}}),t)}))),function(t){return s.apply(this,arguments)}),onFailure:x.onFailure},EXCHANGE_RATES:{method:"GET",url:"https://trade-service.wealthsimple.com/forex",authenticated:!0,onSuccess:x.onSuccess,onFailure:x.onFailure},SECURITY:{method:"GET",url:"https://trade-service.wealthsimple.com/securities?query={0}",authenticated:!0,parameters:{0:"ticker"},onSuccess:(c=w()(v().mark((function t(e){var r;return v().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:if(0!==(r=t.sent).results.length){t.next=5;break}throw new Error("Security does not exist");case 5:return t.abrupt("return",r.results);case 6:case"end":return t.stop()}}),t)}))),function(t){return c.apply(this,arguments)}),onFailure:x.onFailure},EXTENSIVE_SECURITY_DETAILS:{method:"GET",url:"https://trade-service.wealthsimple.com/securities/{0}",authenticated:!0,parameters:{0:"id"},onSuccess:x.onSuccess,onFailure:x.onFailure},QUOTES_HISTORY:{method:"GET",url:"https://trade-service.wealthsimple.com/securities/{0}/historical_quotes/{1}?mic=XNAS",authenticated:!0,parameters:{0:"id",1:"interval"},onSuccess:x.onSuccess,onFailure:x.onFailure},POSITIONS:{method:"GET",url:"https://trade-service.wealthsimple.com/account/positions?account_id={0}",authenticated:!0,parameters:{0:"accountId"},onSuccess:(i=w()(v().mark((function t(e){var r;return v().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",r.results);case 4:case"end":return t.stop()}}),t)}))),function(t){return i.apply(this,arguments)}),onFailure:x.onFailure},ORDERS_BY_PAGE:{method:"GET",url:"https://trade-service.wealthsimple.com/orders?offset={0}&account_id={1}",authenticated:!0,parameters:{0:"offset",1:"accountId"},onSuccess:(o=w()(v().mark((function t(e){var r;return v().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.json();case 2:return r=t.sent,t.abrupt("return",{total:r.total,orders:r.results});case 4:case"end":return t.stop()}}),t)}))),function(t){return o.apply(this,arguments)}),onFailure:x.onFailure},CANCEL_ORDER:{method:"DELETE",url:"https://trade-service.wealthsimple.com/orders/{0}",authenticated:!0,parameters:{0:"orderId"},onSuccess:x.onSuccess,onFailure:x.onFailure},PLACE_ORDER:{method:"POST",url:"https://trade-service.wealthsimple.com/orders",authenticated:!0,onSuccess:x.onSuccess,onFailure:x.onFailure}}},464:(t,e,r)=>{"use strict";r.d(e,{Z:()=>f});var n=r(757),a=r.n(n),o=r(926),i=r.n(o),c=r(714),s=r(726),u=r(628),p={otp:null};const f={on:function(t,e){if(!(t in p))throw new Error("Unsupported authentication event '".concat(t,"'!"));p[t]=e},use:function(t){return u.Z.store(t)},tokens:function(){return{access:u.Z.access,refresh:u.Z.refresh,expires:u.Z.expires}},login:function(t,e){var r=this;return i()(a().mark((function n(){var o;return a().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(o=null,"function"!=typeof p.otp){n.next=4;break}return n.next=4,(0,c.Z)(s.Z.LOGIN,{email:t,password:e}).catch((function(){}));case 4:if(n.prev=4,n.t0=c.Z,n.t1=s.Z.LOGIN,n.t2=t,n.t3=e,"function"!=typeof p.otp){n.next=15;break}return n.next=12,p.otp();case 12:n.t4=n.sent,n.next=16;break;case 15:n.t4=p.otp;case 16:return n.t5=n.t4,n.t6={email:n.t2,password:n.t3,otp:n.t5},n.next=20,(0,n.t0)(n.t1,n.t6);case 20:o=n.sent,n.next=28;break;case 23:if(n.prev=23,n.t7=n.catch(4),p.otp){n.next=27;break}throw new Error("OTP not provided!");case 27:throw n.t7;case 28:r.use(o.tokens);case 29:case"end":return n.stop()}}),n,null,[[4,23]])})))()},refresh:(l=i()(a().mark((function t(){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,c.w)());case 1:case"end":return t.stop()}}),t)}))),function(){return l.apply(this,arguments)})};var l},500:(t,e,r)=>{"use strict";r.d(e,{e:()=>a,Z:()=>o});var n=["securities_cache"],a=function(t){return!n.includes(t)};function o(t){if(null!=t&&t.startsWith("no_")){var e=t.substring(t.indexOf("_")+1);a(e)&&n.push(e)}else a(t)||n.splice(n.indexOf(t),1)}},657:(t,e,r)=>{"use strict";r.d(e,{Z:()=>p});var n=r(38),a=r.n(n),o=r(575),i=r.n(o),c=r(913),s=r.n(c),u=["NASDAQ","NYSE","TSX","TSX-V","NEO","CC"];const p=function(){function t(e){var r;if(i()(this,t),this.symbol=null,this.exchange=null,this.id=null,this.crypto=!1,"string"==typeof e){if(""===e)throw new Error("Empty ticker");var n=e.split(":"),o=a()(n,2);this.symbol=o[0],this.exchange=o[1]}else{if(!e.symbol&&!e.id)throw new Error("Invalid ticker '".concat(e,"'"));this.symbol=e.symbol||null,this.exchange=e.exchange||null,this.id=e.id||null}if(this.exchange&&!u.includes(this.exchange))throw new Error("Invalid exchange '".concat(this.exchange,"'!"));("CC"===this.exchange||null!==(r=this.id)&&void 0!==r&&r.startsWith("sec-z"))&&(this.crypto=!0),"NEO"===this.exchange&&(this.exchange="AEQUITAS NEO EXCHANGE")}return s()(t,[{key:"format",value:function(){return this.id?this.id:"AEQUITAS NEO EXCHANGE"===this.exchange?"".concat(this.symbol,":NEO"):"".concat(this.symbol).concat(this.exchange?":".concat(this.exchange):"")}},{key:"weakEquals",value:function(t){return!(!this.id||this.id!==t.id)||!(!this.symbol||this.symbol!==t.symbol||this.crypto!==t.crypto)}}]),t}()},628:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});const n={access:null,refresh:null,expires:null,store:function(t){this.access=t.access,this.refresh=t.refresh,this.expires=t.expires},expired:function(){return this.expires&&parseInt(Date.now()/1e3,10)>=this.expires}}},752:(t,e,r)=>{"use strict";r.d(e,{Z:()=>x});var n=r(38),a=r.n(n),o=r(757),i=r.n(o),c=r(926),s=r.n(c),u=r(726),p=r(714),f=r(657),l=r(500),h=r(575),d=r.n(h),y=r(913),v=r.n(y),m=new(function(){function t(e){d()(this,t),this.cache=new Map,this.size=e}return v()(t,[{key:"insert",value:function(t,e){this.cache.size>=this.size&&this.cache.delete(this.cache.keys().next().value),this.cache.set(t,e)}},{key:"get",value:function(t){return this.cache.get(t)}}]),t}())(10);const w=function(t){var e=m.get(new f.Z(t).format());return void 0===e?null:e},x={exchangeRates:(g=s()(i().mark((function t(){return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,p.Z)(u.Z.EXCHANGE_RATES,{}));case 1:case"end":return t.stop()}}),t)}))),function(){return g.apply(this,arguments)}),getSecurity:(b=s()(i().mark((function t(e,r){var n,o,c,s;return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=null,o=new f.Z(e),r||!(0,l.e)("securities_cache")){t.next=6;break}if(!(n=w(o))){t.next=6;break}return t.abrupt("return",n);case 6:if(!o.id){t.next=12;break}return t.next=9,(0,p.Z)(u.Z.EXTENSIVE_SECURITY_DETAILS,{id:o.id});case 9:n=t.sent,t.next=28;break;case 12:return t.next=14,(0,p.Z)(u.Z.SECURITY,{ticker:o.symbol});case 14:if(n=(n=t.sent).filter((function(t){return t.stock.symbol===o.symbol})),o.crypto?n=n.filter((function(t){return"cryptocurrency"===t.security_type})):o.exchange&&(n=n.filter((function(t){return t.stock.primary_exchange===o.exchange}))),!(n.length>1)){t.next=19;break}throw new Error("Multiple securities matched query.");case 19:if(0!==n.length){t.next=21;break}throw new Error("No securities matched query.");case 21:if(c=n,s=a()(c,1),n=s[0],!r){t.next=28;break}return t.next=27,(0,p.Z)(u.Z.EXTENSIVE_SECURITY_DETAILS,{id:n.id});case 27:n=t.sent;case 28:return(0,l.e)("securities_cache")&&null===w(o)&&(i=o,h=n,m.insert(new f.Z(i).format(),h)),t.abrupt("return",n);case 30:case"end":return t.stop()}var i,h}),t)}))),function(t,e){return b.apply(this,arguments)})};var b,g},568:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(319),a=r.n(n),o=new(r(545).Headers);const i={add:function(t,e){return o.append(t,e)},remove:function(t){return o.delete(t)},clear:function(){return a()(o).forEach((function(t){return o.delete(t[0])}))},values:function(){return a()(o)}}},352:(t,e,r)=>{r(949).install();var n=r(464).Z,a=r(568).Z,o=r(391).Z,i=r(826).Z,c=r(752).Z,s=r(889).Z,u=r(500).Z;t.exports={auth:n,headers:a,accounts:o,orders:i,quotes:s,data:c,config:u}},714:(t,e,r)=>{"use strict";r.d(e,{Z:()=>k,w:()=>S});var n=r(757),a=r.n(n),o=r(319),i=r.n(o),c=r(926),s=r.n(c),u=r(713),p=r.n(u),f=r(545),l=r.n(f),h=r(568),d=r(628),y=r(726),v=r(500);function m(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}var w=200,x=201;function b(t,e){var r=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?m(Object(r),!0).forEach((function(e){p()(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):m(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}({},e),n=t.url;if(t.parameters)for(var a=0;a<Object.keys(t.parameters).length;a++){var o=t.parameters[a];if(null===r[o]||void 0===r[o])throw new Error("URL Path parameter '".concat(o,"' missing!"));n=n.replace("{".concat(a,"}"),r[t.parameters[a]]),delete r[t.parameters[a]]}return["GET","HEAD"].includes(t.method)?{url:n,payload:void 0}:{url:n,payload:JSON.stringify(r)}}function g(t,e){return E.apply(this,arguments)}function E(){return(E=s()(a().mark((function t(e,r){var n,o,c,s;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if((n=new f.Headers).append("Content-Type","application/json"),!e.authenticated){t.next=9;break}if(d.Z.access){t.next=5;break}throw new Error("Authentication required for '".concat(e.url,"'"));case 5:if(!(0,v.e)("implicit_token_refresh")){t.next=8;break}return t.next=8,Z();case 8:n.append("Authorization",d.Z.access);case 9:return h.Z.values().forEach((function(t){return n.append.apply(n,i()(t))})),o=b(e,r),c=o.url,s=o.payload,t.abrupt("return",l()(c,{body:s,method:e.method,headers:n}));case 12:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function k(t,e){return _.apply(this,arguments)}function _(){return(_=s()(a().mark((function t(e,r){var n;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,g(e,r);case 2:if(n=t.sent,![w,x].includes(n.status)){t.next=5;break}return t.abrupt("return",e.onSuccess(n));case 5:return t.t0=Promise,t.next=8,e.onFailure(n);case 8:return t.t1=t.sent,t.abrupt("return",t.t0.reject.call(t.t0,t.t1));case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function S(){return O.apply(this,arguments)}function O(){return(O=s()(a().mark((function t(){var e;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,k(y.Z.REFRESH,{refresh_token:d.Z.refresh});case 2:e=t.sent,d.Z.store(e.tokens);case 4:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function Z(){return T.apply(this,arguments)}function T(){return(T=s()(a().mark((function t(){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!d.Z.expired()){t.next=13;break}if(!d.Z.refresh){t.next=12;break}return t.prev=2,t.next=5,S();case 5:t.next=10;break;case 7:throw t.prev=7,t.t0=t.catch(2),new Error("Unable to refresh expired token: ".concat(t.t0));case 10:t.next=13;break;case 12:throw new Error("Access token expired");case 13:case"end":return t.stop()}}),t,null,[[2,7]])})))).apply(this,arguments)}},826:(t,e,r)=>{"use strict";r.d(e,{Z:()=>R});var n=r(713),a=r.n(n),o=r(319),i=r.n(o),c=r(757),s=r.n(c),u=r(926),p=r.n(u),f=r(726),l=r(714),h=r(657);function d(t,e){return y.apply(this,arguments)}function y(){return(y=p()(s().mark((function t(e,r){return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,l.Z)(f.Z.ORDERS_BY_PAGE,{offset:20*(r-1),accountId:e}));case 1:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function v(t){return m.apply(this,arguments)}function m(){return(m=p()(s().mark((function t(e){var r,n,a,o;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,d(e,1);case 2:if(r=t.sent,!((n=Math.ceil(r.total/20))>1)){t.next=12;break}for(a=[],o=2;o<=n;o++)a.push(d(e,o).then((function(t){return t.orders})));return t.next=9,Promise.all(a);case 9:t.sent.forEach((function(t){var e;return(e=r.orders).push.apply(e,i()(t))})),r.total=r.orders.length;case 12:return t.abrupt("return",r);case 13:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function w(t,e,r){return x.apply(this,arguments)}function x(){return(x=p()(s().mark((function t(e,r,n){var a,o;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,v(e);case 2:return a=t.sent,o=function(t){if(r){var e=new h.Z({symbol:t.symbol,id:t.security_id});if(!new h.Z(r).weakEquals(e))return!1}return t.status===n},a.orders=a.orders.filter(o),a.total=a.orders.length,t.abrupt("return",a);case 7:case"end":return t.stop()}}),t)})))).apply(this,arguments)}const b={page:d,all:v,pending:(k=p()(s().mark((function t(e,r){return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",w(e,r,"submitted"));case 1:case"end":return t.stop()}}),t)}))),function(t,e){return k.apply(this,arguments)}),filled:(E=p()(s().mark((function t(e,r){return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",w(e,r,"posted"));case 1:case"end":return t.stop()}}),t)}))),function(t,e){return E.apply(this,arguments)}),cancelled:(g=p()(s().mark((function t(e,r){return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",w(e,r,"cancelled"));case 1:case"end":return t.stop()}}),t)}))),function(t,e){return g.apply(this,arguments)})};var g,E,k,_=r(752),S=r(889),O=function(t){return["TSX","TSX-V"].includes(t)};const Z={cancel:(C=p()(s().mark((function t(e){return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=e,t.next=3,(0,l.Z)(f.Z.CANCEL_ORDER,{orderId:e});case 3:return t.t1=t.sent,t.abrupt("return",{order:t.t0,response:t.t1});case 5:case"end":return t.stop()}}),t)}))),function(t){return C.apply(this,arguments)}),cancelPending:function(t){var e=this;return p()(s().mark((function r(){var n;return s().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,b.pending(t);case 2:return n=r.sent,r.abrupt("return",Promise.all(n.orders.map(function(){var t=p()(s().mark((function t(r){return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",e.cancel(r.order_id));case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}())));case 4:case"end":return r.stop()}}),r)})))()},marketBuy:(L=p()(s().mark((function t(e,r,n){var a;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,_.Z.getSecurity(r);case 2:if(a=t.sent,t.t0=l.Z,t.t1=f.Z.PLACE_ORDER,t.t2=a.id,new h.Z(r).crypto){t.next=12;break}return t.next=9,S.Z.get(r);case 9:t.t3=t.sent,t.next=13;break;case 12:t.t3=void 0;case 13:return t.t4=t.t3,t.t5=n,t.t6=e,t.t7={security_id:t.t2,limit_price:t.t4,quantity:t.t5,order_type:"buy_quantity",order_sub_type:"market",time_in_force:"day",account_id:t.t6},t.abrupt("return",(0,t.t0)(t.t1,t.t7));case 18:case"end":return t.stop()}}),t)}))),function(t,e,r){return L.apply(this,arguments)}),limitBuy:(P=p()(s().mark((function t(e,r,n,a){return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=l.Z,t.t1=f.Z.PLACE_ORDER,t.next=4,_.Z.getSecurity(r);case 4:return t.t2=t.sent.id,t.t3=n,t.t4=a,t.t5=e,t.t6={security_id:t.t2,limit_price:t.t3,quantity:t.t4,order_type:"buy_quantity",order_sub_type:"limit",time_in_force:"day",account_id:t.t5},t.abrupt("return",(0,t.t0)(t.t1,t.t6));case 10:case"end":return t.stop()}}),t)}))),function(t,e,r,n){return P.apply(this,arguments)}),stopLimitBuy:(A=p()(s().mark((function t(e,r,n,a,o){var i;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,_.Z.getSecurity(r);case 2:if(i=t.sent,!O(i.stock.primary_exchange)||n===a){t.next=5;break}throw new Error("TSX/TSX-V securities must have an equivalent stop and limit price.");case 5:return t.abrupt("return",(0,l.Z)(f.Z.PLACE_ORDER,{security_id:i.id,stop_price:n,limit_price:a,quantity:o,order_type:"buy_quantity",order_sub_type:"stop_limit",time_in_force:"day",account_id:e}));case 6:case"end":return t.stop()}}),t)}))),function(t,e,r,n,a){return A.apply(this,arguments)}),marketSell:(I=p()(s().mark((function t(e,r,n){return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=l.Z,t.t1=f.Z.PLACE_ORDER,t.next=4,_.Z.getSecurity(r);case 4:if(t.t2=t.sent.id,new h.Z(r).crypto){t.next=11;break}return t.next=8,S.Z.get(r);case 8:t.t3=t.sent,t.next=12;break;case 11:t.t3=void 0;case 12:return t.t4=t.t3,t.t5=n,t.t6=e,t.t7={security_id:t.t2,market_value:t.t4,quantity:t.t5,order_type:"sell_quantity",order_sub_type:"market",time_in_force:"day",account_id:t.t6},t.abrupt("return",(0,t.t0)(t.t1,t.t7));case 17:case"end":return t.stop()}}),t)}))),function(t,e,r){return I.apply(this,arguments)}),limitSell:(j=p()(s().mark((function t(e,r,n,a){return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=l.Z,t.t1=f.Z.PLACE_ORDER,t.next=4,_.Z.getSecurity(r);case 4:return t.t2=t.sent.id,t.t3=n,t.t4=a,t.t5=e,t.t6={security_id:t.t2,limit_price:t.t3,quantity:t.t4,order_type:"sell_quantity",order_sub_type:"limit",time_in_force:"day",account_id:t.t5},t.abrupt("return",(0,t.t0)(t.t1,t.t6));case 10:case"end":return t.stop()}}),t)}))),function(t,e,r,n){return j.apply(this,arguments)}),stopLimitSell:(T=p()(s().mark((function t(e,r,n,a,o){var i;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,_.Z.getSecurity(r);case 2:if(i=t.sent,!O(i.stock.primary_exchange)||n===a){t.next=5;break}throw new Error("TSX/TSX-V securities must have an equivalent stop and limit price.");case 5:return t.abrupt("return",(0,l.Z)(f.Z.PLACE_ORDER,{security_id:i.id,stop_price:n,limit_price:a,quantity:o,order_type:"sell_quantity",order_sub_type:"stop_limit",time_in_force:"day",account_id:e}));case 6:case"end":return t.stop()}}),t)}))),function(t,e,r,n,a){return T.apply(this,arguments)})};var T,j,I,A,P,L,C;function F(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function N(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?F(Object(r),!0).forEach((function(e){a()(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):F(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}const R=N(N({},b),Z)},889:(t,e,r)=>{"use strict";r.d(e,{Z:()=>h});var n=r(757),a=r.n(n),o=r(926),i=r.n(o),c=r(752);const s={quote:(u=i()(a().mark((function t(e){var r;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,c.Z.getSecurity(e,!0);case 2:return r=t.sent,t.abrupt("return",r.quote.amount);case 4:case"end":return t.stop()}}),t)}))),function(t){return u.apply(this,arguments)})};var u,p=r(657),f=r(714),l=r(726);const h={defaultProvider:s,providers:{},use:function(t,e){if("function"!=typeof e.quote)throw new Error("Invalid quote provider for ".concat(t,"!"));this.providers[t]=e},get:function(t){var e=this;return i()(a().mark((function r(){var n,o,i;return a().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if(n=null,!(o=new p.Z(t)).exchange){r.next=6;break}n=o.exchange,r.next=15;break;case 6:if(!o.crypto||!o.id){r.next=10;break}n="CC",r.next=15;break;case 10:if(!(Object.keys(e.providers).length>0)){r.next=15;break}return r.next=13,c.Z.getSecurity(o,!1);case 13:i=r.sent,n=i.stock.primary_exchange;case 15:if(!(n in e.providers)){r.next=17;break}return r.abrupt("return",e.providers[n].quote(o));case 17:return r.abrupt("return",e.defaultProvider.quote(o));case 18:case"end":return r.stop()}}),r)})))()},history:function(t,e){return i()(a().mark((function r(){var n;return a().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if((n=new p.Z(t)).id){r.next=5;break}return r.next=4,c.Z.getSecurity(n);case 4:n.id=r.sent.id;case 5:return r.abrupt("return",(0,f.Z)(l.Z.QUOTES_HISTORY,{id:n.id,interval:e}));case 6:case"end":return r.stop()}}),r)})))()}}},666:t=>{var e=function(t){"use strict";var e,r=Object.prototype,n=r.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",i=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function s(t,e,r,n){var a=e&&e.prototype instanceof y?e:y,o=Object.create(a.prototype),i=new Z(n||[]);return o._invoke=function(t,e,r){var n=p;return function(a,o){if(n===l)throw new Error("Generator is already running");if(n===h){if("throw"===a)throw o;return j()}for(r.method=a,r.arg=o;;){var i=r.delegate;if(i){var c=_(i,r);if(c){if(c===d)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===p)throw n=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=l;var s=u(t,e,r);if("normal"===s.type){if(n=r.done?h:f,s.arg===d)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n=h,r.method="throw",r.arg=s.arg)}}}(t,r,i),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var p="suspendedStart",f="suspendedYield",l="executing",h="completed",d={};function y(){}function v(){}function m(){}var w={};w[o]=function(){return this};var x=Object.getPrototypeOf,b=x&&x(x(T([])));b&&b!==r&&n.call(b,o)&&(w=b);var g=m.prototype=y.prototype=Object.create(w);function E(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function k(t,e){function r(a,o,i,c){var s=u(t[a],t,o);if("throw"!==s.type){var p=s.arg,f=p.value;return f&&"object"==typeof f&&n.call(f,"__await")?e.resolve(f.__await).then((function(t){r("next",t,i,c)}),(function(t){r("throw",t,i,c)})):e.resolve(f).then((function(t){p.value=t,i(p)}),(function(t){return r("throw",t,i,c)}))}c(s.arg)}var a;this._invoke=function(t,n){function o(){return new e((function(e,a){r(t,n,e,a)}))}return a=a?a.then(o,o):o()}}function _(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,_(t,r),"throw"===r.method))return d;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var a=u(n,t.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,d;var o=a.arg;return o?o.done?(r[t.resultName]=o.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,d):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,d)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function Z(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(S,this),this.reset(!0)}function T(t){if(t){var r=t[o];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,i=function r(){for(;++a<t.length;)if(n.call(t,a))return r.value=t[a],r.done=!1,r;return r.value=e,r.done=!0,r};return i.next=i}}return{next:j}}function j(){return{value:e,done:!0}}return v.prototype=g.constructor=m,m.constructor=v,m[c]=v.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},E(k.prototype),k.prototype[i]=function(){return this},t.AsyncIterator=k,t.async=function(e,r,n,a,o){void 0===o&&(o=Promise);var i=new k(s(e,r,n,a),o);return t.isGeneratorFunction(r)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},E(g),g[c]="Generator",g[o]=function(){return this},g.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=T,Z.prototype={constructor:Z,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function a(n,a){return c.type="throw",c.arg=t,r.next=n,a&&(r.method="next",r.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],c=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var s=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(s&&u){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&n.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=t,i.arg=e,o?(this.method="next",this.next=o.finallyLoc,d):this.complete(i)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),O(r),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var a=n.arg;O(r)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:T(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),d}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}},545:t=>{"use strict";t.exports=e},949:e=>{"use strict";e.exports=t}},n={};function a(t){if(n[t])return n[t].exports;var e=n[t]={exports:{}};return r[t](e,e.exports,a),e.exports}return a.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return a.d(e,{a:e}),e},a.d=(t,e)=>{for(var r in e)a.o(e,r)&&!a.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},a.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),a(352)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93c3RyYWRlLWFwaS93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheUxpa2VUb0FycmF5LmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhvdXRIb2xlcy5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlUmVzdC5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9zcmMvYWNjb3VudHMuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9zcmMvYXBpL2VuZHBvaW50cy5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL3NyYy9hdXRoLmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vc3JjL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL3NyYy9jb3JlL3RpY2tlci5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL3NyYy9oZWxwZXJzL3RpbWUuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9zcmMvY29yZS90b2tlbnMuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9zcmMvb3B0aW9uYWwvc2VjdXJpdGllcy1jYWNoZS5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL3NyYy9jb3JlL2NhY2hlLmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vc3JjL2RhdGEuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9zcmMvaGVhZGVycy5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL3NyYy9uZXR3b3JrL2h0dHBzLmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vc3JjL29yZGVycy9oaXN0b3J5LmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vc3JjL29yZGVycy9zdWJtaXQuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvLi9zcmMvb3JkZXJzL2luZGV4LmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vc3JjL3F1b3Rlcy9kZWZhdWx0LmpzIiwid2VicGFjazovL3dzdHJhZGUtYXBpLy4vc3JjL3F1b3Rlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvZXh0ZXJuYWwge1wiY29tbW9uanNcIjpcIm5vZGUtZmV0Y2hcIixcImNvbW1vbmpzMlwiOlwibm9kZS1mZXRjaFwiLFwiYW1kXCI6XCJub2RlLWZldGNoXCIsXCJyb290XCI6XCJfXCJ9Iiwid2VicGFjazovL3dzdHJhZGUtYXBpL2V4dGVybmFsIHtcImNvbW1vbmpzXCI6XCJzb3VyY2UtbWFwLXN1cHBvcnRcIixcImNvbW1vbmpzMlwiOlwic291cmNlLW1hcC1zdXBwb3J0XCIsXCJhbWRcIjpcInNvdXJjZS1tYXAtc3VwcG9ydFwiLFwicm9vdFwiOlwiX1wifSIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93c3RyYWRlLWFwaS93ZWJwYWNrL3N0YXJ0dXAiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vd3N0cmFkZS1hcGkvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3dzdHJhZGUtYXBpL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsImdsb2JhbCIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzk0OV9fIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNTQ1X18iLCJhcnIiLCJsZW4iLCJsZW5ndGgiLCJpIiwiYXJyMiIsIkFycmF5IiwiaXNBcnJheSIsImFycmF5TGlrZVRvQXJyYXkiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJyZXNvbHZlIiwicmVqZWN0IiwiX25leHQiLCJfdGhyb3ciLCJrZXkiLCJhcmciLCJpbmZvIiwidmFsdWUiLCJlcnJvciIsImRvbmUiLCJQcm9taXNlIiwidGhlbiIsImZuIiwic2VsZiIsInRoaXMiLCJhcmdzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJlcnIiLCJ1bmRlZmluZWQiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIm9iaiIsIml0ZXIiLCJTeW1ib2wiLCJpdGVyYXRvciIsImZyb20iLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiX3MiLCJfaSIsIm5leHQiLCJwdXNoIiwiYXJyYXlXaXRoSG9sZXMiLCJpdGVyYWJsZVRvQXJyYXlMaW1pdCIsInVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5Iiwibm9uSXRlcmFibGVSZXN0IiwiYXJyYXlXaXRob3V0SG9sZXMiLCJpdGVyYWJsZVRvQXJyYXkiLCJub25JdGVyYWJsZVNwcmVhZCIsIm8iLCJtaW5MZW4iLCJuIiwidG9TdHJpbmciLCJjYWxsIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJ0ZXN0IiwiYWxsIiwiaGFuZGxlUmVxdWVzdCIsImVuZHBvaW50cyIsImFjY291bnRzIiwidGZzYSIsImZpbmQiLCJhY2NvdW50Iiwic3RhcnRzV2l0aCIsInJyc3AiLCJjcnlwdG8iLCJwZXJzb25hbCIsImRhdGEiLCJtZSIsInBlcnNvbiIsImhpc3RvcnkiLCJpbnRlcnZhbCIsImFjY291bnRJZCIsImFjdGl2aXRpZXMiLCJnZXRCYW5rQWNjb3VudHMiLCJkZXBvc2l0cyIsInBvc2l0aW9ucyIsImRlZmF1bHRFbmRwb2ludEJlaGF2aW91ciIsIm9uRmFpbHVyZSIsInJlc3BvbnNlIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImpzb24iLCJyZWFzb24iLCJib2R5Iiwib25TdWNjZXNzIiwiTE9HSU4iLCJtZXRob2QiLCJ1cmwiLCJhdXRoZW50aWNhdGVkIiwiYWNjZXNzIiwiaGVhZGVycyIsImdldCIsInJlZnJlc2giLCJleHBpcmVzIiwicGFyc2VJbnQiLCJ0b2tlbnMiLCJhY2NvdW50SW5mbyIsIlJFRlJFU0giLCJBQ0NPVU5UX0lEUyIsInJlc3VsdHMiLCJtYXAiLCJpZCIsIkxJU1RfQUNDT1VOVCIsIk1FIiwiUEVSU09OIiwiSElTVE9SWV9BQ0NPVU5UIiwicGFyYW1ldGVycyIsIjAiLCIxIiwiQUNUSVZJVElFUyIsIkRFUE9TSVRTIiwiQkFOS19BQ0NPVU5UUyIsIkVYQ0hBTkdFX1JBVEVTIiwiU0VDVVJJVFkiLCJFcnJvciIsIkVYVEVOU0lWRV9TRUNVUklUWV9ERVRBSUxTIiwiUVVPVEVTX0hJU1RPUlkiLCJQT1NJVElPTlMiLCJPUkRFUlNfQllfUEFHRSIsInRvdGFsIiwib3JkZXJzIiwiQ0FOQ0VMX09SREVSIiwiUExBQ0VfT1JERVIiLCJldmVudHMiLCJvdHAiLCJvbiIsImV2ZW50IiwiaGFuZGxlciIsInVzZSIsInN0YXRlIiwibG9naW4iLCJlbWFpbCIsInBhc3N3b3JkIiwicmVmcmVzaEF1dGhlbnRpY2F0aW9uIiwiZGlzYWJsZWQiLCJjb25maWdFbmFibGVkIiwiZmVhdHVyZSIsImluY2x1ZGVzIiwiY29uZmlnIiwiY3V0Iiwic3Vic3RyaW5nIiwiaW5kZXhPZiIsInNwbGljZSIsImV4Y2hhbmdlcyIsInN5bWJvbCIsImV4Y2hhbmdlIiwic3BsaXQiLCJvdGhlciIsInN0b3JlIiwiZXhwaXJlZCIsIkRhdGUiLCJub3ciLCJjYWNoZSIsInNpemUiLCJNYXAiLCJrZXlzIiwic2V0Iiwic2VjdXJpdHkiLCJyZXN1bHQiLCJUaWNrZXIiLCJmb3JtYXQiLCJleGNoYW5nZVJhdGVzIiwiZ2V0U2VjdXJpdHkiLCJ1c2VyVGlja2VyIiwiZXh0ZW5zaXZlIiwidGlja2VyIiwiZmlsdGVyIiwic3RvY2siLCJzZWN1cml0eV90eXBlIiwicHJpbWFyeV9leGNoYW5nZSIsImluc2VydCIsImN1c3RvbUhlYWRlcnMiLCJIZWFkZXJzIiwiYWRkIiwiYXBwZW5kIiwicmVtb3ZlIiwiY2xlYXIiLCJmb3JFYWNoIiwiaGVhZGVyIiwidmFsdWVzIiwiYXV0aCIsInF1b3RlcyIsIkhUVFBfT0siLCJIVFRQX0NSRUFURUQiLCJmaW5hbGl6ZVJlcXVlc3QiLCJlbmRwb2ludCIsInBhcmFtcyIsImluZGV4IiwicGFyYW1ldGVyTmFtZSIsInJlcGxhY2UiLCJwYXlsb2FkIiwiSlNPTiIsInN0cmluZ2lmeSIsInRhbGsiLCJpbXBsaWNpdFRva2VuUmVmcmVzaCIsImZldGNoIiwicmVmcmVzaF90b2tlbiIsInBhZ2UiLCJwYWdlTnVtIiwib2Zmc2V0IiwicGFnZXMiLCJNYXRoIiwiY2VpbCIsInRhc2tzIiwibGlzdCIsImZpbHRlcmVkT3JkZXJzIiwib3JkZXJGaWx0ZXIiLCJvcmRlciIsInNlY3VyaXR5X2lkIiwid2Vha0VxdWFscyIsInBlbmRpbmciLCJmaWxsZWQiLCJjYW5jZWxsZWQiLCJpc0NhbmFkaWFuU2VjdXJpdHkiLCJjYW5jZWwiLCJvcmRlcklkIiwiY2FuY2VsUGVuZGluZyIsIm9yZGVyX2lkIiwibWFya2V0QnV5IiwicXVhbnRpdHkiLCJkZXRhaWxzIiwibGltaXRfcHJpY2UiLCJvcmRlcl90eXBlIiwib3JkZXJfc3ViX3R5cGUiLCJ0aW1lX2luX2ZvcmNlIiwiYWNjb3VudF9pZCIsImxpbWl0QnV5IiwibGltaXQiLCJzdG9wTGltaXRCdXkiLCJzdG9wIiwic3RvcF9wcmljZSIsIm1hcmtldFNlbGwiLCJtYXJrZXRfdmFsdWUiLCJsaW1pdFNlbGwiLCJzdG9wTGltaXRTZWxsIiwic3VibWl0IiwicXVvdGUiLCJhbW91bnQiLCJkZWZhdWx0UHJvdmlkZXIiLCJ0cmFkZSIsInByb3ZpZGVycyIsInByb3ZpZGVyIiwicnVudGltZSIsIk9wIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY3JlYXRlIiwiY29udGV4dCIsIkNvbnRleHQiLCJfaW52b2tlIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZWNvcmQiLCJ0cnlDYXRjaCIsInR5cGUiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwiX19hd2FpdCIsInVud3JhcHBlZCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImlzTmFOIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJvYmplY3QiLCJyZXZlcnNlIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJjaGFyQXQiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiRnVuY3Rpb24iLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsInByb3AiXSwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxFQUFR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QUFJQyxFQUFTZ1gsRUFBeUJFLEdBQVksQ0FHakRuWCxRQUFTLElBT1YsT0FIQW9YLEVBQW9CRCxHQUFVbFgsRUFBUUEsRUFBT0QsUUFBU2tYLEdBRy9DalgsRUFBT0QsUUNqQmYsT0NGQWtYLEVBQW9CdlMsRUFBSzFFLElBQ3hCLElBQUlvWCxFQUFTcFgsR0FBVUEsRUFBT3FYLFdBQzdCLElBQU1yWCxFQUFnQixRQUN0QixJQUFNQSxFQUVQLE9BREFpWCxFQUFvQkssRUFBRUYsRUFBUSxDQUFFRyxFQUFHSCxJQUM1QkEsR0NMUkgsRUFBb0JLLEVBQUksQ0FBQ3ZYLEVBQVN5WCxLQUNqQyxJQUFJLElBQUluVyxLQUFPbVcsRUFDWFAsRUFBb0J6UyxFQUFFZ1QsRUFBWW5XLEtBQVM0VixFQUFvQnpTLEVBQUV6RSxFQUFTc0IsSUFDNUUwQixPQUFPQyxlQUFlakQsRUFBU3NCLEVBQUssQ0FBRXVCLFlBQVksRUFBTXlFLElBQUttUSxFQUFXblcsTUNKM0U0VixFQUFvQnpTLEVBQUksQ0FBQ3BCLEVBQUtxVSxJQUFTMVUsT0FBT0ksVUFBVTROLGVBQWVuTSxLQUFLeEIsRUFBS3FVLEdIRzFFUixFQUFvQixNIiwiZmlsZSI6ImRpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJzb3VyY2UtbWFwLXN1cHBvcnRcIiksIHJlcXVpcmUoXCJub2RlLWZldGNoXCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcInNvdXJjZS1tYXAtc3VwcG9ydFwiLCBcIm5vZGUtZmV0Y2hcIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wid3N0cmFkZS1hcGlcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJzb3VyY2UtbWFwLXN1cHBvcnRcIiksIHJlcXVpcmUoXCJub2RlLWZldGNoXCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJ3c3RyYWRlLWFwaVwiXSA9IGZhY3Rvcnkocm9vdFtcIl9cIl0sIHJvb3RbXCJfXCJdKTtcbn0pKGdsb2JhbCwgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fOTQ5X18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzU0NV9fKSB7XG5yZXR1cm4gIiwiZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheUxpa2VUb0FycmF5OyIsImZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRoSG9sZXM7IiwidmFyIGFycmF5TGlrZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheUxpa2VUb0FycmF5XCIpO1xuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aG91dEhvbGVzOyIsImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3luY1RvR2VuZXJhdG9yOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3M7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5OyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaXRlcmFibGVUb0FycmF5OyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaXRlcmFibGVUb0FycmF5TGltaXQ7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVSZXN0OyIsImZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlU3ByZWFkOyIsInZhciBhcnJheVdpdGhIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5TGltaXQgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdFwiKTtcblxudmFyIHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXlcIik7XG5cbnZhciBub25JdGVyYWJsZVJlc3QgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVJlc3RcIik7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NsaWNlZFRvQXJyYXk7IiwidmFyIGFycmF5V2l0aG91dEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRob3V0SG9sZXNcIik7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlcIik7XG5cbnZhciB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgbm9uSXRlcmFibGVTcHJlYWQgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVNwcmVhZFwiKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RvQ29uc3VtYWJsZUFycmF5OyIsInZhciBhcnJheUxpa2VUb0FycmF5ID0gcmVxdWlyZShcIi4vYXJyYXlMaWtlVG9BcnJheVwiKTtcblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXk7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsImltcG9ydCBlbmRwb2ludHMgZnJvbSAnLi9hcGkvZW5kcG9pbnRzJztcbmltcG9ydCBoYW5kbGVSZXF1ZXN0IGZyb20gJy4vbmV0d29yay9odHRwcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAvKipcbiAgICogUmV0cmlldmVzIGFsbCBhY2NvdW50IGlkcyBvcGVuIHVuZGVyIHRoaXMgV2VhbHRoc2ltcGxlIFRyYWRlIGFjY291bnQuXG4gICAqL1xuICBhbGw6IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBhY2NvdW50cyA9IGF3YWl0IGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLkFDQ09VTlRfSURTLCB7fSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdGZzYTogYWNjb3VudHMuZmluZCgoYWNjb3VudCkgPT4gYWNjb3VudC5zdGFydHNXaXRoKCd0ZnNhJykpLFxuICAgICAgcnJzcDogYWNjb3VudHMuZmluZCgoYWNjb3VudCkgPT4gYWNjb3VudC5zdGFydHNXaXRoKCdycnNwJykpLFxuICAgICAgY3J5cHRvOiBhY2NvdW50cy5maW5kKChhY2NvdW50KSA9PiBhY2NvdW50LnN0YXJ0c1dpdGgoJ25vbi1yZWdpc3RlcmVkLWNyeXB0bycpKSxcbiAgICAgIHBlcnNvbmFsOiBhY2NvdW50cy5maW5kKChhY2NvdW50KSA9PiBhY2NvdW50LnN0YXJ0c1dpdGgoJ25vbi1yZWdpc3RlcmVkJykgJiYgIWFjY291bnQuc3RhcnRzV2l0aCgnbm9uLXJlZ2lzdGVyZWQtY3J5cHRvJykpLFxuICAgIH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsaXN0IG9mIGRldGFpbHMgYWJvdXQgeW91ciBvcGVuIGFjY291bnRzLCBsaWtlIGFjY291bnQgdHlwZSwgYnV5aW5nIHBvd2VyLFxuICAgKiBjdXJyZW50IGJhbGFuY2UsIGFuZCBtb3JlLlxuICAgKi9cbiAgZGF0YTogYXN5bmMgKCkgPT4gaGFuZGxlUmVxdWVzdChlbmRwb2ludHMuTElTVF9BQ0NPVU5ULCB7fSksXG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBzb21lIHN1cmZhY2UgaW5mb3JtYXRpb24gYWJvdXQgeW91IGxpa2UgeW91ciBuYW1lIGFuZCBlbWFpbCwgYWNjb3VudFxuICAgKiBzaWduYXR1cmVzLCBhbmQgb3RoZXIgbWV0YWRhdGEuXG4gICAqL1xuICBtZTogYXN5bmMgKCkgPT4gaGFuZGxlUmVxdWVzdChlbmRwb2ludHMuTUUsIHt9KSxcblxuICAvKipcbiAgICogRGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgeW91IHRoYXQgeW91IHByb3ZpZGVkIG9uIHNpZ251cCwgbGlrZSByZXNpZGVudGlhbCBhbmRcbiAgICogbWFpbGluZyBhZGRyZXNzZXMsIGVtcGxveW1lbnQsIHBob25lIG51bWJlcnMsIGFuZCBzbyBvbi5cbiAgICovXG4gIHBlcnNvbjogYXN5bmMgKCkgPT4gaGFuZGxlUmVxdWVzdChlbmRwb2ludHMuUEVSU09OLCB7fSksXG5cbiAgLyoqXG4gICAqIFF1ZXJ5IHRoZSBoaXN0b3J5IG9mIHRoZSBhY2NvdW50IHdpdGhpbiBhIGNlcnRhaW4gdGltZSBpbnRlcnZhbC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBpbnRlcnZhbCBUaGUgdGltZSBpbnRlcnZhbCBmb3IgdGhlIGhpc3RvcnkgcXVlcnlcbiAgICogQHBhcmFtIHsqfSBhY2NvdW50SWQgVGhlIGFjY291bnQgdG8gcXVlcnlcbiAgICovXG4gIGhpc3Rvcnk6IGFzeW5jIChpbnRlcnZhbCwgYWNjb3VudElkKSA9PiBoYW5kbGVSZXF1ZXN0KGVuZHBvaW50cy5ISVNUT1JZX0FDQ09VTlQsIHtcbiAgICBpbnRlcnZhbCwgYWNjb3VudElkLFxuICB9KSxcblxuICAvKipcbiAgICogUmV0cmlldmVzIHRoZSBtb3N0IHJlY2VudCAyMCBhY3Rpdml0aWVzIG9uIHRoZSBXZWFsdGhzaW1wbGUgVHJhZGUgQWNjb3VudC5cbiAgICovXG4gIGFjdGl2aXRpZXM6IGFzeW5jICgpID0+IGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLkFDVElWSVRJRVMsIHt9KSxcblxuICAvKipcbiAgICogUmV0cmlldmVzIGFsbCBiYW5rIGFjY291bnRzIGxpbmtlZCB0byB0aGUgV2VhbHRoc2ltcGxlIFRyYWRlIGFjY291bnQuXG4gICAqL1xuICBnZXRCYW5rQWNjb3VudHM6IGFzeW5jICgpID0+IGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLkJBTktfQUNDT1VOVFMsIHt9KSxcblxuICAvKipcbiAgICogR3JhYiBhbGwgZGVwb3NpdCByZWNvcmRzIG9uIHRoZSBXZWFsdGhzaW1wbGUgVHJhZGUgYWNjb3VudC5cbiAgICovXG4gIGRlcG9zaXRzOiBhc3luYyAoKSA9PiBoYW5kbGVSZXF1ZXN0KGVuZHBvaW50cy5ERVBPU0lUUywge30pLFxuXG4gIC8qKlxuICAgKiBMaXN0cyBhbGwgcG9zaXRpb25zIGluIHRoZSBzcGVjaWZpZWQgdHJhZGluZyBhY2NvdW50IHVuZGVyIHRoZSBXZWFsdGhzaW1wbGUgVHJhZGUgQWNjb3VudC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBhY2NvdW50SWQgVGhlIHNwZWNpZmljIGFjY291bnQgaW4gdGhlIFdlYWx0aHNpbXBsZSBUcmFkZSBhY2NvdW50XG4gICAqL1xuICBwb3NpdGlvbnM6IGFzeW5jIChhY2NvdW50SWQpID0+IGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLlBPU0lUSU9OUywgeyBhY2NvdW50SWQgfSksXG59O1xuIiwiY29uc3QgZGVmYXVsdEVuZHBvaW50QmVoYXZpb3VyID0ge1xuXG4gIC8vIERlZmF1bHQgZmFpbHVyZSBtZXRob2QgZm9yIGFsbCBlbmRwb2ludCBjYWxsc1xuICBvbkZhaWx1cmU6IGFzeW5jIChyZXNwb25zZSkgPT4gKHtcbiAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICByZWFzb246IHJlc3BvbnNlLnN0YXR1c1RleHQsXG4gICAgYm9keTogYXdhaXQgcmVzcG9uc2UuanNvbigpLFxuICB9KSxcblxuICAvLyBEZWZhdWx0IHN1Y2Nlc3MgbWV0aG9kIGZvciBhbGwgZW5kcG9pbnQgY2FsbHNcbiAgb25TdWNjZXNzOiBhc3luYyAocmVzcG9uc2UpID0+IHJlc3BvbnNlLmpzb24oKSxcbn07XG5cbmNvbnN0IFdlYWx0aHNpbXBsZVRyYWRlRW5kcG9pbnRzID0ge1xuXG4gIC8qXG4gICAqIFRoZSBMT0dJTiBlbmRwb2ludCBpbnRpYWxpemVzIGEgbmV3IHNlc3Npb24gZm9yIHRoZSBnaXZlbiBlbWFpbCBhbmRcbiAgICogcGFzc3dvcmQgc2V0LiBJZiB0aGUgbG9naW4gaXMgc3VjY2Vzc2Z1bCwgYWNjZXNzIGFuZCByZWZyZXNoIHRva2Vuc1xuICAgKiBhcmUgcmV0dXJuZWQgaW4gdGhlIGhlYWRlcnMuIFRoZSBhY2Nlc3MgdG9rZW4gaXMgdGhlIGtleSBmb3IgaW52b2tpbmdcbiAgICogYWxsIG90aGVyIGVuZCBwb2ludHMuXG4gICAqL1xuICBMT0dJTjoge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIHVybDogJ2h0dHBzOi8vdHJhZGUtc2VydmljZS53ZWFsdGhzaW1wbGUuY29tL2F1dGgvbG9naW4nLFxuICAgIGF1dGhlbnRpY2F0ZWQ6IGZhbHNlLFxuICAgIG9uU3VjY2VzczogYXN5bmMgKHJlc3BvbnNlKSA9PiAoe1xuICAgICAgdG9rZW5zOiB7XG4gICAgICAgIGFjY2VzczogcmVzcG9uc2UuaGVhZGVycy5nZXQoJ3gtYWNjZXNzLXRva2VuJyksXG4gICAgICAgIHJlZnJlc2g6IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCd4LXJlZnJlc2gtdG9rZW4nKSxcbiAgICAgICAgZXhwaXJlczogcGFyc2VJbnQocmVzcG9uc2UuaGVhZGVycy5nZXQoJ3gtYWNjZXNzLXRva2VuLWV4cGlyZXMnKSwgMTApLFxuICAgICAgfSxcblxuICAgICAgYWNjb3VudEluZm86IGF3YWl0IHJlc3BvbnNlLmpzb24oKSxcbiAgICB9KSxcbiAgICBvbkZhaWx1cmU6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vbkZhaWx1cmUsXG4gIH0sXG5cbiAgLypcbiAgICogR2VuZXJhdGVzIGEgbmV3IHNldCBvZiBhY2Nlc3MgYW5kIHJlZnJlc2ggdG9rZW5zLlxuICAgKi9cbiAgUkVGUkVTSDoge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIHVybDogJ2h0dHBzOi8vdHJhZGUtc2VydmljZS53ZWFsdGhzaW1wbGUuY29tL2F1dGgvcmVmcmVzaCcsXG4gICAgYXV0aGVudGljYXRlZDogZmFsc2UsXG4gICAgb25TdWNjZXNzOiBhc3luYyAocmVzcG9uc2UpID0+ICh7XG4gICAgICB0b2tlbnM6IHtcbiAgICAgICAgYWNjZXNzOiByZXNwb25zZS5oZWFkZXJzLmdldCgneC1hY2Nlc3MtdG9rZW4nKSxcbiAgICAgICAgcmVmcmVzaDogcmVzcG9uc2UuaGVhZGVycy5nZXQoJ3gtcmVmcmVzaC10b2tlbicpLFxuICAgICAgICBleHBpcmVzOiBwYXJzZUludChyZXNwb25zZS5oZWFkZXJzLmdldCgneC1hY2Nlc3MtdG9rZW4tZXhwaXJlcycpLCAxMCksXG4gICAgICB9LFxuICAgIH0pLFxuICAgIG9uRmFpbHVyZTogZGVmYXVsdEVuZHBvaW50QmVoYXZpb3VyLm9uRmFpbHVyZSxcbiAgfSxcblxuICAvKlxuICAgKiBHcmFicyBhbGwgYWNjb3VudCBpZHMgaW4gdGhpcyBXZWFsdGhzaW1wbGUgVHJhZGUgYWNjb3VudC5cbiAgICovXG4gIEFDQ09VTlRfSURTOiB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICB1cmw6ICdodHRwczovL3RyYWRlLXNlcnZpY2Uud2VhbHRoc2ltcGxlLmNvbS9hY2NvdW50L2xpc3QnLFxuICAgIGF1dGhlbnRpY2F0ZWQ6IHRydWUsXG4gICAgb25TdWNjZXNzOiBhc3luYyAocmVzcG9uc2UpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICAgIC8vIENvbGxlY3QgYWxsIGFjY291bnQgaWRzIHJlZ2lzdGVyZWQgdW5kZXIgdGhpcyBXZWFsdGhzaW1wbGUgVHJhZGUgQWNjb3VudFxuICAgICAgcmV0dXJuIGRhdGEucmVzdWx0cy5tYXAoKGFjY291bnQpID0+IGFjY291bnQuaWQpO1xuICAgIH0sXG4gICAgb25GYWlsdXJlOiBkZWZhdWx0RW5kcG9pbnRCZWhhdmlvdXIub25GYWlsdXJlLFxuICB9LFxuXG4gIC8qXG4gICAqIFRoZSBMSVNUX0FDQ09VTlQgZW5kcG9pbnQgcmV0cmlldmVzIGdlbmVyYWwgbWV0YWRhdGEgb2YgdGhlXG4gICAqIFdlYWx0aHNpbXBsZSBUcmFkZSBhY2NvdW50LCBpbmNsdWRpbmcgYmFsYW5jZXMsIGFjY291bnQgaWQsIGFuZFxuICAgKiBtb3JlLlxuICAgKi9cbiAgTElTVF9BQ0NPVU5UOiB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICB1cmw6ICdodHRwczovL3RyYWRlLXNlcnZpY2Uud2VhbHRoc2ltcGxlLmNvbS9hY2NvdW50L2xpc3QnLFxuICAgIGF1dGhlbnRpY2F0ZWQ6IHRydWUsXG4gICAgb25TdWNjZXNzOiBhc3luYyAocmVzcG9uc2UpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICByZXR1cm4gZGF0YS5yZXN1bHRzO1xuICAgIH0sXG4gICAgb25GYWlsdXJlOiBkZWZhdWx0RW5kcG9pbnRCZWhhdmlvdXIub25GYWlsdXJlLFxuICB9LFxuXG4gIC8qXG4gICAqIFRoZSBNRSBlbmRwb2ludCByZXRyaWV2ZXMgc29tZSBzdXJmYWNlIGluZm9ybWF0aW9uIGFib3V0IHlvdSBsaWtlXG4gICAqIHlvdXIgbmFtZSBhbmQgZW1haWwuXG4gICAqL1xuICBNRToge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgdXJsOiAnaHR0cHM6Ly90cmFkZS1zZXJ2aWNlLndlYWx0aHNpbXBsZS5jb20vbWUnLFxuICAgIGF1dGhlbnRpY2F0ZWQ6IHRydWUsXG4gICAgb25TdWNjZXNzOiBkZWZhdWx0RW5kcG9pbnRCZWhhdmlvdXIub25TdWNjZXNzLFxuICAgIG9uRmFpbHVyZTogZGVmYXVsdEVuZHBvaW50QmVoYXZpb3VyLm9uRmFpbHVyZSxcbiAgfSxcblxuICAvKlxuICAgKiBUaGUgUEVSU09OIGVuZHBvaW50IHJldHJpZXZlcyBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCB5b3UgdGhhdFxuICAgKiB5b3UgcHJvdmlkZWQgb24gc2lnbnVwLCBsaWtlIHJlc2lkZW50aWFsIGFuZCBtYWlsaW5nIGFkZHJlc3NlcyxcbiAgICogZW1wbG95bWVudCwgcGhvbmUgbnVtYmVycywgYW5kIHNvIG9uLlxuICAgKi9cbiAgUEVSU09OOiB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICB1cmw6ICdodHRwczovL3RyYWRlLXNlcnZpY2Uud2VhbHRoc2ltcGxlLmNvbS9wZXJzb24nLFxuICAgIGF1dGhlbnRpY2F0ZWQ6IHRydWUsXG4gICAgb25TdWNjZXNzOiBkZWZhdWx0RW5kcG9pbnRCZWhhdmlvdXIub25TdWNjZXNzLFxuICAgIG9uRmFpbHVyZTogZGVmYXVsdEVuZHBvaW50QmVoYXZpb3VyLm9uRmFpbHVyZSxcbiAgfSxcblxuICAvKlxuICAgKiBUaGUgSElTVE9SWV9BQ0NPVU5UIGVuZHBvaW50IHByb3ZpZGVzIGhpc3RvcmljYWwgc25hcHNob3RzIG9mIHRoZVxuICAgKiBXZWFsdGhzaW1wbGUgYWNjb3VudCBmb3IgYSBzcGVjaWZpZWQgdGltZWZyYW1lLlxuICAgKi9cbiAgSElTVE9SWV9BQ0NPVU5UOiB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICB1cmw6ICdodHRwczovL3RyYWRlLXNlcnZpY2Uud2VhbHRoc2ltcGxlLmNvbS9hY2NvdW50L2hpc3RvcnkvezB9P2FjY291bnRfaWQ9ezF9JyxcbiAgICBhdXRoZW50aWNhdGVkOiB0cnVlLFxuICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgIDA6ICdpbnRlcnZhbCcsXG4gICAgICAxOiAnYWNjb3VudElkJyxcbiAgICB9LFxuICAgIG9uU3VjY2VzczogZGVmYXVsdEVuZHBvaW50QmVoYXZpb3VyLm9uU3VjY2VzcyxcbiAgICBvbkZhaWx1cmU6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vbkZhaWx1cmUsXG4gIH0sXG5cbiAgLypcbiAgICogUHJvdmlkZXMgdGhlIG1vc3QgcmVjZW50IDIwIGFjdGl2aXRpZXMgKGRlcG9zaXRzLCBkaXZpZGVuZHMsIG9yZGVycywgZXRjKSBvbiB0aGUgV2VhbHRoc2ltcGxlXG4gICAqIFRyYWRlIGFjY291bnQuXG4gICAqL1xuICBBQ1RJVklUSUVTOiB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICB1cmw6ICdodHRwczovL3RyYWRlLXNlcnZpY2Uud2VhbHRoc2ltcGxlLmNvbS9hY2NvdW50L2FjdGl2aXRpZXMnLFxuICAgIGF1dGhlbnRpY2F0ZWQ6IHRydWUsXG4gICAgb25TdWNjZXNzOiBhc3luYyAocmVzcG9uc2UpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICByZXR1cm4gZGF0YS5yZXN1bHRzO1xuICAgIH0sXG4gICAgb25GYWlsdXJlOiBkZWZhdWx0RW5kcG9pbnRCZWhhdmlvdXIub25GYWlsdXJlLFxuICB9LFxuXG4gIC8qXG4gICAqIEFsbCBkZXBvc2l0cyB1bmRlciB0aGUgV2VhbHRoc2ltcGxlIFRyYWRlIGFjY291bnRcbiAgICovXG4gIERFUE9TSVRTOiB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICB1cmw6ICdodHRwczovL3RyYWRlLXNlcnZpY2Uud2VhbHRoc2ltcGxlLmNvbS9kZXBvc2l0cycsXG4gICAgYXV0aGVudGljYXRlZDogdHJ1ZSxcbiAgICBvblN1Y2Nlc3M6IGFzeW5jIChyZXNwb25zZSkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIHJldHVybiBkYXRhLnJlc3VsdHM7XG4gICAgfSxcbiAgICBvbkZhaWx1cmU6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vbkZhaWx1cmUsXG4gIH0sXG5cbiAgLypcbiAgICogQWxsIGxpbmtlZCBiYW5rIGFjY291bnRzIHVuZGVyIHRoZSBXZWFsdGhzaW1wbGUgVHJhZGUgYWNjb3VudFxuICAgKi9cbiAgQkFOS19BQ0NPVU5UUzoge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgdXJsOiAnaHR0cHM6Ly90cmFkZS1zZXJ2aWNlLndlYWx0aHNpbXBsZS5jb20vYmFuay1hY2NvdW50cycsXG4gICAgYXV0aGVudGljYXRlZDogdHJ1ZSxcbiAgICBvblN1Y2Nlc3M6IGFzeW5jIChyZXNwb25zZSkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIHJldHVybiBkYXRhLnJlc3VsdHM7XG4gICAgfSxcbiAgICBvbkZhaWx1cmU6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vbkZhaWx1cmUsXG4gIH0sXG5cbiAgLypcbiAgICogQ3VycmVudCBXZWFsdGhzaW1wbGUgVHJhZGUgVVNEL0NBRCBleGNoYW5nZSByYXRlc1xuICAgKi9cbiAgRVhDSEFOR0VfUkFURVM6IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHVybDogJ2h0dHBzOi8vdHJhZGUtc2VydmljZS53ZWFsdGhzaW1wbGUuY29tL2ZvcmV4JyxcbiAgICBhdXRoZW50aWNhdGVkOiB0cnVlLFxuICAgIG9uU3VjY2VzczogZGVmYXVsdEVuZHBvaW50QmVoYXZpb3VyLm9uU3VjY2VzcyxcbiAgICBvbkZhaWx1cmU6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vbkZhaWx1cmUsXG4gIH0sXG5cbiAgLypcbiAgICogR3JhYnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHNlY3VyaXR5IHJlc2VtYmxlZCBieSB0aGUgdGlja2VyLlxuICAgKi9cbiAgU0VDVVJJVFk6IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHVybDogJ2h0dHBzOi8vdHJhZGUtc2VydmljZS53ZWFsdGhzaW1wbGUuY29tL3NlY3VyaXRpZXM/cXVlcnk9ezB9JyxcbiAgICBhdXRoZW50aWNhdGVkOiB0cnVlLFxuICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgIDA6ICd0aWNrZXInLFxuICAgIH0sXG4gICAgb25TdWNjZXNzOiBhc3luYyAocmVzcG9uc2UpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICAgIGlmIChkYXRhLnJlc3VsdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU2VjdXJpdHkgZG9lcyBub3QgZXhpc3QnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRhdGEucmVzdWx0cztcbiAgICB9LFxuICAgIG9uRmFpbHVyZTogZGVmYXVsdEVuZHBvaW50QmVoYXZpb3VyLm9uRmFpbHVyZSxcbiAgfSxcblxuICAvKlxuICAgKiBGZXRjaGVzIGRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0IGEgc2VjdXJpdHkgdXNpbmcgaXRzIHVuaXF1ZVxuICAgKiBzZWN1cml0eSBpZGVudGlmaWVyLiBNYXJrZXQgcXVvdGUsIGJpZCBhbmQgYXNrIHNpemUsIGFuZCBvdGhlciBpbmZvcm1hdGlvblxuICAgKiBhcmUgcmV0dXJuZWQuXG4gICAqL1xuICBFWFRFTlNJVkVfU0VDVVJJVFlfREVUQUlMUzoge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgdXJsOiAnaHR0cHM6Ly90cmFkZS1zZXJ2aWNlLndlYWx0aHNpbXBsZS5jb20vc2VjdXJpdGllcy97MH0nLFxuICAgIGF1dGhlbnRpY2F0ZWQ6IHRydWUsXG4gICAgcGFyYW1ldGVyczoge1xuICAgICAgMDogJ2lkJyxcbiAgICB9LFxuICAgIG9uU3VjY2VzczogZGVmYXVsdEVuZHBvaW50QmVoYXZpb3VyLm9uU3VjY2VzcyxcbiAgICBvbkZhaWx1cmU6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vbkZhaWx1cmUsXG4gIH0sXG5cbiAgLypcbiAgICogRmV0Y2hlcyBoaXN0b3JpY2FsIHF1b3RlcyBmb3IgYSBzZWN1cml0eSBpbiB0aGUgc3BlY2lmaWVkIGludGVydmFsLlxuICAgKi9cbiAgUVVPVEVTX0hJU1RPUlk6IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHVybDogJ2h0dHBzOi8vdHJhZGUtc2VydmljZS53ZWFsdGhzaW1wbGUuY29tL3NlY3VyaXRpZXMvezB9L2hpc3RvcmljYWxfcXVvdGVzL3sxfT9taWM9WE5BUycsXG4gICAgYXV0aGVudGljYXRlZDogdHJ1ZSxcbiAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAwOiAnaWQnLFxuICAgICAgMTogJ2ludGVydmFsJyxcbiAgICB9LFxuICAgIG9uU3VjY2VzczogZGVmYXVsdEVuZHBvaW50QmVoYXZpb3VyLm9uU3VjY2VzcyxcbiAgICBvbkZhaWx1cmU6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vbkZhaWx1cmUsXG4gIH0sXG5cbiAgLypcbiAgICogTGlzdHMgYWxsIHBvc2l0aW9ucyB1bmRlciBhIHRyYWRpbmcgYWNjb3VudC5cbiAgICovXG4gIFBPU0lUSU9OUzoge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgdXJsOiAnaHR0cHM6Ly90cmFkZS1zZXJ2aWNlLndlYWx0aHNpbXBsZS5jb20vYWNjb3VudC9wb3NpdGlvbnM/YWNjb3VudF9pZD17MH0nLFxuICAgIGF1dGhlbnRpY2F0ZWQ6IHRydWUsXG4gICAgcGFyYW1ldGVyczoge1xuICAgICAgMDogJ2FjY291bnRJZCcsXG4gICAgfSxcbiAgICBvblN1Y2Nlc3M6IGFzeW5jIChyZXNwb25zZSkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIHJldHVybiBkYXRhLnJlc3VsdHM7XG4gICAgfSxcbiAgICBvbkZhaWx1cmU6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vbkZhaWx1cmUsXG4gIH0sXG5cbiAgLypcbiAgICogR3JhYiBhIHBhZ2Ugb2Ygb3JkZXJzICgyMCBvcmRlcnMpLlxuICAgKi9cbiAgT1JERVJTX0JZX1BBR0U6IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHVybDogJ2h0dHBzOi8vdHJhZGUtc2VydmljZS53ZWFsdGhzaW1wbGUuY29tL29yZGVycz9vZmZzZXQ9ezB9JmFjY291bnRfaWQ9ezF9JyxcbiAgICBhdXRoZW50aWNhdGVkOiB0cnVlLFxuICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgIDA6ICdvZmZzZXQnLFxuICAgICAgMTogJ2FjY291bnRJZCcsXG4gICAgfSxcbiAgICBvblN1Y2Nlc3M6IGFzeW5jIChyZXNwb25zZSkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvdGFsOiBkYXRhLnRvdGFsLFxuICAgICAgICBvcmRlcnM6IGRhdGEucmVzdWx0cyxcbiAgICAgIH07XG4gICAgfSxcbiAgICBvbkZhaWx1cmU6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vbkZhaWx1cmUsXG4gIH0sXG5cbiAgLypcbiAgICogQ2FuY2VscyBhIHNwZWNpZmljIG9yZGVyIGJ5IGl0cyBpZC5cbiAgICovXG4gIENBTkNFTF9PUkRFUjoge1xuICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgdXJsOiAnaHR0cHM6Ly90cmFkZS1zZXJ2aWNlLndlYWx0aHNpbXBsZS5jb20vb3JkZXJzL3swfScsXG4gICAgYXV0aGVudGljYXRlZDogdHJ1ZSxcbiAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAwOiAnb3JkZXJJZCcsXG4gICAgfSxcbiAgICBvblN1Y2Nlc3M6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vblN1Y2Nlc3MsXG4gICAgb25GYWlsdXJlOiBkZWZhdWx0RW5kcG9pbnRCZWhhdmlvdXIub25GYWlsdXJlLFxuICB9LFxuXG4gIC8qXG4gICAqIFBsYWNlcyBhbiBvcmRlciBmb3IgYSBzZWN1cml0eS5cbiAgICovXG4gIFBMQUNFX09SREVSOiB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgdXJsOiAnaHR0cHM6Ly90cmFkZS1zZXJ2aWNlLndlYWx0aHNpbXBsZS5jb20vb3JkZXJzJyxcbiAgICBhdXRoZW50aWNhdGVkOiB0cnVlLFxuICAgIG9uU3VjY2VzczogZGVmYXVsdEVuZHBvaW50QmVoYXZpb3VyLm9uU3VjY2VzcyxcbiAgICBvbkZhaWx1cmU6IGRlZmF1bHRFbmRwb2ludEJlaGF2aW91ci5vbkZhaWx1cmUsXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBXZWFsdGhzaW1wbGVUcmFkZUVuZHBvaW50cztcbiIsImltcG9ydCBoYW5kbGVSZXF1ZXN0LCB7IHJlZnJlc2hBdXRoZW50aWNhdGlvbiB9IGZyb20gJy4vbmV0d29yay9odHRwcyc7XG5pbXBvcnQgZW5kcG9pbnRzIGZyb20gJy4vYXBpL2VuZHBvaW50cyc7XG5pbXBvcnQgdG9rZW5zIGZyb20gJy4vY29yZS90b2tlbnMnO1xuXG4vLyBhdXRoZW50aWNhdGlvbiBldmVudHNcbmNvbnN0IGV2ZW50cyA9IHtcbiAgb3RwOiBudWxsLFxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGZ1bmN0aW9uIHRvIHJ1biBvbiBhIGNlcnRhaW4gZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZXZlbnQgVGhlIHRyaWdnZXIgZm9yIHRoZSBmdW5jdGlvblxuICAgKiBAcGFyYW0geyp9IGhhbmRsZXIgZXZlbnQgaGFuZGxlciBmb3IgdGhlIGV2ZW50XG4gICAqL1xuICBvbihldmVudCwgaGFuZGxlcikge1xuICAgIGlmICghKGV2ZW50IGluIGV2ZW50cykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgYXV0aGVudGljYXRpb24gZXZlbnQgJyR7ZXZlbnR9JyFgKTtcbiAgICB9XG5cbiAgICBldmVudHNbZXZlbnRdID0gaGFuZGxlcjtcbiAgfSxcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgYXV0aCBtb2R1bGUgd2l0aCBhbiBleGlzdGluZyBzdGF0ZSBvZiB0b2tlbnMuXG4gICAqIFRoZSBzdGF0ZSBwcm92aWRlZCBzaG91bGQgY29udGFpbiBhY2Nlc3MsIHJlZnJlc2gsIGFuZCBleHBpcmVzIHByb3BlcnRpZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gc3RhdGUgUHJlLWV4aXN0aW5nIGF1dGhlbnRpY2F0aW9uIHN0YXRlXG4gICAqL1xuICB1c2U6IChzdGF0ZSkgPT4gdG9rZW5zLnN0b3JlKHN0YXRlKSxcblxuICAvKipcbiAgICogU25hcHNob3Qgb2YgdGhlIGN1cnJlbnQgYXV0aGVudGljYXRpb24gdG9rZW5zLlxuICAgKi9cbiAgdG9rZW5zOiAoKSA9PiAoeyBhY2Nlc3M6IHRva2Vucy5hY2Nlc3MsIHJlZnJlc2g6IHRva2Vucy5yZWZyZXNoLCBleHBpcmVzOiB0b2tlbnMuZXhwaXJlcyB9KSxcblxuICAvKipcbiAgICogQXR0ZW1wdHMgdG8gZXN0YWJsaXNoIGEgc2Vzc2lvbiBmb3IgdGhlIHByb3ZpZGVkIGVtYWlsIGFuZCBwYXNzd29yZC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBlbWFpbCBlbWFpbGVkIHJlZ2lzdGVyZWQgYnkgdGhlIFdlYWx0aHNpbXBsZSBUcmFkZSBhY2NvdW50XG4gICAqIEBwYXJhbSB7Kn0gcGFzc3dvcmQgVGhlIHBhc3N3b3JkIG9mIHRoZSBhY2NvdW50XG4gICAqL1xuICBhc3luYyBsb2dpbihlbWFpbCwgcGFzc3dvcmQpIHtcbiAgICBsZXQgcmVzcG9uc2UgPSBudWxsO1xuXG4gICAgLypcbiAgICAgKiBJZiB3ZSBhcmUgZ2l2ZW4gYSBmdW5jdGlvbiBmb3Igb3RwLCB0aGVuIHdlIG11c3QgZmFpbCBhIGxvZyBpbiB0b1xuICAgICAqIHRyaWdnZXIgYW4gT1RQIGV2ZW50IHdpdGggV2VhbHRoc2ltcGxlIFRyYWRlLiBUaGlzIHdpbGwgYWxsb3cgdGhlIHVzZXJcbiAgICAgKiBvdHAgdGh1bmsgdG8gcmV0cmlldmUgdGhlIGNvZGUuXG4gICAgICpcbiAgICAgKiBJZiBhIGxpdGVyYWwgdmFsdWUgaXMgcHJvdmlkZWQgZm9yIG90cCwgaXQgbWVhbnMgdGhlIHVzZXIgaGFzIG1hbnVhbGx5XG4gICAgICogcHJvdmlkZWQgdXMgd2l0aCB0aGUgb3RwIGNvZGUuIFdlIGNhbiBza2lwIHRoaXMgbG9naW4gYXR0ZW1wdC5cbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIChldmVudHMub3RwKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYXdhaXQgaGFuZGxlUmVxdWVzdChlbmRwb2ludHMuTE9HSU4sIHtcbiAgICAgICAgZW1haWwsXG4gICAgICAgIHBhc3N3b3JkLFxuICAgICAgfSkuY2F0Y2goKCkgPT4ge30pO1xuICAgIH1cblxuICAgIC8vIFRyeSB0byBsb2cgaW4gZm9yIHJlYWwgdGhpcyB0aW1lLlxuICAgIHRyeSB7XG4gICAgICByZXNwb25zZSA9IGF3YWl0IGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLkxPR0lOLCB7XG4gICAgICAgIGVtYWlsLFxuICAgICAgICBwYXNzd29yZCxcbiAgICAgICAgb3RwOiB0eXBlb2YgKGV2ZW50cy5vdHApID09PSAnZnVuY3Rpb24nID8gYXdhaXQgZXZlbnRzLm90cCgpIDogZXZlbnRzLm90cCxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyB3ZSBtaWdodCBoYXZlIGZhaWxlZCBiZWNhdXNlIE9UUCB3YXMgbm90IHByb3ZpZGVkXG4gICAgICBpZiAoIWV2ZW50cy5vdHApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPVFAgbm90IHByb3ZpZGVkIScpO1xuICAgICAgfVxuXG4gICAgICAvLyBTZWVtcyB0byBiZSBpbmNvcnJlY3QgY3JlZGVudGlhbHMgb3IgT1RQLlxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuXG4gICAgLy8gQ2FwdHVyZSB0aGUgdG9rZW5zIGZvciBsYXRlciB1c2FnZS5cbiAgICB0aGlzLnVzZShyZXNwb25zZS50b2tlbnMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBuZXcgc2V0IG9mIGFjY2VzcyBhbmQgcmVmcmVzaCB0b2tlbnMuXG4gICAqL1xuICByZWZyZXNoOiBhc3luYyAoKSA9PiByZWZyZXNoQXV0aGVudGljYXRpb24oKSxcbn07XG4iLCIvLyBIb2xkcyBvcHRpb25hbCBmZWF0dXJlcyB0aGF0IGhhdmUgYmVlbiBkaXNhYmxlZC5cbmNvbnN0IGRpc2FibGVkID0gWydzZWN1cml0aWVzX2NhY2hlJ107XG5cbmV4cG9ydCBjb25zdCBjb25maWdFbmFibGVkID0gKGZlYXR1cmUpID0+ICFkaXNhYmxlZC5pbmNsdWRlcyhmZWF0dXJlKTtcblxuLyoqXG4gKiBFbmFibGUgb3IgZGlzYWJsZSBhIG9wdGlvbmFsIGZlYXR1cmUgd2l0aGluIHdzdHJhZGUtYXBpLlxuICpcbiAqIEV4YW1wbGVzOlxuICogLS0tXG4gKiBjb25maWcoJ3BhbmNha2VzJylcbiAqIEVuYWJsZXMgdGhlIGZpY3RpdGlvdXMgcGFuY2FrZXMgZmVhdHVyZS5cbiAqXG4gKiBjb25maWcoJ25vX3BhbmNha2VzJylcbiAqIERpc2FibGVzIHRoZSBmaWN0aXRpb3VzIHBhbmNha2VzIGZlYXR1cmUuXG4gKlxuICogQHBhcmFtIHsqfSBmZWF0dXJlIFRoZSBzdHJpbmcgaWRlbnRpZmllciBmb3IgdGhlIGZlYXR1cmUsIHN0YXJ0aW5nIHdpdGggXCJub19cIiBpZlxuICogICAgICAgICAgICAgICAgICAgIHlvdSB3aXNoIHRvIGRpc2FibGUgaXQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbmZpZyhmZWF0dXJlKSB7XG4gIGlmIChmZWF0dXJlPy5zdGFydHNXaXRoKCdub18nKSkge1xuICAgIGNvbnN0IGN1dCA9IGZlYXR1cmUuc3Vic3RyaW5nKGZlYXR1cmUuaW5kZXhPZignXycpICsgMSk7XG5cbiAgICAvLyBXZSB3aWxsIG9ubHkgYXBwZW5kIHRoaXMgaWYgaXQgaXNuJ3QgYWxyZWFkeSBpbiB0aGVyZS5cbiAgICBpZiAoY29uZmlnRW5hYmxlZChjdXQpKSB7XG4gICAgICBkaXNhYmxlZC5wdXNoKGN1dCk7XG4gICAgfVxuXG4gIC8vIE9ubHkgZGVsZXRlIHRoZSBmZWF0dXJlIGlmIGl0J3MgYWxyZWFkeSBkaXNhYmxlZC5cbiAgfSBlbHNlIGlmICghY29uZmlnRW5hYmxlZChmZWF0dXJlKSkge1xuICAgIGRpc2FibGVkLnNwbGljZShkaXNhYmxlZC5pbmRleE9mKGZlYXR1cmUpLCAxKTtcbiAgfVxufVxuIiwiLy8gRXhjaGFuZ2VzIHN1cHBvcnRlZCBieSBXZWFsdGhzaW1wbGUgVHJhZGVcbi8vICdDQycgaXMgbm90IGFuIGV4Y2hhbmdlOyBpdCBzdGFuZHMgZm9yIENyeXB0byBjdXJyZW5jeSBhbmRcbi8vIGl0IGFsbG93cyB1cyB0byBkaXN0aW5ndWlzaCBpdCBmcm9tIGNvbnZlbnRpb25hbCBzZWN1cml0aWVzLlxuY29uc3QgZXhjaGFuZ2VzID0gWydOQVNEQVEnLCAnTllTRScsICdUU1gnLCAnVFNYLVYnLCAnTkVPJywgJ0NDJ107XG5cbi8qKlxuICogVGlja2VyIHByb3ZpZGVzIGEgbG9naWNhbCBlbmNhcHN1bGF0aW9uIGZvciB0aGUgYWxsb3dlZCBmb3Jtc1xuICogb2YgYSBzZWN1cml0eSB0aWNrZXIgd2l0aGluIHRoZSBXZWFsdGhzaW1wbGUgVHJhZGUgYXBwbGljYXRpb24uXG4gKlxuICogSXQgcHJvdmlkZXMgdmFsaWRhdGlvbiBvZiB0aGUgZm9ybWF0IG9mIHRoZSB0aWNrZXIsIGFuZCB0aGVcbiAqIHZhbHVlIG9mIHRoZSBleGNoYW5nZSwgaWYgcHJvdmlkZWQuXG4gKlxuICogVGlja2VycyBtYXkgYmUgc3BlY2lmaWVkIGFzIHR3byBkYXRhIHR5cGVzOlxuICpcbiAqIC0gc3RyaW5nOiBUaGUgdGlja2VyIG1heSBiZSBhIHNpbXBsZSBzdHJpbmcgY29udGFpbmluZyB0aGUgc3ltYm9sLCBvciBhIGNvbWJpbmF0aW9uIG9mXG4gKiB0aGUgc3ltYm9sIGFuZCBleGNoYW5nZSBzZXBhcmF0ZWQgYnkgYSBjb2xvbi5cbiAqIC0gb2JqZWN0OiBUaGUgdGlja2VyIG1heSBiZSBhbiBvYmplY3Qgd2l0aCBzeW1ib2wsIGV4Y2hhbmdlLCBvciBpZCBwcm9wZXJ0aWVzLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqIFwiQUFQTFwiXG4gKiBcIlVCRVI6TllTRVwiXG4gKiB7IHN5bWJvbDogXCJBQVBMXCIgfVxuICogeyBzeW1ib2w6IFwiVUJFUlwiLCBleGNoYW5nZTogXCJOWVNFXCIgfVxuICogeyBpZDogXCJzZWMtcy03NmE3MTU1MjQyZTg0Nzc4ODBjYmI0MzI2OTIzNWNiNlwiIH1cbiAqL1xuY2xhc3MgVGlja2VyIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgdGhlIHRpY2tlciBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHNlY3VyaXR5IHRpY2tlciB2YWx1ZSwgcHJvdmlkZWQgYXMgYSBzdHJpbmcgb3IgYW4gb2JqZWN0IHdpdGggc3ltYm9sLFxuICAgKiBleGNoYW5nZSwgb3IgaWQuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIHRoaXMuc3ltYm9sID0gbnVsbDtcbiAgICB0aGlzLmV4Y2hhbmdlID0gbnVsbDtcbiAgICB0aGlzLmlkID0gbnVsbDtcbiAgICB0aGlzLmNyeXB0byA9IGZhbHNlO1xuXG4gICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gRW1wdHkgdGlja2VycyBhcmUgbm90IGFsbG93ZWRcbiAgICAgIGlmICh2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbXB0eSB0aWNrZXInKTtcbiAgICAgIH1cblxuICAgICAgW3RoaXMuc3ltYm9sLCB0aGlzLmV4Y2hhbmdlXSA9IHZhbHVlLnNwbGl0KCc6Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFlvdSBuZWVkIGF0IGxlYXN0IGEgc3ltYm9sIG9yIGlkIHRvIGZvcm0gYSB0aWNrZXIuXG4gICAgICBpZiAoIXZhbHVlLnN5bWJvbCAmJiAhdmFsdWUuaWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHRpY2tlciAnJHt2YWx1ZX0nYCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3ltYm9sID0gdmFsdWUuc3ltYm9sIHx8IG51bGw7XG4gICAgICB0aGlzLmV4Y2hhbmdlID0gdmFsdWUuZXhjaGFuZ2UgfHwgbnVsbDtcbiAgICAgIHRoaXMuaWQgPSB2YWx1ZS5pZCB8fCBudWxsO1xuICAgIH1cblxuICAgIC8vIEd1YXJhbnRlZSB0aGF0IHRoZSBleGNoYW5nZSBpcyB2YWxpZCBpZiBub3QgbnVsbFxuICAgIGlmICh0aGlzLmV4Y2hhbmdlICYmICFleGNoYW5nZXMuaW5jbHVkZXModGhpcy5leGNoYW5nZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBleGNoYW5nZSAnJHt0aGlzLmV4Y2hhbmdlfSchYCk7XG4gICAgfVxuXG4gICAgLy8gU2V0IHRoZSBjcnlwdG8gcHJvcGVydHkgdG8gdHJ1ZSB0byB0cmVhdCB0aGlzIHNlY3VyaXR5IGFzIGNyeXB0b2N1cnJlbmN5XG4gICAgaWYgKHRoaXMuZXhjaGFuZ2UgPT09ICdDQycgfHwgdGhpcy5pZD8uc3RhcnRzV2l0aCgnc2VjLXonKSkge1xuICAgICAgdGhpcy5jcnlwdG8gPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIFdlYWx0aHNpbXBsZSBUcmFkZSBkb2Vzbid0IGhhdmUgYSBzaG9ydCBleGNoYW5nZSBpZCAoJ05FTycpIGZvclxuICAgIC8vIEFFUVVJVEFTIE5FTyBFWENIQU5HRSBmb3Igc29tZSByZWFzb24uLi5cbiAgICAvLyBXZSBoYXZlIHRvIG1hcCBpdCB0byB0aGUgZnVsbCBuYW1lIGZvciBjb21wYXJpc29ucyB0byB3b3JrLlxuICAgIGlmICh0aGlzLmV4Y2hhbmdlID09PSAnTkVPJykge1xuICAgICAgdGhpcy5leGNoYW5nZSA9ICdBRVFVSVRBUyBORU8gRVhDSEFOR0UnO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWR1Y2VzIHRoZSB0aWNrZXIgb2JqZWN0IHRvIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxuICAgKi9cbiAgZm9ybWF0KCkge1xuICAgIGlmICh0aGlzLmlkKSB7XG4gICAgICByZXR1cm4gdGhpcy5pZDtcbiAgICB9XG5cbiAgICAvLyBXZSBtdXN0IHJldHJhbnNsYXRlIHRoZSBmdWxsIG5hbWUgb2YgdGhlIE5FTyBleGNoYW5nZSBiYWNrIHRvIE5FT1xuICAgIGlmICh0aGlzLmV4Y2hhbmdlID09PSAnQUVRVUlUQVMgTkVPIEVYQ0hBTkdFJykge1xuICAgICAgcmV0dXJuIGAke3RoaXMuc3ltYm9sfTpORU9gO1xuICAgIH1cblxuICAgIHJldHVybiBgJHt0aGlzLnN5bWJvbH0ke3RoaXMuZXhjaGFuZ2UgPyBgOiR7dGhpcy5leGNoYW5nZX1gIDogJyd9YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wYXJlcyBzeW1ib2wgb3IgaWQgd2l0aCBhbm90aGVyIHRpY2tlci4gVGhpcyBpcyB3ZWFrIGJlY2F1c2VcbiAgICogZXhjaGFuZ2UgaXMgbm90IGNvbXBhcmVkIGhlcmUsIGFsbG93aW5nIGZvciBmYWxzZSBwb3NpdGl2ZXNcbiAgICogb2Ygc3ltYm9scyBvbiBkaWZmZXJlbnQgZXhjaGFuZ2VzLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IG90aGVyIFRpY2tlciB0byBjb21wYXJlIHVzIHdpdGhcbiAgICovXG4gIHdlYWtFcXVhbHMob3RoZXIpIHtcbiAgICBpZiAodGhpcy5pZCAmJiB0aGlzLmlkID09PSBvdGhlci5pZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc3ltYm9sICYmIHRoaXMuc3ltYm9sID09PSBvdGhlci5zeW1ib2wgJiYgdGhpcy5jcnlwdG8gPT09IG90aGVyLmNyeXB0bykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRpY2tlcjtcbiIsIi8qKlxuICogQ29tcHV0ZXMgdGhlIGN1cnJlbnQgdGltZSBpbiBlcG9jaCBzZWNvbmRzLlxuICovXG5jb25zdCBlcG9jaFNlY29uZHMgPSAoKSA9PiBwYXJzZUludChEYXRlLm5vdygpIC8gMTAwMCwgMTApO1xuZXhwb3J0IGRlZmF1bHQgZXBvY2hTZWNvbmRzO1xuIiwiaW1wb3J0IGVwb2NoU2Vjb25kcyBmcm9tICcuLi9oZWxwZXJzL3RpbWUnO1xuXG4vKipcbiAqIFRoaXMgbW9kdWxlIHdpbGwgcHJvdmlkZSBhIHVuaWZvcm0gaW50ZXJmYWNlIGZvciBzdG9yYWdlXG4gKiBhbmQgcmV0cmlldmFsIG9mIGF1dGhlbnRpY2F0b24gdG9rZW5zIHRocm91Z2hvdXQgd3N0cmFkZS1hcGkuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYWNjZXNzOiBudWxsLFxuICByZWZyZXNoOiBudWxsLFxuICBleHBpcmVzOiBudWxsLFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBhdXRoZW50aWNhdGlvbiB0b2tlbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdG9rZW5zIFRoZSBuZXcgdG9rZW5zXG4gICAqL1xuICBzdG9yZSh0b2tlbnMpIHtcbiAgICB0aGlzLmFjY2VzcyA9IHRva2Vucy5hY2Nlc3M7XG4gICAgdGhpcy5yZWZyZXNoID0gdG9rZW5zLnJlZnJlc2g7XG4gICAgdGhpcy5leHBpcmVzID0gdG9rZW5zLmV4cGlyZXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgY3VycmVudCB0b2tlbnMgaGF2ZSBleHBpcmVkLlxuICAgKi9cbiAgZXhwaXJlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5leHBpcmVzICYmIGVwb2NoU2Vjb25kcygpID49IHRoaXMuZXhwaXJlcztcbiAgfSxcbn07XG4iLCJpbXBvcnQgQVBJQ2FjaGUgZnJvbSAnLi4vY29yZS9jYWNoZSc7XG5pbXBvcnQgVGlja2VyIGZyb20gJy4uL2NvcmUvdGlja2VyJztcblxuY29uc3QgY2FjaGUgPSBuZXcgQVBJQ2FjaGUoMTApO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIC8qKlxuICAgICAqIFF1ZXJ5IHRoZSBjYWNoZSBmb3IgdGhlIHNlY3VyaXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBzZWN1cml0eVxuICAgICAqL1xuICBnZXQoc2VjdXJpdHkpIHtcbiAgICAvLyBNdXN0IGRpZ2VzdCB0aGUgc2VjdXJpdHkgaW50byB0aGUgc3RhbmRhcmQgZm9ybWF0XG4gICAgY29uc3QgcmVzdWx0ID0gY2FjaGUuZ2V0KG5ldyBUaWNrZXIoc2VjdXJpdHkpLmZvcm1hdCgpKTtcblxuICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcblxuICAvKipcbiAgICAgKiBSZW1lbWJlciB0aGUgc2VjdXJpdHkgZm9yIGEgZnV0dXJlIHF1aWNrIHJldHJpZXZhbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0ga2V5XG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgICAqL1xuICBpbnNlcnQoa2V5LCB2YWx1ZSkge1xuICAgIGNhY2hlLmluc2VydChuZXcgVGlja2VyKGtleSkuZm9ybWF0KCksIHZhbHVlKTtcbiAgfSxcbn07XG4iLCIvKlxuICogQVBJQ2FjaGUgaXMgYW4gaW50ZXJuYWwgZWZmb3J0IHRvIG1pbmltaXplIHVubmVjZXNzYXJ5IEFQSSBjYWxscyB3aGVyZVxuICogcG9zc2libGUuIEEgc3BlY2lmaWMgdXNlY2FzZSB3aGVyZSBhIGNhY2hlIGlzIHVzZWZ1bCBpcyBmaWd1cmluZyBvdXQgdGhlXG4gKiBleGNoYW5nZSBhIHNlY3VyaXR5IGJlbG9uZ3MgdG8uIEEgY2FjaGUgd291bGQgYWxsb3cgdXMgdG8gbWVtb3JpemVcbiAqIHRoaXMgc3RhdGljIGRhdGEgZm9yIGEgcGVyaW9kIG9mIHRpbWUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgQVBJIGNhbGxzLlxuICpcbiAqIFRoZSBjbGFzcyBlbmNhcHN1bGF0ZXMgdGhlIGZvbGxvd2luZyBjYWNoZSBiZWhhdmlvdXI6XG4gKiAtIEEgbWF4aW11bSBlbnRyaWVzIHByb3ZpZGVkIGFzIGEgY29uc3RydWN0b3IgYXJndW1lbnRcbiAqIC0gRmlyc3QgaW4sIEZpcnN0IG91dCAoRklGTykgbW9kZWxcbiAqXG4gKiBUaGUgaW50ZXJuZWwgZGF0YSBzdHJ1Y3R1cmUgaXMgYSBIYXNoU2V0LCBzbyBsb29rdXAgdGltZSBjb3N0IGlzIGZhaXJseVxuICogbWluaW1hbC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQVBJQ2FjaGUge1xuICBjb25zdHJ1Y3RvcihzaXplKSB7XG4gICAgdGhpcy5jYWNoZSA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLnNpemUgPSBzaXplO1xuICB9XG5cbiAgLyoqXG4gICAgICogU3RvcmUgdGhlIGtleS12YWx1ZSBwYWlyIGludG8gdGhpcyBjYWNoZS4gVGhlIG9sZGVzdCBlbnRyeSBpcyBldmljdGVkIGlmXG4gICAgICogd2UncmUgb3V0IG9mIHNwYWNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBrZXlcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgICovXG4gIGluc2VydChrZXksIHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuY2FjaGUuc2l6ZSA+PSB0aGlzLnNpemUpIHtcbiAgICAgIHRoaXMuY2FjaGUuZGVsZXRlKHRoaXMuY2FjaGUua2V5cygpLm5leHQoKS52YWx1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5jYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICAgKiBSZXRyaWV2ZSB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IGtleVxuICAgICAqL1xuICBnZXQoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0KGtleSk7XG4gIH1cbn1cbiIsImltcG9ydCBlbmRwb2ludHMgZnJvbSAnLi9hcGkvZW5kcG9pbnRzJztcbmltcG9ydCBoYW5kbGVSZXF1ZXN0IGZyb20gJy4vbmV0d29yay9odHRwcyc7XG5pbXBvcnQgVGlja2VyIGZyb20gJy4vY29yZS90aWNrZXInO1xuaW1wb3J0IHsgY29uZmlnRW5hYmxlZCB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCBjYWNoZSBmcm9tICcuL29wdGlvbmFsL3NlY3VyaXRpZXMtY2FjaGUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgLyoqXG4gICAqIEEgc25hcHNob3Qgb2YgdGhlIGN1cnJlbnQgVVNEL0NBRCBleGNoYW5nZSByYXRlcyBvbiB0aGUgV2VhbHRoc2ltcGxlIFRyYWRlXG4gICAqIHBsYXRmb3JtLlxuICAgKi9cbiAgZXhjaGFuZ2VSYXRlczogYXN5bmMgKCkgPT4gaGFuZGxlUmVxdWVzdChlbmRwb2ludHMuRVhDSEFOR0VfUkFURVMsIHt9KSxcblxuICAvKipcbiAgICogSW5mb3JtYXRpb24gYWJvdXQgYSBzZWN1cml0eSBvbiB0aGUgV2VhbHRoc2ltcGxlIFRyYWRlIFBsYXRmb3JtLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHVzZXJUaWNrZXIgVGhlIHNlY3VyaXR5IGlkXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZXh0ZW5zaXZlIFB1bGxzIGEgbW9yZSBkZXRhaWxlZCByZXBvcnQgb2YgdGhlIHNlY3VyaXR5IHVzaW5nIHRoZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvc2VjdXJpdGllcy97aWR9IEFQSVxuICAgKi9cbiAgZ2V0U2VjdXJpdHk6IGFzeW5jICh1c2VyVGlja2VyLCBleHRlbnNpdmUpID0+IHtcbiAgICBsZXQgcmVzdWx0ID0gbnVsbDtcblxuICAgIC8vIFJ1biBzb21lIHZhbGlkYXRpb24gb24gdGhlIHRpY2tlclxuICAgIGNvbnN0IHRpY2tlciA9IG5ldyBUaWNrZXIodXNlclRpY2tlcik7XG5cbiAgICBpZiAoIWV4dGVuc2l2ZSAmJiBjb25maWdFbmFibGVkKCdzZWN1cml0aWVzX2NhY2hlJykpIHtcbiAgICAgIHJlc3VsdCA9IGNhY2hlLmdldCh0aWNrZXIpO1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aWNrZXIuaWQpIHtcbiAgICAgIC8vIFdlIHdpbGwgaW1tZWRpYXRlbHkgY2FsbCB0aGUgZXh0ZW5zaXZlIGRldGFpbHMgQVBJIHNpbmNlIHdlIGhhdmUgdGhlIHVuaXF1ZSBpZC5cbiAgICAgIHJlc3VsdCA9IGF3YWl0IGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLkVYVEVOU0lWRV9TRUNVUklUWV9ERVRBSUxTLCB7IGlkOiB0aWNrZXIuaWQgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLlNFQ1VSSVRZLCB7IHRpY2tlcjogdGlja2VyLnN5bWJvbCB9KTtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdC5maWx0ZXIoKHNlY3VyaXR5KSA9PiBzZWN1cml0eS5zdG9jay5zeW1ib2wgPT09IHRpY2tlci5zeW1ib2wpO1xuXG4gICAgICBpZiAodGlja2VyLmNyeXB0bykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuZmlsdGVyKChzZWN1cml0eSkgPT4gc2VjdXJpdHkuc2VjdXJpdHlfdHlwZSA9PT0gJ2NyeXB0b2N1cnJlbmN5Jyk7XG4gICAgICB9IGVsc2UgaWYgKHRpY2tlci5leGNoYW5nZSkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuZmlsdGVyKChzZWN1cml0eSkgPT4gc2VjdXJpdHkuc3RvY2sucHJpbWFyeV9leGNoYW5nZSA9PT0gdGlja2VyLmV4Y2hhbmdlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTXVsdGlwbGUgc2VjdXJpdGllcyBtYXRjaGVkIHF1ZXJ5LicpO1xuICAgICAgfSBpZiAocmVzdWx0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHNlY3VyaXRpZXMgbWF0Y2hlZCBxdWVyeS4nKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ29udmVydCByZXN1bHQgZnJvbSBhIHNpbmdsZXRvbiBsaXN0IHRvIGl0cyByYXcgZW50cnlcbiAgICAgIFtyZXN1bHRdID0gcmVzdWx0O1xuXG4gICAgICBpZiAoZXh0ZW5zaXZlKSB7XG4gICAgICAgIC8vIFRoZSBjYWxsZXIgaGFzIG9wdGVkIHRvIHJlY2VpdmUgdGhlIGV4dGVuc2l2ZSBkZXRhaWxzIGFib3V0IHRoZSBzZWN1cml0eS5cbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgaGFuZGxlUmVxdWVzdChlbmRwb2ludHMuRVhURU5TSVZFX1NFQ1VSSVRZX0RFVEFJTFMsIHsgaWQ6IHJlc3VsdC5pZCB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29uZmlnRW5hYmxlZCgnc2VjdXJpdGllc19jYWNoZScpICYmIGNhY2hlLmdldCh0aWNrZXIpID09PSBudWxsKSB7XG4gICAgICBjYWNoZS5pbnNlcnQodGlja2VyLCByZXN1bHQpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgSGVhZGVycyB9IGZyb20gJ25vZGUtZmV0Y2gnO1xuXG5jb25zdCBjdXN0b21IZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gIC8qKlxuICAgKiBBcHBlbmRzIGEgaGVhZGVyIG5hbWUtdmFsdWUgcGFpciB0byBhbGwgcmVxdWVzdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gbmFtZSBIZWFkZXIga2V5XG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgSGVhZGVyIHZhbHVlXG4gICAqL1xuICBhZGQ6IChuYW1lLCB2YWx1ZSkgPT4gY3VzdG9tSGVhZGVycy5hcHBlbmQobmFtZSwgdmFsdWUpLFxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgY3VzdG9tIGhlYWRlciBmcm9tIGFsbCByZXF1ZXN0cy5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBuYW1lIEhlYWRlciBrZXlcbiAgICovXG4gIHJlbW92ZTogKG5hbWUpID0+IGN1c3RvbUhlYWRlcnMuZGVsZXRlKG5hbWUpLFxuXG4gIC8qKlxuICAgKiBDbGVhcnMgYWxsIGN1c3RvbSBoZWFkZXJzLlxuICAgKi9cbiAgY2xlYXI6ICgpID0+IFsuLi5jdXN0b21IZWFkZXJzXS5mb3JFYWNoKChoZWFkZXIpID0+IGN1c3RvbUhlYWRlcnMuZGVsZXRlKGhlYWRlclswXSkpLFxuXG4gIC8qKlxuICAgKiBQcm9kdWNlcyBhIGxpc3Qgb2YgY3VzdG9tIGhlYWRlcnMuXG4gICAqL1xuICB2YWx1ZXM6ICgpID0+IFsuLi5jdXN0b21IZWFkZXJzXSxcbn07XG4iLCJyZXF1aXJlKCdzb3VyY2UtbWFwLXN1cHBvcnQnKS5pbnN0YWxsKCk7XG5cbmNvbnN0IGF1dGggPSByZXF1aXJlKCcuL2F1dGgnKS5kZWZhdWx0O1xuY29uc3QgaGVhZGVycyA9IHJlcXVpcmUoJy4vaGVhZGVycycpLmRlZmF1bHQ7XG5jb25zdCBhY2NvdW50cyA9IHJlcXVpcmUoJy4vYWNjb3VudHMnKS5kZWZhdWx0O1xuY29uc3Qgb3JkZXJzID0gcmVxdWlyZSgnLi9vcmRlcnMnKS5kZWZhdWx0O1xuY29uc3QgZGF0YSA9IHJlcXVpcmUoJy4vZGF0YScpLmRlZmF1bHQ7XG5jb25zdCBxdW90ZXMgPSByZXF1aXJlKCcuL3F1b3RlcycpLmRlZmF1bHQ7XG5jb25zdCBjb25maWcgPSByZXF1aXJlKCcuL2NvbmZpZycpLmRlZmF1bHQ7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhdXRoLFxuICBoZWFkZXJzLFxuICBhY2NvdW50cyxcbiAgb3JkZXJzLFxuICBxdW90ZXMsXG4gIGRhdGEsXG4gIGNvbmZpZyxcbn07XG4iLCJpbXBvcnQgZmV0Y2gsIHsgSGVhZGVycyB9IGZyb20gJ25vZGUtZmV0Y2gnO1xuaW1wb3J0IGN1c3RvbUhlYWRlcnMgZnJvbSAnLi4vaGVhZGVycyc7XG5pbXBvcnQgdG9rZW5zIGZyb20gJy4uL2NvcmUvdG9rZW5zJztcbmltcG9ydCBlbmRwb2ludHMgZnJvbSAnLi4vYXBpL2VuZHBvaW50cyc7XG5pbXBvcnQgeyBjb25maWdFbmFibGVkIH0gZnJvbSAnLi4vY29uZmlnJztcblxuY29uc3QgW0hUVFBfT0ssIEhUVFBfQ1JFQVRFRF0gPSBbMjAwLCAyMDFdO1xuXG4vKlxuICogQ29tcGxldGUgdGhlIFVSTCBieSBmaWxsaW5nIHRoZSBwYXJhbWV0ZXIgcGxhY2Vob2xkZXJzIHdpdGggdGhlXG4gKiBkYXRhIGFyZ3VtZW50cy5cbiAqL1xuZnVuY3Rpb24gZmluYWxpemVSZXF1ZXN0KGVuZHBvaW50LCBkYXRhKSB7XG4gIC8vIE1ha2UgYSBjb3B5IHNvIHdlIGRvbid0IG1vZGlmeSB0aGUgb3JpZ2luYWwgb25lLlxuICBjb25zdCBwYXJhbXMgPSB7IC4uLmRhdGEgfTtcbiAgbGV0IHsgdXJsIH0gPSBlbmRwb2ludDtcblxuICAvLyBObyBuZWVkIHRvIGRvIGFueXRoaW5nIGlmIHRoZSBVUkwgaXMgc3RhdGljIChubyBwYXJhbWV0ZXJzKVxuICBpZiAoZW5kcG9pbnQucGFyYW1ldGVycykge1xuICAgIC8vIFN3YXAgYWxsIHRoZSBwYXJhbWV0ZXIgcGxhY2Vob2xkZXJzIHdpdGggdGhlIGFyZ3VtZW50cy5cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgT2JqZWN0LmtleXMoZW5kcG9pbnQucGFyYW1ldGVycykubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBjb25zdCBwYXJhbWV0ZXJOYW1lID0gZW5kcG9pbnQucGFyYW1ldGVyc1tpbmRleF07XG5cbiAgICAgIC8vIHdlIGhhdmUgdG8gZXhwbGljaXRseSBjaGVjayBmb3IgbnVsbCBhbmQgdW5kZWZpbmVkIHNpbmNlIHBhcmFtZXRlclxuICAgICAgLy8gdmFsdWVzIG1pZ2h0IGJlIDAuXG4gICAgICBpZiAocGFyYW1zW3BhcmFtZXRlck5hbWVdID09PSBudWxsIHx8IHBhcmFtc1twYXJhbWV0ZXJOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVVJMIFBhdGggcGFyYW1ldGVyICcke3BhcmFtZXRlck5hbWV9JyBtaXNzaW5nIWApO1xuICAgICAgfVxuXG4gICAgICB1cmwgPSB1cmwucmVwbGFjZShgeyR7aW5kZXh9fWAsIHBhcmFtc1tlbmRwb2ludC5wYXJhbWV0ZXJzW2luZGV4XV0pO1xuXG4gICAgICAvLyBNdXN0IHJlbW92ZSB0aGlzIGtleSBmcm9tIHRoZSBwYXlsb2FkIGFzIGl0IGhhcyBiZWVuIGNvbnN1bWVkIGJ5IHRoZSBVUkxcbiAgICAgIGRlbGV0ZSBwYXJhbXNbZW5kcG9pbnQucGFyYW1ldGVyc1tpbmRleF1dO1xuICAgIH1cbiAgfVxuXG4gIC8vIE5vIHBheWxvYWQgYXR0YWNoZWQgdG8gR0VUL0RFTEVURSByZXF1ZXN0c1xuICBpZiAoWydHRVQnLCAnSEVBRCddLmluY2x1ZGVzKGVuZHBvaW50Lm1ldGhvZCkpIHtcbiAgICByZXR1cm4geyB1cmwsIHBheWxvYWQ6IHVuZGVmaW5lZCB9O1xuICB9XG5cbiAgcmV0dXJuIHsgdXJsLCBwYXlsb2FkOiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH07XG59XG5cbi8qXG4gKiBJbXBsZW1lbnRzIHRoZSBuZXR3b3JrIGxldmVsIHByb3RvY29sIGZvciB0YWxraW5nIHRvIHRoZVxuICogV2VhbHRoc2ltcGxlIFRyYWRlIEhUVFBTIEFQSS5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gdGFsayhlbmRwb2ludCwgZGF0YSkge1xuICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgaGVhZGVycy5hcHBlbmQoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG5cbiAgaWYgKGVuZHBvaW50LmF1dGhlbnRpY2F0ZWQpIHtcbiAgICAvLyBubyBhY2Nlc3MgdG9rZW4gbWVhbnMgd2Ugd2lsbCBwcmVtYXR1cmVseSBmYWlsIHRoZSByZXF1ZXN0IGJlY2F1c2VcbiAgICAvLyB0aGlzIGlzIGEgcHJpdmlsZWdlZCBlbmRwb2ludC5cbiAgICBpZiAoIXRva2Vucy5hY2Nlc3MpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQXV0aGVudGljYXRpb24gcmVxdWlyZWQgZm9yICcke2VuZHBvaW50LnVybH0nYCk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZ0VuYWJsZWQoJ2ltcGxpY2l0X3Rva2VuX3JlZnJlc2gnKSkge1xuICAgICAgYXdhaXQgaW1wbGljaXRUb2tlblJlZnJlc2goKTtcbiAgICB9XG5cbiAgICBoZWFkZXJzLmFwcGVuZCgnQXV0aG9yaXphdGlvbicsIHRva2Vucy5hY2Nlc3MpO1xuICB9XG5cbiAgLy8gQXBwbHkgYWxsIGN1c3RvbSBoZWFkZXJzXG4gIGN1c3RvbUhlYWRlcnMudmFsdWVzKCkuZm9yRWFjaCgoaGVhZGVyKSA9PiBoZWFkZXJzLmFwcGVuZCguLi5oZWFkZXIpKTtcblxuICAvLyBmaWxsIHBhdGggYW5kIHF1ZXJ5IHBhcmFtZXRlcnMgaW4gdGhlIFVSTFxuICBjb25zdCB7IHVybCwgcGF5bG9hZCB9ID0gZmluYWxpemVSZXF1ZXN0KGVuZHBvaW50LCBkYXRhKTtcblxuICByZXR1cm4gZmV0Y2godXJsLCB7XG4gICAgYm9keTogcGF5bG9hZCxcbiAgICBtZXRob2Q6IGVuZHBvaW50Lm1ldGhvZCxcbiAgICBoZWFkZXJzLFxuICB9KTtcbn1cblxuLypcbiAqIEZ1bGZpbGwgdGhlIGVuZHBvaW50IHJlcXVlc3QgZ2l2ZW4gdGhlIGVuZHBvaW50IGNvbmZpZ3VyYXRpb24sIG9wdGlvbmFsXG4gKiBkYXRhLlxuICovXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBoYW5kbGVSZXF1ZXN0KGVuZHBvaW50LCBkYXRhKSB7XG4gIC8vIFN1Ym1pdCB0aGUgSFRUUCByZXF1ZXN0IHRvIHRoZSBXZWFsdGhzaW1wbGUgVHJhZGUgU2VydmVyc1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRhbGsoZW5kcG9pbnQsIGRhdGEpO1xuXG4gIGlmIChbSFRUUF9PSywgSFRUUF9DUkVBVEVEXS5pbmNsdWRlcyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmV0dXJuIGVuZHBvaW50Lm9uU3VjY2VzcyhyZXNwb25zZSk7XG4gIH1cblxuICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYXdhaXQgZW5kcG9pbnQub25GYWlsdXJlKHJlc3BvbnNlKSk7XG59XG5cbi8qKlxuICogT2J0YWluIGEgbmV3IHNldCBvZiBhdXRoZW50aWNhdGlvbiB0b2tlbnMgdXNpbmcgdGhlXG4gKiBleGlzdGluZyByZWZyZXNoIHRva2VuLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVmcmVzaEF1dGhlbnRpY2F0aW9uKCkge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLlJFRlJFU0gsIHsgcmVmcmVzaF90b2tlbjogdG9rZW5zLnJlZnJlc2ggfSk7XG4gIHRva2Vucy5zdG9yZShyZXNwb25zZS50b2tlbnMpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBleGlzdGluZyBzZXQgb2YgdG9rZW5zIGhhdmUgZXhwaXJlZCwgYXV0b21hdGljYWxseVxuICogdHJpZ2dlcmluZyBhIHJlZnJlc2ggaWYgdGhleSBoYXZlIGV4cGlyZWQuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGltcGxpY2l0VG9rZW5SZWZyZXNoKCkge1xuICBpZiAodG9rZW5zLmV4cGlyZWQoKSkge1xuICAgIGlmICh0b2tlbnMucmVmcmVzaCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gTGV0J3MgaW1wbGljaXRseSByZWZyZXNoIHRoZSBhY2Nlc3MgdG9rZW4gdXNpbmcgdGhlIHJlZnJlc2ggdG9rZW4uXG4gICAgICAgIGF3YWl0IHJlZnJlc2hBdXRoZW50aWNhdGlvbigpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gVGhlIHJlZnJlc2ggdG9rZW4gaXMgbm90IHZhbGlkLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byByZWZyZXNoIGV4cGlyZWQgdG9rZW46ICR7ZXJyb3J9YCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIGFyZSBmb3JjZWQgdG8gcmVqZWN0IGFzIG91ciBhY2Nlc3MgdG9rZW4gaGFzIGV4cGlyZWQgYW5kIHdlXG4gICAgICAvLyBkbyBub3QgaGF2ZSBhIHJlZnJlc2ggdG9rZW4uXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjY2VzcyB0b2tlbiBleHBpcmVkJyk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgZW5kcG9pbnRzIGZyb20gJy4uL2FwaS9lbmRwb2ludHMnO1xuaW1wb3J0IGhhbmRsZVJlcXVlc3QgZnJvbSAnLi4vbmV0d29yay9odHRwcyc7XG5pbXBvcnQgVGlja2VyIGZyb20gJy4uL2NvcmUvdGlja2VyJztcblxuLy8gVGhlIG1heGltdW0gbnVtYmVyIG9mIG9yZGVycyByZXRyaWV2ZWQgYnkgdGhlIC9vcmRlcnMgQVBJLlxuY29uc3QgT1JERVJTX1BFUl9QQUdFID0gMjA7XG5cbi8qKlxuICogQ29sbGVjdHMgb3JkZXJzIChmaWxsZWQsIHBlbmRpbmcsIGNhbmNlbGxlZCkgZm9yIHRoZSBwcm92aWRlZCBwYWdlIGFuZFxuICogYWNjb3VudCBpZC5cbiAqXG4gKiBAcGFyYW0geyp9IGFjY291bnRJZCBUaGUgc3BlY2lmaWMgYWNjb3VudCBpbiB0aGUgV2VhbHRoc2ltcGxlIFRyYWRlIGFjY291bnRcbiAqIEBwYXJhbSB7Kn0gcGFnZU51bSBUaGUgb3JkZXJzIHBhZ2UgaW5kZXggdG8gc2VlayB0b1xuICovXG5hc3luYyBmdW5jdGlvbiBwYWdlKGFjY291bnRJZCwgcGFnZU51bSkge1xuICByZXR1cm4gaGFuZGxlUmVxdWVzdChlbmRwb2ludHMuT1JERVJTX0JZX1BBR0UsIHtcbiAgICBvZmZzZXQ6IChwYWdlTnVtIC0gMSkgKiBPUkRFUlNfUEVSX1BBR0UsXG4gICAgYWNjb3VudElkLFxuICB9KTtcbn1cblxuLyoqXG4gKiBDb2xsZWN0cyBhbGwgb3JkZXJzIChmaWxsZWQsIHBlbmRpbmcsIGNhbmNlbGxlZCkgZm9yIHRoZSBzcGVjaWZpYyBhY2NvdW50LlxuICpcbiAqIEBwYXJhbSB7Kn0gYWNjb3VudElkIFRoZSBzcGVjaWZpYyBhY2NvdW50IGluIHRoZSBXZWFsdGhzaW1wbGUgVHJhZGUgYWNjb3VudFxuICovXG5hc3luYyBmdW5jdGlvbiBhbGwoYWNjb3VudElkKSB7XG4gIC8vIFdlIHN0YXJ0IGJ5IGNhcHR1cmluZyB0aGUgZmlyc3QgcGFnZSBvZiBvcmRlcnMgaW4gb3JkZXIgdG9cbiAgLy8gZGV0ZXJtaW5lIHRoZSBudW1iZXIgb2YgcGFnZXMgYXZhaWxhYmxlXG4gIGNvbnN0IGRhdGEgPSBhd2FpdCBwYWdlKGFjY291bnRJZCwgMSk7XG4gIGNvbnN0IHBhZ2VzID0gTWF0aC5jZWlsKGRhdGEudG90YWwgLyBPUkRFUlNfUEVSX1BBR0UpO1xuXG4gIGlmIChwYWdlcyA+IDEpIHtcbiAgICBjb25zdCB0YXNrcyA9IFtdO1xuXG4gICAgLy8gQnVpbGQgdGhlIHRhc2sgcXVldWUgdGhhdCB3aWxsIHJldHJpZXZlIHRoZSByZW1haW5pbmcgcGFnZXMgb2Ygb3JkZXJzXG4gICAgZm9yIChsZXQgcGFnZU51bSA9IDI7IHBhZ2VOdW0gPD0gcGFnZXM7IHBhZ2VOdW0rKykge1xuICAgICAgdGFza3MucHVzaChwYWdlKGFjY291bnRJZCwgcGFnZU51bSkudGhlbigocmVzdWx0KSA9PiByZXN1bHQub3JkZXJzKSk7XG4gICAgfVxuXG4gICAgLy8gT3V0LW9mLW9yZGVyIGludm9jYXRpb24gaXMgZGVzaXJlZC4gV2hhdCBtYXR0ZXJzIGlzIHRoYXQgUHJvbWlzZS5hbGwgd2lsbFxuICAgIC8vIGd1YXJhbnRlZSB0aGF0IHRoZSBkYXRhIG9yZGVyIGlzIHByZXNlcnZlZC5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBQcm9taXNlLmFsbCh0YXNrcyk7XG4gICAgcmVzdWx0LmZvckVhY2goKGxpc3QpID0+IGRhdGEub3JkZXJzLnB1c2goLi4ubGlzdCkpO1xuXG4gICAgLy8gVXBkYXRlIHRoZSB0b3RhbCBhdHRyaWJ1dGUgdG8gcmVmbGVjdCB0aGUgbmV3IHNpemVcbiAgICBkYXRhLnRvdGFsID0gZGF0YS5vcmRlcnMubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qXG4gKiBSZXRyaWV2ZSBmaWx0ZXJlZCBvcmRlcnMgYnkgdGlja2VyIGFuZCBzdGF0dXMuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGZpbHRlcmVkT3JkZXJzKGFjY291bnRJZCwgdGlja2VyLCBzdGF0dXMpIHtcbiAgLy8gRmV0Y2ggYWxsIG9yZGVyc1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCBhbGwoYWNjb3VudElkKTtcblxuICBjb25zdCBvcmRlckZpbHRlciA9IChvcmRlcikgPT4ge1xuICAgIGlmICh0aWNrZXIpIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IG5ldyBUaWNrZXIoeyBzeW1ib2w6IG9yZGVyLnN5bWJvbCwgaWQ6IG9yZGVyLnNlY3VyaXR5X2lkIH0pO1xuICAgICAgLy8gb3JkZXIgb2JqZWN0cyBkb24ndCBpbmNsdWRlIGV4Y2hhbmdlcywgc28gd2UgYXJlIHVuYWJsZSB0byBtYWtlXG4gICAgICAvLyBhIHN0cm9uZyBjb21wYXJpc29uIHdpdGhvdXQgcmVxdWlyaW5nIGEgbGluZWFyIGluY3JlYXNlIG9mXG4gICAgICAvLyBlbmRwb2ludCBjYWxscyAod2hpY2ggaXMgbm90IHJlYXNvbmFibGUpLlxuICAgICAgLy9cbiAgICAgIC8vIFRoZSB1c2VyIHNob3VsZCBwcm92aWRlIHRoZSBzZWN1cml0eSBpZCBmb3IgYSBzdHJvbmcgY29tcGFyaXNvbiBoZXJlLlxuICAgICAgaWYgKCFuZXcgVGlja2VyKHRpY2tlcikud2Vha0VxdWFscyh0YXJnZXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3JkZXIuc3RhdHVzID09PSBzdGF0dXM7XG4gIH07XG5cbiAgLy8gQXBwbHkgZmlsdGVyIHRvIHRoZSByZXN1bHRcbiAgcmVzdWx0Lm9yZGVycyA9IHJlc3VsdC5vcmRlcnMuZmlsdGVyKG9yZGVyRmlsdGVyKTtcbiAgcmVzdWx0LnRvdGFsID0gcmVzdWx0Lm9yZGVycy5sZW5ndGg7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICBwYWdlLFxuICBhbGwsXG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBwZW5kaW5nIG9yZGVycyBmb3IgdGhlIHNwZWNpZmllZCBzZWN1cml0eSBpbiB0aGUgYWNjb3VudC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBhY2NvdW50SWQgVGhlIHNwZWNpZmljIGFjY291bnQgaW4gdGhlIFdlYWx0aHNpbXBsZSBUcmFkZSBhY2NvdW50XG4gICAqIEBwYXJhbSB7Kn0gdGlja2VyIChvcHRpb25hbCkgVGhlIHNlY3VyaXR5IHN5bWJvbFxuICAgKi9cbiAgcGVuZGluZzogYXN5bmMgKGFjY291bnRJZCwgdGlja2VyKSA9PiBmaWx0ZXJlZE9yZGVycyhhY2NvdW50SWQsIHRpY2tlciwgJ3N1Ym1pdHRlZCcpLFxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgZmlsbGVkIG9yZGVycyBmb3IgdGhlIHNwZWNpZmllZCBzZWN1cml0eSBpbiB0aGUgYWNjb3VudC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBhY2NvdW50SWQgVGhlIHNwZWNpZmljIGFjY291bnQgaW4gdGhlIFdlYWx0aHNpbXBsZSBUcmFkZSBhY2NvdW50XG4gICAqIEBwYXJhbSB7Kn0gdGlja2VyIChvcHRpb25hbCkgVGhlIHNlY3VyaXR5IHN5bWJvbFxuICAgKi9cbiAgZmlsbGVkOiBhc3luYyAoYWNjb3VudElkLCB0aWNrZXIpID0+IGZpbHRlcmVkT3JkZXJzKGFjY291bnRJZCwgdGlja2VyLCAncG9zdGVkJyksXG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBjYW5jZWxsZWQgb3JkZXJzIGZvciB0aGUgc3BlY2lmaWVkIHNlY3VyaXR5IGluIHRoZSBhY2NvdW50LlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGFjY291bnRJZCBUaGUgc3BlY2lmaWMgYWNjb3VudCBpbiB0aGUgV2VhbHRoc2ltcGxlIFRyYWRlIGFjY291bnRcbiAgICogQHBhcmFtIHsqfSB0aWNrZXIgKG9wdGlvbmFsKSBUaGUgc2VjdXJpdHkgc3ltYm9sXG4gICAqL1xuICBjYW5jZWxsZWQ6IGFzeW5jIChhY2NvdW50SWQsIHRpY2tlcikgPT4gZmlsdGVyZWRPcmRlcnMoYWNjb3VudElkLCB0aWNrZXIsICdjYW5jZWxsZWQnKSxcbn07XG4iLCJpbXBvcnQgZW5kcG9pbnRzIGZyb20gJy4uL2FwaS9lbmRwb2ludHMnO1xuaW1wb3J0IGhhbmRsZVJlcXVlc3QgZnJvbSAnLi4vbmV0d29yay9odHRwcyc7XG5pbXBvcnQgaGlzdG9yeSBmcm9tICcuL2hpc3RvcnknO1xuaW1wb3J0IGRhdGEgZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgcXVvdGVzIGZyb20gJy4uL3F1b3Rlcyc7XG5pbXBvcnQgVGlja2VyIGZyb20gJy4uL2NvcmUvdGlja2VyJztcblxuY29uc3QgaXNDYW5hZGlhblNlY3VyaXR5ID0gKGV4Y2hhbmdlKSA9PiBbJ1RTWCcsICdUU1gtViddLmluY2x1ZGVzKGV4Y2hhbmdlKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gIC8qKlxuICAgKiBDYW5jZWxzIHRoZSBwZW5kaW5nIG9yZGVyIHNwZWNpZmllZCBieSB0aGUgb3JkZXIgaWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gb3JkZXJJZCBUaGUgcGVuZGluZyBvcmRlciB0byBjYW5jZWxcbiAgICovXG4gIGNhbmNlbDogYXN5bmMgKG9yZGVySWQpID0+ICh7XG4gICAgb3JkZXI6IG9yZGVySWQsXG4gICAgcmVzcG9uc2U6IGF3YWl0IGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLkNBTkNFTF9PUkRFUiwgeyBvcmRlcklkIH0pLFxuICB9KSxcblxuICAvKipcbiAgICogQ2FuY2VscyBhbGwgcGVuZGluZyBvcmRlcnMgdW5kZXIgdGhlIFdlYWx0aHNpbXBsZSBUcmFkZSBBY2NvdW50LlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGFjY291bnRJZCBUaGUgc3BlY2lmaWMgYWNjb3VudCBpbiB0aGUgV2VhbHRoc2ltcGxlIFRyYWRlIGFjY291bnRcbiAgICovXG4gIGFzeW5jIGNhbmNlbFBlbmRpbmcoYWNjb3VudElkKSB7XG4gICAgY29uc3QgcGVuZGluZyA9IGF3YWl0IGhpc3RvcnkucGVuZGluZyhhY2NvdW50SWQpO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChwZW5kaW5nLm9yZGVycy5tYXAoYXN5bmMgKG9yZGVyKSA9PiB0aGlzLmNhbmNlbChvcmRlci5vcmRlcl9pZCkpKTtcbiAgfSxcblxuICAvKipcbiAgICogTWFya2V0IGJ1eSBhIHNlY3VyaXR5IHRocm91Z2ggdGhlIFdlYWx0aHNpbXBsZSBUcmFkZSBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBhY2NvdW50SWQgVGhlIGFjY291bnQgdG8gbWFrZSB0aGUgdHJhbnNhY3Rpb24gZnJvbVxuICAgKiBAcGFyYW0geyp9IHRpY2tlciBUaGUgc2VjdXJpdHkgc3ltYm9sXG4gICAqIEBwYXJhbSB7Kn0gcXVhbnRpdHkgVGhlIG51bWJlciBvZiBzZWN1cml0aWVzIHRvIHB1cmNoYXNlXG4gICAqL1xuICBtYXJrZXRCdXk6IGFzeW5jIChhY2NvdW50SWQsIHRpY2tlciwgcXVhbnRpdHkpID0+IHtcbiAgICBjb25zdCBkZXRhaWxzID0gYXdhaXQgZGF0YS5nZXRTZWN1cml0eSh0aWNrZXIpO1xuXG4gICAgcmV0dXJuIGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLlBMQUNFX09SREVSLCB7XG4gICAgICBzZWN1cml0eV9pZDogZGV0YWlscy5pZCxcbiAgICAgIGxpbWl0X3ByaWNlOiAhKG5ldyBUaWNrZXIodGlja2VyKS5jcnlwdG8pID8gYXdhaXQgcXVvdGVzLmdldCh0aWNrZXIpIDogdW5kZWZpbmVkLFxuICAgICAgcXVhbnRpdHksXG4gICAgICBvcmRlcl90eXBlOiAnYnV5X3F1YW50aXR5JyxcbiAgICAgIG9yZGVyX3N1Yl90eXBlOiAnbWFya2V0JyxcbiAgICAgIHRpbWVfaW5fZm9yY2U6ICdkYXknLFxuICAgICAgYWNjb3VudF9pZDogYWNjb3VudElkLFxuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBMaW1pdCBidXkgYSBzZWN1cml0eSB0aHJvdWdoIHRoZSBXZWFsdGhzaW1wbGUgVHJhZGUgYXBwbGljYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gYWNjb3VudElkIFRoZSBhY2NvdW50IHRvIG1ha2UgdGhlIHRyYW5zYWN0aW9uIGZyb21cbiAgICogQHBhcmFtIHsqfSB0aWNrZXIgVGhlIHNlY3VyaXR5IHN5bWJvbFxuICAgKiBAcGFyYW0geyp9IGxpbWl0IFRoZSBtYXhpbXVtIHByaWNlIHRvIHB1cmNoYXNlIHRoZSBzZWN1cml0eSBhdFxuICAgKiBAcGFyYW0geyp9IHF1YW50aXR5IFRoZSBudW1iZXIgb2Ygc2VjdXJpdGllcyB0byBwdXJjaGFzZVxuICAgKi9cbiAgbGltaXRCdXk6IGFzeW5jIChhY2NvdW50SWQsIHRpY2tlciwgbGltaXQsIHF1YW50aXR5KSA9PiBoYW5kbGVSZXF1ZXN0KGVuZHBvaW50cy5QTEFDRV9PUkRFUiwge1xuICAgIHNlY3VyaXR5X2lkOiAoYXdhaXQgZGF0YS5nZXRTZWN1cml0eSh0aWNrZXIpKS5pZCxcbiAgICBsaW1pdF9wcmljZTogbGltaXQsXG4gICAgcXVhbnRpdHksXG4gICAgb3JkZXJfdHlwZTogJ2J1eV9xdWFudGl0eScsXG4gICAgb3JkZXJfc3ViX3R5cGU6ICdsaW1pdCcsXG4gICAgdGltZV9pbl9mb3JjZTogJ2RheScsXG4gICAgYWNjb3VudF9pZDogYWNjb3VudElkLFxuICB9KSxcblxuICAvKipcbiAgICogU3RvcCBsaW1pdCBidXkgYSBzZWN1cml0eSB0aHJvdWdoIHRoZSBXZWFsdGhzaW1wbGUgVHJhZGUgYXBwbGljYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gYWNjb3VudElkIFRoZSBhY2NvdW50IHRvIG1ha2UgdGhlIHRyYW5zYWN0aW9uIGZyb21cbiAgICogQHBhcmFtIHsqfSB0aWNrZXIgVGhlIHNlY3VyaXR5IHN5bWJvbFxuICAgKiBAcGFyYW0geyp9IHN0b3AgVGhlIHByaWNlIGF0IHdoaWNoIHRoZSBvcmRlciBjb252ZXJ0cyB0byBhIGxpbWl0IG9yZGVyXG4gICAqIEBwYXJhbSB7Kn0gbGltaXQgVGhlIG1heGltdW0gcHJpY2UgdG8gcHVyY2hhc2UgdGhlIHNlY3VyaXR5IGF0XG4gICAqIEBwYXJhbSB7Kn0gcXVhbnRpdHkgVGhlIG51bWJlciBvZiBzZWN1cml0aWVzIHRvIHB1cmNoYXNlXG4gICAqL1xuICBzdG9wTGltaXRCdXk6IGFzeW5jIChhY2NvdW50SWQsIHRpY2tlciwgc3RvcCwgbGltaXQsIHF1YW50aXR5KSA9PiB7XG4gICAgY29uc3Qgc2VjdXJpdHkgPSBhd2FpdCBkYXRhLmdldFNlY3VyaXR5KHRpY2tlcik7XG5cbiAgICAvLyBUaGUgV2VhbHRoc2ltcGxlIFRyYWRlIGJhY2tlbmQgZG9lc24ndCBjaGVjayBmb3IgdGhpcywgZXZlbiB0aG91Z2ggdGhlIGFwcCBkb2VzLi5cbiAgICBpZiAoaXNDYW5hZGlhblNlY3VyaXR5KHNlY3VyaXR5LnN0b2NrLnByaW1hcnlfZXhjaGFuZ2UpICYmIHN0b3AgIT09IGxpbWl0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RTWC9UU1gtViBzZWN1cml0aWVzIG11c3QgaGF2ZSBhbiBlcXVpdmFsZW50IHN0b3AgYW5kIGxpbWl0IHByaWNlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBoYW5kbGVSZXF1ZXN0KGVuZHBvaW50cy5QTEFDRV9PUkRFUiwge1xuICAgICAgc2VjdXJpdHlfaWQ6IHNlY3VyaXR5LmlkLFxuICAgICAgc3RvcF9wcmljZTogc3RvcCxcbiAgICAgIGxpbWl0X3ByaWNlOiBsaW1pdCxcbiAgICAgIHF1YW50aXR5LFxuICAgICAgb3JkZXJfdHlwZTogJ2J1eV9xdWFudGl0eScsXG4gICAgICBvcmRlcl9zdWJfdHlwZTogJ3N0b3BfbGltaXQnLFxuICAgICAgdGltZV9pbl9mb3JjZTogJ2RheScsXG4gICAgICBhY2NvdW50X2lkOiBhY2NvdW50SWQsXG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1hcmtldCBzZWxsIGEgc2VjdXJpdHkgdGhyb3VnaCB0aGUgV2VhbHRoc2ltcGxlIFRyYWRlIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGFjY291bnRJZCBUaGUgYWNjb3VudCB0byBtYWtlIHRoZSB0cmFuc2FjdGlvbiBmcm9tXG4gICAqIEBwYXJhbSB7Kn0gdGlja2VyIFRoZSBzZWN1cml0eSBzeW1ib2xcbiAgICogQHBhcmFtIHsqfSBxdWFudGl0eSBUaGUgbnVtYmVyIG9mIHNlY3VyaXRpZXMgdG8gcHVyY2hhc2VcbiAgICovXG4gIG1hcmtldFNlbGw6IGFzeW5jIChhY2NvdW50SWQsIHRpY2tlciwgcXVhbnRpdHkpID0+IGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLlBMQUNFX09SREVSLCB7XG4gICAgc2VjdXJpdHlfaWQ6IChhd2FpdCBkYXRhLmdldFNlY3VyaXR5KHRpY2tlcikpLmlkLFxuICAgIG1hcmtldF92YWx1ZTogIShuZXcgVGlja2VyKHRpY2tlcikuY3J5cHRvKSA/IGF3YWl0IHF1b3Rlcy5nZXQodGlja2VyKSA6IHVuZGVmaW5lZCxcbiAgICBxdWFudGl0eSxcbiAgICBvcmRlcl90eXBlOiAnc2VsbF9xdWFudGl0eScsXG4gICAgb3JkZXJfc3ViX3R5cGU6ICdtYXJrZXQnLFxuICAgIHRpbWVfaW5fZm9yY2U6ICdkYXknLFxuICAgIGFjY291bnRfaWQ6IGFjY291bnRJZCxcbiAgfSksXG5cbiAgLyoqXG4gICAqIExpbWl0IHNlbGwgYSBzZWN1cml0eSB0aHJvdWdoIHRoZSBXZWFsdGhzaW1wbGUgVHJhZGUgYXBwbGljYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gYWNjb3VudElkIFRoZSBhY2NvdW50IHRvIG1ha2UgdGhlIHRyYW5zYWN0aW9uIGZyb21cbiAgICogQHBhcmFtIHsqfSB0aWNrZXIgVGhlIHNlY3VyaXR5IHN5bWJvbFxuICAgKiBAcGFyYW0geyp9IGxpbWl0IFRoZSBtaW5pbXVtIHByaWNlIHRvIHNlbGwgdGhlIHNlY3VyaXR5IGF0XG4gICAqIEBwYXJhbSB7Kn0gcXVhbnRpdHkgVGhlIG51bWJlciBvZiBzZWN1cml0aWVzIHRvIHNlbGxcbiAgICovXG4gIGxpbWl0U2VsbDogYXN5bmMgKGFjY291bnRJZCwgdGlja2VyLCBsaW1pdCwgcXVhbnRpdHkpID0+IGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLlBMQUNFX09SREVSLCB7XG4gICAgc2VjdXJpdHlfaWQ6IChhd2FpdCBkYXRhLmdldFNlY3VyaXR5KHRpY2tlcikpLmlkLFxuICAgIGxpbWl0X3ByaWNlOiBsaW1pdCxcbiAgICBxdWFudGl0eSxcbiAgICBvcmRlcl90eXBlOiAnc2VsbF9xdWFudGl0eScsXG4gICAgb3JkZXJfc3ViX3R5cGU6ICdsaW1pdCcsXG4gICAgdGltZV9pbl9mb3JjZTogJ2RheScsXG4gICAgYWNjb3VudF9pZDogYWNjb3VudElkLFxuICB9KSxcblxuICAvKipcbiAgICogU3RvcCBsaW1pdCBzZWxsIGEgc2VjdXJpdHkgdGhyb3VnaCB0aGUgV2VhbHRoc2ltcGxlIFRyYWRlIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGFjY291bnRJZCBUaGUgYWNjb3VudCB0byBtYWtlIHRoZSB0cmFuc2FjdGlvbiBmcm9tXG4gICAqIEBwYXJhbSB7Kn0gdGlja2VyIFRoZSBzZWN1cml0eSBzeW1ib2xcbiAgICogQHBhcmFtIHsqfSBzdG9wIFRoZSBwcmljZSBhdCB3aGljaCB0aGUgb3JkZXIgY29udmVydHMgdG8gYSBsaW1pdCBvcmRlclxuICAgKiBAcGFyYW0geyp9IGxpbWl0IFRoZSBtaW5pbXVtIHByaWNlIHRvIHNlbGwgdGhlIHNlY3VyaXR5IGF0XG4gICAqIEBwYXJhbSB7Kn0gcXVhbnRpdHkgVGhlIG51bWJlciBvZiBzZWN1cml0aWVzIHRvIHNlbGxcbiAgICovXG4gIHN0b3BMaW1pdFNlbGw6IGFzeW5jIChhY2NvdW50SWQsIHRpY2tlciwgc3RvcCwgbGltaXQsIHF1YW50aXR5KSA9PiB7XG4gICAgY29uc3Qgc2VjdXJpdHkgPSBhd2FpdCBkYXRhLmdldFNlY3VyaXR5KHRpY2tlcik7XG5cbiAgICAvLyBUaGUgV2VhbHRoc2ltcGxlIFRyYWRlIGJhY2tlbmQgZG9lc24ndCBjaGVjayBmb3IgdGhpcywgZXZlbiB0aG91Z2ggdGhlIGFwcCBkb2VzLi5cbiAgICBpZiAoaXNDYW5hZGlhblNlY3VyaXR5KHNlY3VyaXR5LnN0b2NrLnByaW1hcnlfZXhjaGFuZ2UpICYmIHN0b3AgIT09IGxpbWl0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RTWC9UU1gtViBzZWN1cml0aWVzIG11c3QgaGF2ZSBhbiBlcXVpdmFsZW50IHN0b3AgYW5kIGxpbWl0IHByaWNlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBoYW5kbGVSZXF1ZXN0KGVuZHBvaW50cy5QTEFDRV9PUkRFUiwge1xuICAgICAgc2VjdXJpdHlfaWQ6IHNlY3VyaXR5LmlkLFxuICAgICAgc3RvcF9wcmljZTogc3RvcCxcbiAgICAgIGxpbWl0X3ByaWNlOiBsaW1pdCxcbiAgICAgIHF1YW50aXR5LFxuICAgICAgb3JkZXJfdHlwZTogJ3NlbGxfcXVhbnRpdHknLFxuICAgICAgb3JkZXJfc3ViX3R5cGU6ICdzdG9wX2xpbWl0JyxcbiAgICAgIHRpbWVfaW5fZm9yY2U6ICdkYXknLFxuICAgICAgYWNjb3VudF9pZDogYWNjb3VudElkLFxuICAgIH0pO1xuICB9LFxufTtcbiIsImltcG9ydCBoaXN0b3J5IGZyb20gJy4vaGlzdG9yeSc7XG5pbXBvcnQgc3VibWl0IGZyb20gJy4vc3VibWl0JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAuLi5oaXN0b3J5LFxuICAuLi5zdWJtaXQsXG59O1xuIiwiLyoqXG4gKiBUaGUgZGVmYXVsdCBwcm92aWRlciBmb3IgcXVvdGVzIGlzIFdlYWx0aHNpbXBsZSBUcmFkZS5cbiAqL1xuXG5pbXBvcnQgZGF0YSBmcm9tICcuLi9kYXRhJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gIC8qKlxuICAgICAqIFF1b3RlIGZvciBhIHRpY2tlciBmcm9tIHRoZSBXZWFsdGhzaW1wbGUgVHJhZGUgZW5kcG9pbnQuXG4gICAgICpcbiAgICAgKiBSZW1lbWJlciB0aGF0IHRoaXMgcXVvdGUgaXMgTk9UIHJlYWwtdGltZSFcbiAgICAgKi9cbiAgcXVvdGU6IGFzeW5jICh0aWNrZXIpID0+IHtcbiAgICBjb25zdCBpbmZvID0gYXdhaXQgZGF0YS5nZXRTZWN1cml0eSh0aWNrZXIsIHRydWUpO1xuICAgIHJldHVybiBpbmZvLnF1b3RlLmFtb3VudDtcbiAgfSxcbn07XG4iLCJpbXBvcnQgdHJhZGUgZnJvbSAnLi9kZWZhdWx0JztcbmltcG9ydCBkYXRhIGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IFRpY2tlciBmcm9tICcuLi9jb3JlL3RpY2tlcic7XG5pbXBvcnQgaGFuZGxlUmVxdWVzdCBmcm9tICcuLi9uZXR3b3JrL2h0dHBzJztcbmltcG9ydCBlbmRwb2ludHMgZnJvbSAnLi4vYXBpL2VuZHBvaW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAvLyBXZWFsdGhzaW1wbGUgVHJhZGUgaXMgb3VyIGRlZmF1bHQgc291cmNlIGZvciBxdW90ZXMsIGRlc3BpdGVcbiAgLy8gaGF2aW5nIGEgMTUgbWluIGRlbGF5XG4gIGRlZmF1bHRQcm92aWRlcjogdHJhZGUsXG5cbiAgLy8gTWFpbnRhaW5zIHF1b3RlIHByb3ZpZGVycyBvbiBhbiBleGNoYW5nZSBiYXNpc1xuICBwcm92aWRlcnM6IHt9LFxuXG4gIC8qKlxuICAgICAqIExvYWQgYSBjdXN0b20gcHJvdmlkZXIgZm9yIHRoZSBleGNoYW5nZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gZXhjaGFuZ2UgVGhlIGV4Y2hhbmdlIHRoYXQgdGhlIHByb3ZpZGVyIGZldGNoZXMgcXVvdGVzIGZvclxuICAgICAqIEBwYXJhbSB7Kn0gcHJvdmlkZXIgVGhlIHByb3ZpZGVyIG9iamVjdCBjb250YWluaW5nIHRoZSBxdW90ZSgpIGltcGxlbWVudGF0aW9uLlxuICAgICAqL1xuICB1c2UoZXhjaGFuZ2UsIHByb3ZpZGVyKSB7XG4gICAgaWYgKHR5cGVvZiAocHJvdmlkZXIucXVvdGUpICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBUaGUgcHJvdmlkZXIgbXVzdCBoYXZlIGEgcXVvdGUoKSBpbXBsZW1lbnRhdGlvbiB0aGF0IHdlIGNhbiBjYWxsIGxhdGVyIVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHF1b3RlIHByb3ZpZGVyIGZvciAke2V4Y2hhbmdlfSFgKTtcbiAgICB9XG5cbiAgICB0aGlzLnByb3ZpZGVyc1tleGNoYW5nZV0gPSBwcm92aWRlcjtcbiAgfSxcblxuICAvKipcbiAgICAgKiBPYnRhaW5zIGEgcXVvdGUgZm9yIHRoZSB0aWNrZXIuIFRoZSBzb3VyY2Ugb2YgdGhlIHF1b3RlIG1heSBiZSBhIGN1c3RvbVxuICAgICAqIHByb3ZpZGVyIGlmIGEgdmFsaWQgcHJvdmlkZXIgaXMgcmVnaXN0ZXJlZCBmb3IgdGhlIGV4Y2hhbmdlIHRoYXQgdGhlXG4gICAgICogdGlja2VyIHRyYWRlcyBvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gc2VjdXJpdHkgVGhlIHNlY3VyaXR5IHRvIGdldCBhIHF1b3RlIGZvci5cbiAgICAgKi9cbiAgYXN5bmMgZ2V0KHNlY3VyaXR5KSB7XG4gICAgbGV0IGV4Y2hhbmdlID0gbnVsbDtcbiAgICBjb25zdCB0aWNrZXIgPSBuZXcgVGlja2VyKHNlY3VyaXR5KTtcblxuICAgIGlmICh0aWNrZXIuZXhjaGFuZ2UpIHtcbiAgICAgIC8vIFdlIG5lZWQgdGhlIGV4Y2hhbmdlIGluIHRoZSBuZXh0IHN0ZXAgaWYgdGhlIHVzZXIgaGFzIHNwZWNpZmllZFxuICAgICAgLy8gYSBjdXN0b20gcHJvdmlkZXIgZm9yIGFuIGV4Y2hhbmdlLiBTbyBpZiB0aGUgdXNlciBoYXNuJ3QgcHJvdmlkZWRcbiAgICAgIC8vIGl0LCB3ZSB3aWxsIGhhdmUgdG8gcGluZyBXZWFsdGhzaW1wbGUgdHJhZGUgdG8gZ2V0IGl0LlxuICAgICAgZXhjaGFuZ2UgPSB0aWNrZXIuZXhjaGFuZ2U7XG4gICAgfSBlbHNlIGlmICh0aWNrZXIuY3J5cHRvICYmIHRpY2tlci5pZCkge1xuICAgICAgLy8gSWYgdGhlIGlkIGlzIG9ubHkgZ2l2ZW4gYnV0IHdlIGtub3cgaXQncyBhIGNyeXB0byBpZCxcbiAgICAgIC8vIHdlIHdpbGwgYXV0b21hdGljYWxseSBzZXQgZXhjaGFuZ2UgdG8gJ0NDJy5cbiAgICAgIGV4Y2hhbmdlID0gJ0NDJztcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5rZXlzKHRoaXMucHJvdmlkZXJzKS5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBpbmZvID0gYXdhaXQgZGF0YS5nZXRTZWN1cml0eSh0aWNrZXIsIGZhbHNlKTtcbiAgICAgIGV4Y2hhbmdlID0gaW5mby5zdG9jay5wcmltYXJ5X2V4Y2hhbmdlO1xuICAgIH1cblxuICAgIC8vIEEgY3VzdG9tIHByb3ZpZGVyIHdpbGwgdGFrZSBwcmVjZWRlbmNlIG92ZXIgdGhlIGRlZmF1bHQgc291cmNlXG4gICAgaWYgKGV4Y2hhbmdlIGluIHRoaXMucHJvdmlkZXJzKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm92aWRlcnNbZXhjaGFuZ2VdLnF1b3RlKHRpY2tlcik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmRlZmF1bHRQcm92aWRlci5xdW90ZSh0aWNrZXIpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIGhpc3RvcmljYWwgcXVvdGVzIHdpdGhpbiBhIHNwZWNpZmllZCBpbnRlcnZhbCBmb3IgdGhlIHRpY2tlci5cbiAgICogVGhlIHNvdXJjZSBvZiB0aGUgaGlzdG9yaWNhbCBkYXRhIGlzIG5vdCBjdXN0b21pemFibGUgYXQgdGhpcyB0aW1lIGJlY2F1c2VcbiAgICogdGhlcmUgaXMgbm8gbmVlZCBmb3IgaXQgdG8gYmUgc28uXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdGlja2VyIFRoZSB0aWNrZXIgdG8gc2VhcmNoIGhpc3RvcmljYWwgcXVvdGVzIGZvclxuICAgKiBAcGFyYW0geyp9IGludGVydmFsIFRoZSB0aW1lIHJhbmdlIG9mIHRoZSBxdW90ZXNcbiAgICovXG4gIGFzeW5jIGhpc3Rvcnkoc2VjdXJpdHksIGludGVydmFsKSB7XG4gICAgLy8gdmFsaWRhdGUgdGhlIHVzZXItZ2l2ZW4gc2VjdXJpdHlcbiAgICBjb25zdCB0aWNrZXIgPSBuZXcgVGlja2VyKHNlY3VyaXR5KTtcbiAgICBpZiAoIXRpY2tlci5pZCkge1xuICAgICAgdGlja2VyLmlkID0gKGF3YWl0IGRhdGEuZ2V0U2VjdXJpdHkodGlja2VyKSkuaWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhbmRsZVJlcXVlc3QoZW5kcG9pbnRzLlFVT1RFU19ISVNUT1JZLCB7IGlkOiB0aWNrZXIuaWQsIGludGVydmFsIH0pO1xuICB9LFxufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzU0NV9fOyIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fOTQ5X187IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBtb2R1bGUgZXhwb3J0cyBtdXN0IGJlIHJldHVybmVkIGZyb20gcnVudGltZSBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG5yZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygzNTIpO1xuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gbW9kdWxlWydkZWZhdWx0J10gOlxuXHRcdCgpID0+IG1vZHVsZTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApIl0sInNvdXJjZVJvb3QiOiIifQ==